
00_CORTEX_02_ASSEMBLY_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000292c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08002a38  08002a38  00003a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002afc  08002afc  00004068  2**0
                  CONTENTS
  4 .ARM          00000000  08002afc  08002afc  00004068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002afc  08002afc  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002afc  08002afc  00003afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b00  08002b00  00003b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002b04  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000068  08002b6c  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08002b6c  0000421c  2**0
                  ALLOC
 11 .ARM.attributes 0000002f  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_line   000071c5  00000000  00000000  00004097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000080  00000000  00000000  0000b25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000556a  00000000  00000000  0000b2dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000014f9  00000000  00000000  00010846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000006e8  00000000  00000000  00011d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00083bd4  00000000  00000000  00012428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000051d  00000000  00000000  00095ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001612b  00000000  00000000  00096519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ac644  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021dc  00000000  00000000  000ac688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a20 	.word	0x08002a20

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002a20 	.word	0x08002a20

0800014c <FIRST_ASM_FUNC>:
	 	------------------------
		*/
	.global  FIRST_ASM_FUNC
FIRST_ASM_FUNC:
	@ return to main function
	add a1,a2 @r0=r0+r1
 800014c:	4408      	add	r0, r1
@	add r0,r0,r1 @r0=r0+r1
	bx lr @pc=lr, LR[0]=1 thumb
 800014e:	4770      	bx	lr

08000150 <ADD8>:
	 	a8: r0, b8: r1
		*/
	.global  ADD8
ADD8:
	@ return the sum of two numbers
	add r0,r1	@r0=r0+r1
 8000150:	4408      	add	r0, r1
	bx lr @return
 8000152:	4770      	bx	lr

08000154 <ADD32>:
	 	a: r0, b: r1
		*/
	.global  ADD32
ADD32:
	@ return the sum of two numbers
	add r0,r1	@r0=r0+r1
 8000154:	4408      	add	r0, r1
	bx lr
 8000156:	4770      	bx	lr

08000158 <max>:
max:
	@ IMPLEMENT HERE
	@ returning the max between two numbers
	@ use MOV, CMP and B instruction
@ before N=0, Z=0, C=0, V=1
	cmp r0,r1	@ r0(34)-r1(100)= N,Z,C,V,Q, @ r0이 기준이다!
 8000158:	4288      	cmp	r0, r1
@ after N=1, Z=0, C=0, V=0
	bge 1f @ goto label 1
 800015a:	da00      	bge.n	800015e <max+0x6>
	blt 2f @ goto label 2
 800015c:	db01      	blt.n	8000162 <max+0xa>
1: @pipeline stall
	mov r0,r0 @ 생략가능
 800015e:	4600      	mov	r0, r0
	bx lr
 8000160:	4770      	bx	lr
2:
	mov r0,r1 @ r1이 더 크다면, AAPCS규칙에 따라, r0으로 옮겨줘야 r1을 반환가능
 8000162:	4608      	mov	r0, r1
	bx lr
 8000164:	4770      	bx	lr

08000166 <max_prac>:


	.global max_prac
max_prac:
	cmp r0,r1 @ compare with r0, r1 based on r0
 8000166:	4288      	cmp	r0, r1

	bge 1f @ greator equal
 8000168:	da00      	bge.n	800016c <max_prac+0x6>
	blt 2f @ less than
 800016a:	db01      	blt.n	8000170 <max_prac+0xa>
1: @ r0가 더 클때
	mov r0, r0
 800016c:	4600      	mov	r0, r0
	bx lr
 800016e:	4770      	bx	lr
2: @ r1가 더 클때
	mov r0, r1 @ r0이 반환 레지스터이기 때문에 결과를 r0에 저장
 8000170:	4608      	mov	r0, r1
	bx lr @ 복귀주소로 복귀
 8000172:	4770      	bx	lr

08000174 <max2_prac>:


	.global max2_prac
max2_prac:
	cmp r0, r1
 8000174:	4288      	cmp	r0, r1
	ite ge
 8000176:	bfac      	ite	ge
	movge r0, r0
 8000178:	4600      	movge	r0, r0
	movlt r0, r1
 800017a:	4608      	movlt	r0, r1
	bx lr
 800017c:	4770      	bx	lr

0800017e <max2>:
max2:
	@ IMPLEMENT HERE
	@ returning the max between two numbers
	@ use MOV, CMP and IT??? instruction: under 6 lines
	@ hint: https://community.arm.com/arm-community-blogs/b/architectures-and-processors-blog/posts/condition-codes-3-conditional-execution-in-thumb-2
	cmp r0,r1
 800017e:	4288      	cmp	r0, r1
	ite ge
 8000180:	bfac      	ite	ge
	movge r0,r0
 8000182:	4600      	movge	r0, r0
	movlt r0,r1
 8000184:	4608      	movlt	r0, r1
	bx lr
 8000186:	4770      	bx	lr

08000188 <clear_unused>:
	.global  clear_unused
clear_unused:
	@ IMPLEMENT HERE
	@ returning v & ~(1<<bitnum);
	@ use MOV, LSL and BIC instruction: under 5 lines
	mov r2,#1
 8000188:	f04f 0201 	mov.w	r2, #1
	lsl r2,r1
 800018c:	fa02 f201 	lsl.w	r2, r2, r1
	bic r0,r2
 8000190:	ea20 0002 	bic.w	r0, r0, r2
	bx lr
 8000194:	4770      	bx	lr

08000196 <clears_unused>:
	.global  clears_unused
clears_unused:
	@ IMPLEMENT HERE
	@ returning v & ~(pattern);
	@ use BIC instruction: under 5 lines
	bic r0,r1
 8000196:	ea20 0001 	bic.w	r0, r0, r1
	bx lr
 800019a:	4770      	bx	lr

0800019c <sum>:
		*/
	.global  sum
sum:
	@ IMPLEMENT HERE
	@ use MOV, ADD, CMP and B instruction: under 10 lines
	mov r2,#0 @sum(r2)
 800019c:	f04f 0200 	mov.w	r2, #0

080001a0 <loop1>:
loop1:
	add r2,r0
 80001a0:	4402      	add	r2, r0
	add r0,#1
 80001a2:	f100 0001 	add.w	r0, r0, #1
	cmp r1,r0
 80001a6:	4281      	cmp	r1, r0
	bge loop1
 80001a8:	dafa      	bge.n	80001a0 <loop1>
	mov r0,r2 @return value
 80001aa:	4610      	mov	r0, r2
	bx lr	 @ return
 80001ac:	4770      	bx	lr

080001ae <MEMCPY_SINGLE>:
	 	------------------------
			r0=dst, r1=src, r2=size
		*/
	.global  MEMCPY_SINGLE
MEMCPY_SINGLE:
	push {lr} 	 @ push
 80001ae:	b500      	push	{lr}
	@ IMPLEMENT HERE
	@ use LDR, STR, SUB, CMP and B instruction: under 10 lines
	lsl r2,#2 @ r2=r2*(2^2)=4r2
 80001b0:	ea4f 0282 	mov.w	r2, r2, lsl #2

080001b4 <loop2>:
loop2:
	ldrb r3,[r1],#1
 80001b4:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb r3,[r0],#1
 80001b8:	f800 3b01 	strb.w	r3, [r0], #1
	sub r2,#1
 80001bc:	f1a2 0201 	sub.w	r2, r2, #1
	cmp r2,#0
 80001c0:	2a00      	cmp	r2, #0
	bgt loop2
 80001c2:	dcf7      	bgt.n	80001b4 <loop2>

	pop {pc}	 @ pop(pc=lr), likely bx lr
 80001c4:	bd00      	pop	{pc}

080001c6 <MEMCPY_BLOCK>:
	 	------------------------
			r0=dst, r1=src, r2=size
		*/
	.global  MEMCPY_BLOCK
MEMCPY_BLOCK:
	push {r4-r6,lr} 	 @ push
 80001c6:	b570      	push	{r4, r5, r6, lr}

080001c8 <loop3>:
	@ IMPLEMENT HERE
	@ Make a copy in units of 4 words
	@ use LDMIA, STMIA, SUB and CBZ instruction: under 10 lines

loop3:
	cbz r2,_exit_MEMCPY_BLOCK
 80001c8:	b122      	cbz	r2, 80001d4 <_exit_MEMCPY_BLOCK>
	ldmia r1!,{r3-r5,r6}
 80001ca:	c978      	ldmia	r1!, {r3, r4, r5, r6}
	stmia r0!,{r3-r5,r6}
 80001cc:	c078      	stmia	r0!, {r3, r4, r5, r6}
	sub r2,#4
 80001ce:	f1a2 0204 	sub.w	r2, r2, #4
	b loop3
 80001d2:	e7f9      	b.n	80001c8 <loop3>

080001d4 <_exit_MEMCPY_BLOCK>:
_exit_MEMCPY_BLOCK:
	pop {r4-r6,pc}	 @ pop
 80001d4:	bd70      	pop	{r4, r5, r6, pc}

080001d6 <__bswap_32_asm>:
	 	------------------------
			r0=a
		*/
	.global  __bswap_32_asm
__bswap_32_asm:
	push {lr} 	 @ push
 80001d6:	b500      	push	{lr}
	@ byte swap by rev
	@ use rev, rev16, revsh OR rbit: under 4 lines
	@rev r0,r0
	@rev16 r0,r0
	@revsh r0,r0
	rbit r0,r0
 80001d8:	fa90 f0a0 	rbit	r0, r0

	pop {pc}	 @ pop
 80001dc:	bd00      	pop	{pc}

080001de <whereIsBit>:
	@ int whereIsBit(int c)
	@	c:r0
	@
	.global whereIsBit
whereIsBit:
	push {lr}
 80001de:	b500      	push	{lr}
	@ IMPLEMENT HERE
	@ use clz: under 7 lines
	mov r1,#31
 80001e0:	f04f 011f 	mov.w	r1, #31
	clz r0,r0
 80001e4:	fab0 f080 	clz	r0, r0
	sub r1,r0
 80001e8:	eba1 0100 	sub.w	r1, r1, r0
	mov r0,r1
 80001ec:	4608      	mov	r0, r1
	pop {pc}
 80001ee:	bd00      	pop	{pc}

080001f0 <MY_LL_GPIO_TogglePin>:
	@ int MY_LL_GPIO_TogglePin(void)
	@
	@
	.global MY_LL_GPIO_TogglePin
MY_LL_GPIO_TogglePin:
	push {lr}
 80001f0:	b500      	push	{lr}

	pop {pc}
 80001f2:	bd00      	pop	{pc}

080001f4 <xPSR_TEST>:
	*/
	.global xPSR_TEST
xPSR_TEST:

	// N-flag
	mov r0,#0x80000000
 80001f4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
	subs r0,#1 @ N(0):0x7FFFFFFF
 80001f8:	3801      	subs	r0, #1
	adds r0,#1 @ N(1):0x80000000
 80001fa:	3001      	adds	r0, #1
	// Z-flag
	mov r0,#2
 80001fc:	f04f 0002 	mov.w	r0, #2
	subs r0,#1 @ Z(0)
 8000200:	3801      	subs	r0, #1
	subs r0,#1 @ Z(1)
 8000202:	3801      	subs	r0, #1
	// C-flag
	mov r0,#-1
 8000204:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
	adds r0,#1 @ C(1)
 8000208:	3001      	adds	r0, #1
	mov r0,#0x40000000
 800020a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
	lsls r0,#1 @ C(0)
 800020e:	0040      	lsls	r0, r0, #1
	lsls r0,#1 @ C(1)
 8000210:	0040      	lsls	r0, r0, #1
	mov r0,#2
 8000212:	f04f 0002 	mov.w	r0, #2
	lsrs r0,#1 @ C(0)
 8000216:	0840      	lsrs	r0, r0, #1
	lsrs r0,#1 @ C(1)
 8000218:	0840      	lsrs	r0, r0, #1
	// V-flag
	mov r0,#0x80000000 @ V
 800021a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
	adds r0,#1 @ V(0):0x80000001
 800021e:	3001      	adds	r0, #1
	subs r0,#2 @ V(1):0x7FFFFFFF
 8000220:	3802      	subs	r0, #2
	adds r0,#1 @ V(1):0x80000000
 8000222:	3001      	adds	r0, #1
	// Q-flag
	mov r1,#1
 8000224:	f04f 0101 	mov.w	r1, #1
	mov r0,#0x80000000
 8000228:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
	subs r0,#1 @ 0x7FFFFFFF
 800022c:	3801      	subs	r0, #1
	divide by zero error is occured!
	Note that this symptom does not occur in cortex-m4.
	*/
@	qadd r0,r0,r1 @ Q(1):0x7FFFFFFF

	bx lr
 800022e:	4770      	bx	lr

08000230 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
 if ( ch == '\n' )
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2b0a      	cmp	r3, #10
 800023c:	d106      	bne.n	800024c <__io_putchar+0x1c>
	 HAL_UART_Transmit(&huart2, (uint8_t*)&"\r", 1, HAL_MAX_DELAY);
 800023e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000242:	2201      	movs	r2, #1
 8000244:	4907      	ldr	r1, [pc, #28]	@ (8000264 <__io_putchar+0x34>)
 8000246:	4808      	ldr	r0, [pc, #32]	@ (8000268 <__io_putchar+0x38>)
 8000248:	f001 fa49 	bl	80016de <HAL_UART_Transmit>
 HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800024c:	1d39      	adds	r1, r7, #4
 800024e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000252:	2201      	movs	r2, #1
 8000254:	4804      	ldr	r0, [pc, #16]	@ (8000268 <__io_putchar+0x38>)
 8000256:	f001 fa42 	bl	80016de <HAL_UART_Transmit>
 return ch;
 800025a:	687b      	ldr	r3, [r7, #4]
}
 800025c:	4618      	mov	r0, r3
 800025e:	3708      	adds	r7, #8
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	08002a38 	.word	0x08002a38
 8000268:	20000084 	.word	0x20000084

0800026c <__io_getchar>:

int __io_getchar(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
	uint8_t ch;

	while( HAL_OK != HAL_UART_Receive(&huart2, &ch, 1, HAL_MAX_DELAY) )
 8000272:	bf00      	nop
 8000274:	1df9      	adds	r1, r7, #7
 8000276:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800027a:	2201      	movs	r2, #1
 800027c:	4805      	ldr	r0, [pc, #20]	@ (8000294 <__io_getchar+0x28>)
 800027e:	f001 fac0 	bl	8001802 <HAL_UART_Receive>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d1f5      	bne.n	8000274 <__io_getchar+0x8>
	{
		;
	}
	return ch;
 8000288:	79fb      	ldrb	r3, [r7, #7]
}
 800028a:	4618      	mov	r0, r3
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	20000084 	.word	0x20000084

08000298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029e:	f000 fa89 	bl	80007b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a2:	f000 f837 	bl	8000314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a6:	f000 f8a1 	bl	80003ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002aa:	f000 f875 	bl	8000398 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("\n\n\nHELLO, STM32\n");
 80002ae:	4814      	ldr	r0, [pc, #80]	@ (8000300 <main+0x68>)
 80002b0:	f001 fd4c 	bl	8001d4c <puts>
  SCB->SHCSR = SCB->SHCSR | (7<<16); // If you do not do this, it will be treated as a hard fault.
 80002b4:	4b13      	ldr	r3, [pc, #76]	@ (8000304 <main+0x6c>)
 80002b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002b8:	4a12      	ldr	r2, [pc, #72]	@ (8000304 <main+0x6c>)
 80002ba:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80002be:	6253      	str	r3, [r2, #36]	@ 0x24

#if 1
	{
		/* actual initialization */
		volatile int result;
		int a=34;
 80002c0:	2322      	movs	r3, #34	@ 0x22
 80002c2:	60fb      	str	r3, [r7, #12]
		int b=100;
 80002c4:	2364      	movs	r3, #100	@ 0x64
 80002c6:	60bb      	str	r3, [r7, #8]

		/* function returning the max between two numbers */
		printf("ex3. get max value\n");
 80002c8:	480f      	ldr	r0, [pc, #60]	@ (8000308 <main+0x70>)
 80002ca:	f001 fd3f 	bl	8001d4c <puts>

		result = max(a, b);
 80002ce:	68b9      	ldr	r1, [r7, #8]
 80002d0:	68f8      	ldr	r0, [r7, #12]
 80002d2:	f7ff ff41 	bl	8000158 <max>
 80002d6:	4603      	mov	r3, r0
 80002d8:	607b      	str	r3, [r7, #4]
		printf("Max value is : %d (must 100)\n", result);
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	4619      	mov	r1, r3
 80002de:	480b      	ldr	r0, [pc, #44]	@ (800030c <main+0x74>)
 80002e0:	f001 fccc 	bl	8001c7c <iprintf>
		result = max2(a, b);
 80002e4:	68b9      	ldr	r1, [r7, #8]
 80002e6:	68f8      	ldr	r0, [r7, #12]
 80002e8:	f7ff ff49 	bl	800017e <max2>
 80002ec:	4603      	mov	r3, r0
 80002ee:	607b      	str	r3, [r7, #4]
		printf("Max2 value is : %d (must 100)\n", result);
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	4619      	mov	r1, r3
 80002f4:	4806      	ldr	r0, [pc, #24]	@ (8000310 <main+0x78>)
 80002f6:	f001 fcc1 	bl	8001c7c <iprintf>
		__BKPT(0);
 80002fa:	be00      	bkpt	0x0000

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002fc:	bf00      	nop
 80002fe:	e7fd      	b.n	80002fc <main+0x64>
 8000300:	08002a3c 	.word	0x08002a3c
 8000304:	e000ed00 	.word	0xe000ed00
 8000308:	08002a4c 	.word	0x08002a4c
 800030c:	08002a60 	.word	0x08002a60
 8000310:	08002a80 	.word	0x08002a80

08000314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b090      	sub	sp, #64	@ 0x40
 8000318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031a:	f107 0318 	add.w	r3, r7, #24
 800031e:	2228      	movs	r2, #40	@ 0x28
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f001 fd1a 	bl	8001d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
 8000334:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000336:	2302      	movs	r3, #2
 8000338:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800033a:	2301      	movs	r3, #1
 800033c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800033e:	2310      	movs	r3, #16
 8000340:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000342:	2302      	movs	r3, #2
 8000344:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000346:	2300      	movs	r3, #0
 8000348:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800034a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800034e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000350:	f107 0318 	add.w	r3, r7, #24
 8000354:	4618      	mov	r0, r3
 8000356:	f000 fd5b 	bl	8000e10 <HAL_RCC_OscConfig>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000360:	f000 f8b2 	bl	80004c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000364:	230f      	movs	r3, #15
 8000366:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000368:	2302      	movs	r3, #2
 800036a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036c:	2300      	movs	r3, #0
 800036e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000370:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000374:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000376:	2300      	movs	r3, #0
 8000378:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	2102      	movs	r1, #2
 800037e:	4618      	mov	r0, r3
 8000380:	f000 ffc8 	bl	8001314 <HAL_RCC_ClockConfig>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800038a:	f000 f89d 	bl	80004c8 <Error_Handler>
  }
}
 800038e:	bf00      	nop
 8000390:	3740      	adds	r7, #64	@ 0x40
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
	...

08000398 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800039c:	4b11      	ldr	r3, [pc, #68]	@ (80003e4 <MX_USART2_UART_Init+0x4c>)
 800039e:	4a12      	ldr	r2, [pc, #72]	@ (80003e8 <MX_USART2_UART_Init+0x50>)
 80003a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003a2:	4b10      	ldr	r3, [pc, #64]	@ (80003e4 <MX_USART2_UART_Init+0x4c>)
 80003a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003aa:	4b0e      	ldr	r3, [pc, #56]	@ (80003e4 <MX_USART2_UART_Init+0x4c>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003b0:	4b0c      	ldr	r3, [pc, #48]	@ (80003e4 <MX_USART2_UART_Init+0x4c>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003b6:	4b0b      	ldr	r3, [pc, #44]	@ (80003e4 <MX_USART2_UART_Init+0x4c>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003bc:	4b09      	ldr	r3, [pc, #36]	@ (80003e4 <MX_USART2_UART_Init+0x4c>)
 80003be:	220c      	movs	r2, #12
 80003c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003c2:	4b08      	ldr	r3, [pc, #32]	@ (80003e4 <MX_USART2_UART_Init+0x4c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003c8:	4b06      	ldr	r3, [pc, #24]	@ (80003e4 <MX_USART2_UART_Init+0x4c>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003ce:	4805      	ldr	r0, [pc, #20]	@ (80003e4 <MX_USART2_UART_Init+0x4c>)
 80003d0:	f001 f938 	bl	8001644 <HAL_UART_Init>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003da:	f000 f875 	bl	80004c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	20000084 	.word	0x20000084
 80003e8:	40004400 	.word	0x40004400

080003ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b088      	sub	sp, #32
 80003f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f2:	f107 0310 	add.w	r3, r7, #16
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
 80003fc:	609a      	str	r2, [r3, #8]
 80003fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000400:	4b2d      	ldr	r3, [pc, #180]	@ (80004b8 <MX_GPIO_Init+0xcc>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a2c      	ldr	r2, [pc, #176]	@ (80004b8 <MX_GPIO_Init+0xcc>)
 8000406:	f043 0310 	orr.w	r3, r3, #16
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b2a      	ldr	r3, [pc, #168]	@ (80004b8 <MX_GPIO_Init+0xcc>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0310 	and.w	r3, r3, #16
 8000414:	60fb      	str	r3, [r7, #12]
 8000416:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000418:	4b27      	ldr	r3, [pc, #156]	@ (80004b8 <MX_GPIO_Init+0xcc>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a26      	ldr	r2, [pc, #152]	@ (80004b8 <MX_GPIO_Init+0xcc>)
 800041e:	f043 0320 	orr.w	r3, r3, #32
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b24      	ldr	r3, [pc, #144]	@ (80004b8 <MX_GPIO_Init+0xcc>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f003 0320 	and.w	r3, r3, #32
 800042c:	60bb      	str	r3, [r7, #8]
 800042e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000430:	4b21      	ldr	r3, [pc, #132]	@ (80004b8 <MX_GPIO_Init+0xcc>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	4a20      	ldr	r2, [pc, #128]	@ (80004b8 <MX_GPIO_Init+0xcc>)
 8000436:	f043 0304 	orr.w	r3, r3, #4
 800043a:	6193      	str	r3, [r2, #24]
 800043c:	4b1e      	ldr	r3, [pc, #120]	@ (80004b8 <MX_GPIO_Init+0xcc>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	f003 0304 	and.w	r3, r3, #4
 8000444:	607b      	str	r3, [r7, #4]
 8000446:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000448:	4b1b      	ldr	r3, [pc, #108]	@ (80004b8 <MX_GPIO_Init+0xcc>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	4a1a      	ldr	r2, [pc, #104]	@ (80004b8 <MX_GPIO_Init+0xcc>)
 800044e:	f043 0308 	orr.w	r3, r3, #8
 8000452:	6193      	str	r3, [r2, #24]
 8000454:	4b18      	ldr	r3, [pc, #96]	@ (80004b8 <MX_GPIO_Init+0xcc>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	f003 0308 	and.w	r3, r3, #8
 800045c:	603b      	str	r3, [r7, #0]
 800045e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	2120      	movs	r1, #32
 8000464:	4815      	ldr	r0, [pc, #84]	@ (80004bc <MX_GPIO_Init+0xd0>)
 8000466:	f000 fc99 	bl	8000d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800046a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800046e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000470:	4b13      	ldr	r3, [pc, #76]	@ (80004c0 <MX_GPIO_Init+0xd4>)
 8000472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000474:	2300      	movs	r3, #0
 8000476:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000478:	f107 0310 	add.w	r3, r7, #16
 800047c:	4619      	mov	r1, r3
 800047e:	4811      	ldr	r0, [pc, #68]	@ (80004c4 <MX_GPIO_Init+0xd8>)
 8000480:	f000 fb08 	bl	8000a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000484:	2320      	movs	r3, #32
 8000486:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000488:	2301      	movs	r3, #1
 800048a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	2300      	movs	r3, #0
 800048e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000490:	2302      	movs	r3, #2
 8000492:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000494:	f107 0310 	add.w	r3, r7, #16
 8000498:	4619      	mov	r1, r3
 800049a:	4808      	ldr	r0, [pc, #32]	@ (80004bc <MX_GPIO_Init+0xd0>)
 800049c:	f000 fafa 	bl	8000a94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004a0:	2200      	movs	r2, #0
 80004a2:	2100      	movs	r1, #0
 80004a4:	2028      	movs	r0, #40	@ 0x28
 80004a6:	f000 fabe 	bl	8000a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004aa:	2028      	movs	r0, #40	@ 0x28
 80004ac:	f000 fad7 	bl	8000a5e <HAL_NVIC_EnableIRQ>

}
 80004b0:	bf00      	nop
 80004b2:	3720      	adds	r7, #32
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40010800 	.word	0x40010800
 80004c0:	10110000 	.word	0x10110000
 80004c4:	40011000 	.word	0x40011000

080004c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004cc:	b672      	cpsid	i
}
 80004ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004d0:	bf00      	nop
 80004d2:	e7fd      	b.n	80004d0 <Error_Handler+0x8>

080004d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004da:	4b15      	ldr	r3, [pc, #84]	@ (8000530 <HAL_MspInit+0x5c>)
 80004dc:	699b      	ldr	r3, [r3, #24]
 80004de:	4a14      	ldr	r2, [pc, #80]	@ (8000530 <HAL_MspInit+0x5c>)
 80004e0:	f043 0301 	orr.w	r3, r3, #1
 80004e4:	6193      	str	r3, [r2, #24]
 80004e6:	4b12      	ldr	r3, [pc, #72]	@ (8000530 <HAL_MspInit+0x5c>)
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000530 <HAL_MspInit+0x5c>)
 80004f4:	69db      	ldr	r3, [r3, #28]
 80004f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000530 <HAL_MspInit+0x5c>)
 80004f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004fc:	61d3      	str	r3, [r2, #28]
 80004fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000530 <HAL_MspInit+0x5c>)
 8000500:	69db      	ldr	r3, [r3, #28]
 8000502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800050a:	4b0a      	ldr	r3, [pc, #40]	@ (8000534 <HAL_MspInit+0x60>)
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	4a04      	ldr	r2, [pc, #16]	@ (8000534 <HAL_MspInit+0x60>)
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr
 8000530:	40021000 	.word	0x40021000
 8000534:	40010000 	.word	0x40010000

08000538 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b088      	sub	sp, #32
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000540:	f107 0310 	add.w	r3, r7, #16
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4a15      	ldr	r2, [pc, #84]	@ (80005a8 <HAL_UART_MspInit+0x70>)
 8000554:	4293      	cmp	r3, r2
 8000556:	d123      	bne.n	80005a0 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000558:	4b14      	ldr	r3, [pc, #80]	@ (80005ac <HAL_UART_MspInit+0x74>)
 800055a:	69db      	ldr	r3, [r3, #28]
 800055c:	4a13      	ldr	r2, [pc, #76]	@ (80005ac <HAL_UART_MspInit+0x74>)
 800055e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000562:	61d3      	str	r3, [r2, #28]
 8000564:	4b11      	ldr	r3, [pc, #68]	@ (80005ac <HAL_UART_MspInit+0x74>)
 8000566:	69db      	ldr	r3, [r3, #28]
 8000568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800056c:	60fb      	str	r3, [r7, #12]
 800056e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000570:	4b0e      	ldr	r3, [pc, #56]	@ (80005ac <HAL_UART_MspInit+0x74>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a0d      	ldr	r2, [pc, #52]	@ (80005ac <HAL_UART_MspInit+0x74>)
 8000576:	f043 0304 	orr.w	r3, r3, #4
 800057a:	6193      	str	r3, [r2, #24]
 800057c:	4b0b      	ldr	r3, [pc, #44]	@ (80005ac <HAL_UART_MspInit+0x74>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f003 0304 	and.w	r3, r3, #4
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000588:	230c      	movs	r3, #12
 800058a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800058c:	2302      	movs	r3, #2
 800058e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000590:	2302      	movs	r3, #2
 8000592:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000594:	f107 0310 	add.w	r3, r7, #16
 8000598:	4619      	mov	r1, r3
 800059a:	4805      	ldr	r0, [pc, #20]	@ (80005b0 <HAL_UART_MspInit+0x78>)
 800059c:	f000 fa7a 	bl	8000a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005a0:	bf00      	nop
 80005a2:	3720      	adds	r7, #32
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40004400 	.word	0x40004400
 80005ac:	40021000 	.word	0x40021000
 80005b0:	40010800 	.word	0x40010800

080005b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005b8:	bf00      	nop
 80005ba:	e7fd      	b.n	80005b8 <NMI_Handler+0x4>

080005bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <HardFault_Handler+0x4>

080005c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c8:	bf00      	nop
 80005ca:	e7fd      	b.n	80005c8 <MemManage_Handler+0x4>

080005cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <BusFault_Handler+0x4>

080005d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d8:	bf00      	nop
 80005da:	e7fd      	b.n	80005d8 <UsageFault_Handler+0x4>

080005dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr

080005e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr

080005f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr

08000600 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000604:	f000 f91c 	bl	8000840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}

0800060c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000610:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000614:	f000 fbda 	bl	8000dcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}

0800061c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]
 800062c:	e00a      	b.n	8000644 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800062e:	f7ff fe1d 	bl	800026c <__io_getchar>
 8000632:	4601      	mov	r1, r0
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	1c5a      	adds	r2, r3, #1
 8000638:	60ba      	str	r2, [r7, #8]
 800063a:	b2ca      	uxtb	r2, r1
 800063c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	3301      	adds	r3, #1
 8000642:	617b      	str	r3, [r7, #20]
 8000644:	697a      	ldr	r2, [r7, #20]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	429a      	cmp	r2, r3
 800064a:	dbf0      	blt.n	800062e <_read+0x12>
	}

return len;
 800064c:	687b      	ldr	r3, [r7, #4]
}
 800064e:	4618      	mov	r0, r3
 8000650:	3718      	adds	r7, #24
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	b086      	sub	sp, #24
 800065a:	af00      	add	r7, sp, #0
 800065c:	60f8      	str	r0, [r7, #12]
 800065e:	60b9      	str	r1, [r7, #8]
 8000660:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000662:	2300      	movs	r3, #0
 8000664:	617b      	str	r3, [r7, #20]
 8000666:	e009      	b.n	800067c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	1c5a      	adds	r2, r3, #1
 800066c:	60ba      	str	r2, [r7, #8]
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff fddd 	bl	8000230 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	3301      	adds	r3, #1
 800067a:	617b      	str	r3, [r7, #20]
 800067c:	697a      	ldr	r2, [r7, #20]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	429a      	cmp	r2, r3
 8000682:	dbf1      	blt.n	8000668 <_write+0x12>
	}
	return len;
 8000684:	687b      	ldr	r3, [r7, #4]
}
 8000686:	4618      	mov	r0, r3
 8000688:	3718      	adds	r7, #24
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <_close>:

int _close(int file)
{
 800068e:	b480      	push	{r7}
 8000690:	b083      	sub	sp, #12
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
	return -1;
 8000696:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800069a:	4618      	mov	r0, r3
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr

080006a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006b4:	605a      	str	r2, [r3, #4]
	return 0;
 80006b6:	2300      	movs	r3, #0
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr

080006c2 <_isatty>:

int _isatty(int file)
{
 80006c2:	b480      	push	{r7}
 80006c4:	b083      	sub	sp, #12
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]
	return 1;
 80006ca:	2301      	movs	r3, #1
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr

080006d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006d6:	b480      	push	{r7}
 80006d8:	b085      	sub	sp, #20
 80006da:	af00      	add	r7, sp, #0
 80006dc:	60f8      	str	r0, [r7, #12]
 80006de:	60b9      	str	r1, [r7, #8]
 80006e0:	607a      	str	r2, [r7, #4]
	return 0;
 80006e2:	2300      	movs	r3, #0
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3714      	adds	r7, #20
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
	...

080006f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006f8:	4a14      	ldr	r2, [pc, #80]	@ (800074c <_sbrk+0x5c>)
 80006fa:	4b15      	ldr	r3, [pc, #84]	@ (8000750 <_sbrk+0x60>)
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000704:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <_sbrk+0x64>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d102      	bne.n	8000712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800070c:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <_sbrk+0x64>)
 800070e:	4a12      	ldr	r2, [pc, #72]	@ (8000758 <_sbrk+0x68>)
 8000710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000712:	4b10      	ldr	r3, [pc, #64]	@ (8000754 <_sbrk+0x64>)
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4413      	add	r3, r2
 800071a:	693a      	ldr	r2, [r7, #16]
 800071c:	429a      	cmp	r2, r3
 800071e:	d207      	bcs.n	8000730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000720:	f001 fb24 	bl	8001d6c <__errno>
 8000724:	4603      	mov	r3, r0
 8000726:	220c      	movs	r2, #12
 8000728:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800072a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800072e:	e009      	b.n	8000744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000730:	4b08      	ldr	r3, [pc, #32]	@ (8000754 <_sbrk+0x64>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000736:	4b07      	ldr	r3, [pc, #28]	@ (8000754 <_sbrk+0x64>)
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4413      	add	r3, r2
 800073e:	4a05      	ldr	r2, [pc, #20]	@ (8000754 <_sbrk+0x64>)
 8000740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000742:	68fb      	ldr	r3, [r7, #12]
}
 8000744:	4618      	mov	r0, r3
 8000746:	3718      	adds	r7, #24
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20005000 	.word	0x20005000
 8000750:	00000400 	.word	0x00000400
 8000754:	200000c8 	.word	0x200000c8
 8000758:	20000220 	.word	0x20000220

0800075c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr

08000768 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000768:	480c      	ldr	r0, [pc, #48]	@ (800079c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800076a:	490d      	ldr	r1, [pc, #52]	@ (80007a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800076c:	4a0d      	ldr	r2, [pc, #52]	@ (80007a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800076e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000770:	e002      	b.n	8000778 <LoopCopyDataInit>

08000772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000776:	3304      	adds	r3, #4

08000778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800077a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800077c:	d3f9      	bcc.n	8000772 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800077e:	4a0a      	ldr	r2, [pc, #40]	@ (80007a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000780:	4c0a      	ldr	r4, [pc, #40]	@ (80007ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000784:	e001      	b.n	800078a <LoopFillZerobss>

08000786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000788:	3204      	adds	r2, #4

0800078a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800078a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800078c:	d3fb      	bcc.n	8000786 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800078e:	f7ff ffe5 	bl	800075c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000792:	f001 faf1 	bl	8001d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000796:	f7ff fd7f 	bl	8000298 <main>
	b . @endless loop
 800079a:	e7fe      	b.n	800079a <LoopFillZerobss+0x10>
  ldr r0, =_sdata
 800079c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80007a4:	08002b04 	.word	0x08002b04
  ldr r2, =_sbss
 80007a8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80007ac:	2000021c 	.word	0x2000021c

080007b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007b0:	e7fe      	b.n	80007b0 <ADC1_2_IRQHandler>
	...

080007b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b8:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <HAL_Init+0x28>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a07      	ldr	r2, [pc, #28]	@ (80007dc <HAL_Init+0x28>)
 80007be:	f043 0310 	orr.w	r3, r3, #16
 80007c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c4:	2003      	movs	r0, #3
 80007c6:	f000 f923 	bl	8000a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ca:	2000      	movs	r0, #0
 80007cc:	f000 f808 	bl	80007e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007d0:	f7ff fe80 	bl	80004d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40022000 	.word	0x40022000

080007e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007e8:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <HAL_InitTick+0x54>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b12      	ldr	r3, [pc, #72]	@ (8000838 <HAL_InitTick+0x58>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	4619      	mov	r1, r3
 80007f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 f93b 	bl	8000a7a <HAL_SYSTICK_Config>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800080a:	2301      	movs	r3, #1
 800080c:	e00e      	b.n	800082c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2b0f      	cmp	r3, #15
 8000812:	d80a      	bhi.n	800082a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000814:	2200      	movs	r2, #0
 8000816:	6879      	ldr	r1, [r7, #4]
 8000818:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800081c:	f000 f903 	bl	8000a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000820:	4a06      	ldr	r2, [pc, #24]	@ (800083c <HAL_InitTick+0x5c>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000826:	2300      	movs	r3, #0
 8000828:	e000      	b.n	800082c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800082a:	2301      	movs	r3, #1
}
 800082c:	4618      	mov	r0, r3
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000000 	.word	0x20000000
 8000838:	20000008 	.word	0x20000008
 800083c:	20000004 	.word	0x20000004

08000840 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000844:	4b05      	ldr	r3, [pc, #20]	@ (800085c <HAL_IncTick+0x1c>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	461a      	mov	r2, r3
 800084a:	4b05      	ldr	r3, [pc, #20]	@ (8000860 <HAL_IncTick+0x20>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4413      	add	r3, r2
 8000850:	4a03      	ldr	r2, [pc, #12]	@ (8000860 <HAL_IncTick+0x20>)
 8000852:	6013      	str	r3, [r2, #0]
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	20000008 	.word	0x20000008
 8000860:	200000cc 	.word	0x200000cc

08000864 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  return uwTick;
 8000868:	4b02      	ldr	r3, [pc, #8]	@ (8000874 <HAL_GetTick+0x10>)
 800086a:	681b      	ldr	r3, [r3, #0]
}
 800086c:	4618      	mov	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr
 8000874:	200000cc 	.word	0x200000cc

08000878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f003 0307 	and.w	r3, r3, #7
 8000886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000888:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <__NVIC_SetPriorityGrouping+0x44>)
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800088e:	68ba      	ldr	r2, [r7, #8]
 8000890:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000894:	4013      	ands	r3, r2
 8000896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008aa:	4a04      	ldr	r2, [pc, #16]	@ (80008bc <__NVIC_SetPriorityGrouping+0x44>)
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	60d3      	str	r3, [r2, #12]
}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c4:	4b04      	ldr	r3, [pc, #16]	@ (80008d8 <__NVIC_GetPriorityGrouping+0x18>)
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	0a1b      	lsrs	r3, r3, #8
 80008ca:	f003 0307 	and.w	r3, r3, #7
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	db0b      	blt.n	8000906 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	f003 021f 	and.w	r2, r3, #31
 80008f4:	4906      	ldr	r1, [pc, #24]	@ (8000910 <__NVIC_EnableIRQ+0x34>)
 80008f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fa:	095b      	lsrs	r3, r3, #5
 80008fc:	2001      	movs	r0, #1
 80008fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr
 8000910:	e000e100 	.word	0xe000e100

08000914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	6039      	str	r1, [r7, #0]
 800091e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000924:	2b00      	cmp	r3, #0
 8000926:	db0a      	blt.n	800093e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	b2da      	uxtb	r2, r3
 800092c:	490c      	ldr	r1, [pc, #48]	@ (8000960 <__NVIC_SetPriority+0x4c>)
 800092e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000932:	0112      	lsls	r2, r2, #4
 8000934:	b2d2      	uxtb	r2, r2
 8000936:	440b      	add	r3, r1
 8000938:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800093c:	e00a      	b.n	8000954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	b2da      	uxtb	r2, r3
 8000942:	4908      	ldr	r1, [pc, #32]	@ (8000964 <__NVIC_SetPriority+0x50>)
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	f003 030f 	and.w	r3, r3, #15
 800094a:	3b04      	subs	r3, #4
 800094c:	0112      	lsls	r2, r2, #4
 800094e:	b2d2      	uxtb	r2, r2
 8000950:	440b      	add	r3, r1
 8000952:	761a      	strb	r2, [r3, #24]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	e000e100 	.word	0xe000e100
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000968:	b480      	push	{r7}
 800096a:	b089      	sub	sp, #36	@ 0x24
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	f1c3 0307 	rsb	r3, r3, #7
 8000982:	2b04      	cmp	r3, #4
 8000984:	bf28      	it	cs
 8000986:	2304      	movcs	r3, #4
 8000988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	3304      	adds	r3, #4
 800098e:	2b06      	cmp	r3, #6
 8000990:	d902      	bls.n	8000998 <NVIC_EncodePriority+0x30>
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	3b03      	subs	r3, #3
 8000996:	e000      	b.n	800099a <NVIC_EncodePriority+0x32>
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800099c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	43da      	mvns	r2, r3
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	401a      	ands	r2, r3
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ba:	43d9      	mvns	r1, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c0:	4313      	orrs	r3, r2
         );
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3724      	adds	r7, #36	@ 0x24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr

080009cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009dc:	d301      	bcc.n	80009e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009de:	2301      	movs	r3, #1
 80009e0:	e00f      	b.n	8000a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009e2:	4a0a      	ldr	r2, [pc, #40]	@ (8000a0c <SysTick_Config+0x40>)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ea:	210f      	movs	r1, #15
 80009ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009f0:	f7ff ff90 	bl	8000914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009f4:	4b05      	ldr	r3, [pc, #20]	@ (8000a0c <SysTick_Config+0x40>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009fa:	4b04      	ldr	r3, [pc, #16]	@ (8000a0c <SysTick_Config+0x40>)
 80009fc:	2207      	movs	r2, #7
 80009fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	e000e010 	.word	0xe000e010

08000a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff ff2d 	bl	8000878 <__NVIC_SetPriorityGrouping>
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b086      	sub	sp, #24
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	607a      	str	r2, [r7, #4]
 8000a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a38:	f7ff ff42 	bl	80008c0 <__NVIC_GetPriorityGrouping>
 8000a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	68b9      	ldr	r1, [r7, #8]
 8000a42:	6978      	ldr	r0, [r7, #20]
 8000a44:	f7ff ff90 	bl	8000968 <NVIC_EncodePriority>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a4e:	4611      	mov	r1, r2
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ff5f 	bl	8000914 <__NVIC_SetPriority>
}
 8000a56:	bf00      	nop
 8000a58:	3718      	adds	r7, #24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	4603      	mov	r3, r0
 8000a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff35 	bl	80008dc <__NVIC_EnableIRQ>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff ffa2 	bl	80009cc <SysTick_Config>
 8000a88:	4603      	mov	r3, r0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b08b      	sub	sp, #44	@ 0x2c
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aa6:	e169      	b.n	8000d7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aac:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	69fa      	ldr	r2, [r7, #28]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000abc:	69ba      	ldr	r2, [r7, #24]
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	f040 8158 	bne.w	8000d76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	4a9a      	ldr	r2, [pc, #616]	@ (8000d34 <HAL_GPIO_Init+0x2a0>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d05e      	beq.n	8000b8e <HAL_GPIO_Init+0xfa>
 8000ad0:	4a98      	ldr	r2, [pc, #608]	@ (8000d34 <HAL_GPIO_Init+0x2a0>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d875      	bhi.n	8000bc2 <HAL_GPIO_Init+0x12e>
 8000ad6:	4a98      	ldr	r2, [pc, #608]	@ (8000d38 <HAL_GPIO_Init+0x2a4>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d058      	beq.n	8000b8e <HAL_GPIO_Init+0xfa>
 8000adc:	4a96      	ldr	r2, [pc, #600]	@ (8000d38 <HAL_GPIO_Init+0x2a4>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d86f      	bhi.n	8000bc2 <HAL_GPIO_Init+0x12e>
 8000ae2:	4a96      	ldr	r2, [pc, #600]	@ (8000d3c <HAL_GPIO_Init+0x2a8>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d052      	beq.n	8000b8e <HAL_GPIO_Init+0xfa>
 8000ae8:	4a94      	ldr	r2, [pc, #592]	@ (8000d3c <HAL_GPIO_Init+0x2a8>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d869      	bhi.n	8000bc2 <HAL_GPIO_Init+0x12e>
 8000aee:	4a94      	ldr	r2, [pc, #592]	@ (8000d40 <HAL_GPIO_Init+0x2ac>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d04c      	beq.n	8000b8e <HAL_GPIO_Init+0xfa>
 8000af4:	4a92      	ldr	r2, [pc, #584]	@ (8000d40 <HAL_GPIO_Init+0x2ac>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d863      	bhi.n	8000bc2 <HAL_GPIO_Init+0x12e>
 8000afa:	4a92      	ldr	r2, [pc, #584]	@ (8000d44 <HAL_GPIO_Init+0x2b0>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d046      	beq.n	8000b8e <HAL_GPIO_Init+0xfa>
 8000b00:	4a90      	ldr	r2, [pc, #576]	@ (8000d44 <HAL_GPIO_Init+0x2b0>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d85d      	bhi.n	8000bc2 <HAL_GPIO_Init+0x12e>
 8000b06:	2b12      	cmp	r3, #18
 8000b08:	d82a      	bhi.n	8000b60 <HAL_GPIO_Init+0xcc>
 8000b0a:	2b12      	cmp	r3, #18
 8000b0c:	d859      	bhi.n	8000bc2 <HAL_GPIO_Init+0x12e>
 8000b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8000b14 <HAL_GPIO_Init+0x80>)
 8000b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b14:	08000b8f 	.word	0x08000b8f
 8000b18:	08000b69 	.word	0x08000b69
 8000b1c:	08000b7b 	.word	0x08000b7b
 8000b20:	08000bbd 	.word	0x08000bbd
 8000b24:	08000bc3 	.word	0x08000bc3
 8000b28:	08000bc3 	.word	0x08000bc3
 8000b2c:	08000bc3 	.word	0x08000bc3
 8000b30:	08000bc3 	.word	0x08000bc3
 8000b34:	08000bc3 	.word	0x08000bc3
 8000b38:	08000bc3 	.word	0x08000bc3
 8000b3c:	08000bc3 	.word	0x08000bc3
 8000b40:	08000bc3 	.word	0x08000bc3
 8000b44:	08000bc3 	.word	0x08000bc3
 8000b48:	08000bc3 	.word	0x08000bc3
 8000b4c:	08000bc3 	.word	0x08000bc3
 8000b50:	08000bc3 	.word	0x08000bc3
 8000b54:	08000bc3 	.word	0x08000bc3
 8000b58:	08000b71 	.word	0x08000b71
 8000b5c:	08000b85 	.word	0x08000b85
 8000b60:	4a79      	ldr	r2, [pc, #484]	@ (8000d48 <HAL_GPIO_Init+0x2b4>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d013      	beq.n	8000b8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b66:	e02c      	b.n	8000bc2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	623b      	str	r3, [r7, #32]
          break;
 8000b6e:	e029      	b.n	8000bc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	3304      	adds	r3, #4
 8000b76:	623b      	str	r3, [r7, #32]
          break;
 8000b78:	e024      	b.n	8000bc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	68db      	ldr	r3, [r3, #12]
 8000b7e:	3308      	adds	r3, #8
 8000b80:	623b      	str	r3, [r7, #32]
          break;
 8000b82:	e01f      	b.n	8000bc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	330c      	adds	r3, #12
 8000b8a:	623b      	str	r3, [r7, #32]
          break;
 8000b8c:	e01a      	b.n	8000bc4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d102      	bne.n	8000b9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b96:	2304      	movs	r3, #4
 8000b98:	623b      	str	r3, [r7, #32]
          break;
 8000b9a:	e013      	b.n	8000bc4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d105      	bne.n	8000bb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ba4:	2308      	movs	r3, #8
 8000ba6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	69fa      	ldr	r2, [r7, #28]
 8000bac:	611a      	str	r2, [r3, #16]
          break;
 8000bae:	e009      	b.n	8000bc4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bb0:	2308      	movs	r3, #8
 8000bb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	69fa      	ldr	r2, [r7, #28]
 8000bb8:	615a      	str	r2, [r3, #20]
          break;
 8000bba:	e003      	b.n	8000bc4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	623b      	str	r3, [r7, #32]
          break;
 8000bc0:	e000      	b.n	8000bc4 <HAL_GPIO_Init+0x130>
          break;
 8000bc2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	2bff      	cmp	r3, #255	@ 0xff
 8000bc8:	d801      	bhi.n	8000bce <HAL_GPIO_Init+0x13a>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	e001      	b.n	8000bd2 <HAL_GPIO_Init+0x13e>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	2bff      	cmp	r3, #255	@ 0xff
 8000bd8:	d802      	bhi.n	8000be0 <HAL_GPIO_Init+0x14c>
 8000bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	e002      	b.n	8000be6 <HAL_GPIO_Init+0x152>
 8000be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be2:	3b08      	subs	r3, #8
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	210f      	movs	r1, #15
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	6a39      	ldr	r1, [r7, #32]
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000c00:	431a      	orrs	r2, r3
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	f000 80b1 	beq.w	8000d76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c14:	4b4d      	ldr	r3, [pc, #308]	@ (8000d4c <HAL_GPIO_Init+0x2b8>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	4a4c      	ldr	r2, [pc, #304]	@ (8000d4c <HAL_GPIO_Init+0x2b8>)
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	6193      	str	r3, [r2, #24]
 8000c20:	4b4a      	ldr	r3, [pc, #296]	@ (8000d4c <HAL_GPIO_Init+0x2b8>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c2c:	4a48      	ldr	r2, [pc, #288]	@ (8000d50 <HAL_GPIO_Init+0x2bc>)
 8000c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c30:	089b      	lsrs	r3, r3, #2
 8000c32:	3302      	adds	r3, #2
 8000c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c3c:	f003 0303 	and.w	r3, r3, #3
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	220f      	movs	r2, #15
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a40      	ldr	r2, [pc, #256]	@ (8000d54 <HAL_GPIO_Init+0x2c0>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d013      	beq.n	8000c80 <HAL_GPIO_Init+0x1ec>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a3f      	ldr	r2, [pc, #252]	@ (8000d58 <HAL_GPIO_Init+0x2c4>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d00d      	beq.n	8000c7c <HAL_GPIO_Init+0x1e8>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a3e      	ldr	r2, [pc, #248]	@ (8000d5c <HAL_GPIO_Init+0x2c8>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d007      	beq.n	8000c78 <HAL_GPIO_Init+0x1e4>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a3d      	ldr	r2, [pc, #244]	@ (8000d60 <HAL_GPIO_Init+0x2cc>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d101      	bne.n	8000c74 <HAL_GPIO_Init+0x1e0>
 8000c70:	2303      	movs	r3, #3
 8000c72:	e006      	b.n	8000c82 <HAL_GPIO_Init+0x1ee>
 8000c74:	2304      	movs	r3, #4
 8000c76:	e004      	b.n	8000c82 <HAL_GPIO_Init+0x1ee>
 8000c78:	2302      	movs	r3, #2
 8000c7a:	e002      	b.n	8000c82 <HAL_GPIO_Init+0x1ee>
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e000      	b.n	8000c82 <HAL_GPIO_Init+0x1ee>
 8000c80:	2300      	movs	r3, #0
 8000c82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c84:	f002 0203 	and.w	r2, r2, #3
 8000c88:	0092      	lsls	r2, r2, #2
 8000c8a:	4093      	lsls	r3, r2
 8000c8c:	68fa      	ldr	r2, [r7, #12]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c92:	492f      	ldr	r1, [pc, #188]	@ (8000d50 <HAL_GPIO_Init+0x2bc>)
 8000c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c96:	089b      	lsrs	r3, r3, #2
 8000c98:	3302      	adds	r3, #2
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d006      	beq.n	8000cba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cac:	4b2d      	ldr	r3, [pc, #180]	@ (8000d64 <HAL_GPIO_Init+0x2d0>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	492c      	ldr	r1, [pc, #176]	@ (8000d64 <HAL_GPIO_Init+0x2d0>)
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	600b      	str	r3, [r1, #0]
 8000cb8:	e006      	b.n	8000cc8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cba:	4b2a      	ldr	r3, [pc, #168]	@ (8000d64 <HAL_GPIO_Init+0x2d0>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	4928      	ldr	r1, [pc, #160]	@ (8000d64 <HAL_GPIO_Init+0x2d0>)
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d006      	beq.n	8000ce2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cd4:	4b23      	ldr	r3, [pc, #140]	@ (8000d64 <HAL_GPIO_Init+0x2d0>)
 8000cd6:	685a      	ldr	r2, [r3, #4]
 8000cd8:	4922      	ldr	r1, [pc, #136]	@ (8000d64 <HAL_GPIO_Init+0x2d0>)
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	604b      	str	r3, [r1, #4]
 8000ce0:	e006      	b.n	8000cf0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ce2:	4b20      	ldr	r3, [pc, #128]	@ (8000d64 <HAL_GPIO_Init+0x2d0>)
 8000ce4:	685a      	ldr	r2, [r3, #4]
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	491e      	ldr	r1, [pc, #120]	@ (8000d64 <HAL_GPIO_Init+0x2d0>)
 8000cec:	4013      	ands	r3, r2
 8000cee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d006      	beq.n	8000d0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cfc:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <HAL_GPIO_Init+0x2d0>)
 8000cfe:	689a      	ldr	r2, [r3, #8]
 8000d00:	4918      	ldr	r1, [pc, #96]	@ (8000d64 <HAL_GPIO_Init+0x2d0>)
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	608b      	str	r3, [r1, #8]
 8000d08:	e006      	b.n	8000d18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d0a:	4b16      	ldr	r3, [pc, #88]	@ (8000d64 <HAL_GPIO_Init+0x2d0>)
 8000d0c:	689a      	ldr	r2, [r3, #8]
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	43db      	mvns	r3, r3
 8000d12:	4914      	ldr	r1, [pc, #80]	@ (8000d64 <HAL_GPIO_Init+0x2d0>)
 8000d14:	4013      	ands	r3, r2
 8000d16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d021      	beq.n	8000d68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d24:	4b0f      	ldr	r3, [pc, #60]	@ (8000d64 <HAL_GPIO_Init+0x2d0>)
 8000d26:	68da      	ldr	r2, [r3, #12]
 8000d28:	490e      	ldr	r1, [pc, #56]	@ (8000d64 <HAL_GPIO_Init+0x2d0>)
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	60cb      	str	r3, [r1, #12]
 8000d30:	e021      	b.n	8000d76 <HAL_GPIO_Init+0x2e2>
 8000d32:	bf00      	nop
 8000d34:	10320000 	.word	0x10320000
 8000d38:	10310000 	.word	0x10310000
 8000d3c:	10220000 	.word	0x10220000
 8000d40:	10210000 	.word	0x10210000
 8000d44:	10120000 	.word	0x10120000
 8000d48:	10110000 	.word	0x10110000
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	40010000 	.word	0x40010000
 8000d54:	40010800 	.word	0x40010800
 8000d58:	40010c00 	.word	0x40010c00
 8000d5c:	40011000 	.word	0x40011000
 8000d60:	40011400 	.word	0x40011400
 8000d64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d68:	4b0b      	ldr	r3, [pc, #44]	@ (8000d98 <HAL_GPIO_Init+0x304>)
 8000d6a:	68da      	ldr	r2, [r3, #12]
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	4909      	ldr	r1, [pc, #36]	@ (8000d98 <HAL_GPIO_Init+0x304>)
 8000d72:	4013      	ands	r3, r2
 8000d74:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d78:	3301      	adds	r3, #1
 8000d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d82:	fa22 f303 	lsr.w	r3, r2, r3
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f47f ae8e 	bne.w	8000aa8 <HAL_GPIO_Init+0x14>
  }
}
 8000d8c:	bf00      	nop
 8000d8e:	bf00      	nop
 8000d90:	372c      	adds	r7, #44	@ 0x2c
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr
 8000d98:	40010400 	.word	0x40010400

08000d9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	460b      	mov	r3, r1
 8000da6:	807b      	strh	r3, [r7, #2]
 8000da8:	4613      	mov	r3, r2
 8000daa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dac:	787b      	ldrb	r3, [r7, #1]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d003      	beq.n	8000dba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000db2:	887a      	ldrh	r2, [r7, #2]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000db8:	e003      	b.n	8000dc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dba:	887b      	ldrh	r3, [r7, #2]
 8000dbc:	041a      	lsls	r2, r3, #16
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	611a      	str	r2, [r3, #16]
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr

08000dcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000dd6:	4b08      	ldr	r3, [pc, #32]	@ (8000df8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000dd8:	695a      	ldr	r2, [r3, #20]
 8000dda:	88fb      	ldrh	r3, [r7, #6]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d006      	beq.n	8000df0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000de2:	4a05      	ldr	r2, [pc, #20]	@ (8000df8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000de4:	88fb      	ldrh	r3, [r7, #6]
 8000de6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000de8:	88fb      	ldrh	r3, [r7, #6]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 f806 	bl	8000dfc <HAL_GPIO_EXTI_Callback>
  }
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40010400 	.word	0x40010400

08000dfc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr

08000e10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d101      	bne.n	8000e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e272      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f000 8087 	beq.w	8000f3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e30:	4b92      	ldr	r3, [pc, #584]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 030c 	and.w	r3, r3, #12
 8000e38:	2b04      	cmp	r3, #4
 8000e3a:	d00c      	beq.n	8000e56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e3c:	4b8f      	ldr	r3, [pc, #572]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 030c 	and.w	r3, r3, #12
 8000e44:	2b08      	cmp	r3, #8
 8000e46:	d112      	bne.n	8000e6e <HAL_RCC_OscConfig+0x5e>
 8000e48:	4b8c      	ldr	r3, [pc, #560]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e54:	d10b      	bne.n	8000e6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e56:	4b89      	ldr	r3, [pc, #548]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d06c      	beq.n	8000f3c <HAL_RCC_OscConfig+0x12c>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d168      	bne.n	8000f3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e24c      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e76:	d106      	bne.n	8000e86 <HAL_RCC_OscConfig+0x76>
 8000e78:	4b80      	ldr	r3, [pc, #512]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a7f      	ldr	r2, [pc, #508]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000e7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e82:	6013      	str	r3, [r2, #0]
 8000e84:	e02e      	b.n	8000ee4 <HAL_RCC_OscConfig+0xd4>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d10c      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x98>
 8000e8e:	4b7b      	ldr	r3, [pc, #492]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a7a      	ldr	r2, [pc, #488]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000e94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e98:	6013      	str	r3, [r2, #0]
 8000e9a:	4b78      	ldr	r3, [pc, #480]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a77      	ldr	r2, [pc, #476]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000ea0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	e01d      	b.n	8000ee4 <HAL_RCC_OscConfig+0xd4>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000eb0:	d10c      	bne.n	8000ecc <HAL_RCC_OscConfig+0xbc>
 8000eb2:	4b72      	ldr	r3, [pc, #456]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a71      	ldr	r2, [pc, #452]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ebc:	6013      	str	r3, [r2, #0]
 8000ebe:	4b6f      	ldr	r3, [pc, #444]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a6e      	ldr	r2, [pc, #440]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	e00b      	b.n	8000ee4 <HAL_RCC_OscConfig+0xd4>
 8000ecc:	4b6b      	ldr	r3, [pc, #428]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a6a      	ldr	r2, [pc, #424]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000ed2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	4b68      	ldr	r3, [pc, #416]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a67      	ldr	r2, [pc, #412]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000ede:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ee2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d013      	beq.n	8000f14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eec:	f7ff fcba 	bl	8000864 <HAL_GetTick>
 8000ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ef2:	e008      	b.n	8000f06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ef4:	f7ff fcb6 	bl	8000864 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	2b64      	cmp	r3, #100	@ 0x64
 8000f00:	d901      	bls.n	8000f06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f02:	2303      	movs	r3, #3
 8000f04:	e200      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f06:	4b5d      	ldr	r3, [pc, #372]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d0f0      	beq.n	8000ef4 <HAL_RCC_OscConfig+0xe4>
 8000f12:	e014      	b.n	8000f3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f14:	f7ff fca6 	bl	8000864 <HAL_GetTick>
 8000f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f1a:	e008      	b.n	8000f2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f1c:	f7ff fca2 	bl	8000864 <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b64      	cmp	r3, #100	@ 0x64
 8000f28:	d901      	bls.n	8000f2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e1ec      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f2e:	4b53      	ldr	r3, [pc, #332]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d1f0      	bne.n	8000f1c <HAL_RCC_OscConfig+0x10c>
 8000f3a:	e000      	b.n	8000f3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d063      	beq.n	8001012 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f4a:	4b4c      	ldr	r3, [pc, #304]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 030c 	and.w	r3, r3, #12
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d00b      	beq.n	8000f6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f56:	4b49      	ldr	r3, [pc, #292]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 030c 	and.w	r3, r3, #12
 8000f5e:	2b08      	cmp	r3, #8
 8000f60:	d11c      	bne.n	8000f9c <HAL_RCC_OscConfig+0x18c>
 8000f62:	4b46      	ldr	r3, [pc, #280]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d116      	bne.n	8000f9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f6e:	4b43      	ldr	r3, [pc, #268]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d005      	beq.n	8000f86 <HAL_RCC_OscConfig+0x176>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	691b      	ldr	r3, [r3, #16]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d001      	beq.n	8000f86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e1c0      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f86:	4b3d      	ldr	r3, [pc, #244]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	4939      	ldr	r1, [pc, #228]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000f96:	4313      	orrs	r3, r2
 8000f98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f9a:	e03a      	b.n	8001012 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	691b      	ldr	r3, [r3, #16]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d020      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fa4:	4b36      	ldr	r3, [pc, #216]	@ (8001080 <HAL_RCC_OscConfig+0x270>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000faa:	f7ff fc5b 	bl	8000864 <HAL_GetTick>
 8000fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fb0:	e008      	b.n	8000fc4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fb2:	f7ff fc57 	bl	8000864 <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d901      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e1a1      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fc4:	4b2d      	ldr	r3, [pc, #180]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d0f0      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fd0:	4b2a      	ldr	r3, [pc, #168]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	4927      	ldr	r1, [pc, #156]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	600b      	str	r3, [r1, #0]
 8000fe4:	e015      	b.n	8001012 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fe6:	4b26      	ldr	r3, [pc, #152]	@ (8001080 <HAL_RCC_OscConfig+0x270>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fec:	f7ff fc3a 	bl	8000864 <HAL_GetTick>
 8000ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ff2:	e008      	b.n	8001006 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ff4:	f7ff fc36 	bl	8000864 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d901      	bls.n	8001006 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e180      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001006:	4b1d      	ldr	r3, [pc, #116]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1f0      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0308 	and.w	r3, r3, #8
 800101a:	2b00      	cmp	r3, #0
 800101c:	d03a      	beq.n	8001094 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d019      	beq.n	800105a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001026:	4b17      	ldr	r3, [pc, #92]	@ (8001084 <HAL_RCC_OscConfig+0x274>)
 8001028:	2201      	movs	r2, #1
 800102a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800102c:	f7ff fc1a 	bl	8000864 <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001034:	f7ff fc16 	bl	8000864 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b02      	cmp	r3, #2
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e160      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001046:	4b0d      	ldr	r3, [pc, #52]	@ (800107c <HAL_RCC_OscConfig+0x26c>)
 8001048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d0f0      	beq.n	8001034 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001052:	2001      	movs	r0, #1
 8001054:	f000 fad8 	bl	8001608 <RCC_Delay>
 8001058:	e01c      	b.n	8001094 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800105a:	4b0a      	ldr	r3, [pc, #40]	@ (8001084 <HAL_RCC_OscConfig+0x274>)
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001060:	f7ff fc00 	bl	8000864 <HAL_GetTick>
 8001064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001066:	e00f      	b.n	8001088 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001068:	f7ff fbfc 	bl	8000864 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b02      	cmp	r3, #2
 8001074:	d908      	bls.n	8001088 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e146      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
 800107a:	bf00      	nop
 800107c:	40021000 	.word	0x40021000
 8001080:	42420000 	.word	0x42420000
 8001084:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001088:	4b92      	ldr	r3, [pc, #584]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 800108a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1e9      	bne.n	8001068 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 80a6 	beq.w	80011ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010a2:	2300      	movs	r3, #0
 80010a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010a6:	4b8b      	ldr	r3, [pc, #556]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d10d      	bne.n	80010ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010b2:	4b88      	ldr	r3, [pc, #544]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	4a87      	ldr	r2, [pc, #540]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 80010b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010bc:	61d3      	str	r3, [r2, #28]
 80010be:	4b85      	ldr	r3, [pc, #532]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010ca:	2301      	movs	r3, #1
 80010cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ce:	4b82      	ldr	r3, [pc, #520]	@ (80012d8 <HAL_RCC_OscConfig+0x4c8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d118      	bne.n	800110c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010da:	4b7f      	ldr	r3, [pc, #508]	@ (80012d8 <HAL_RCC_OscConfig+0x4c8>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a7e      	ldr	r2, [pc, #504]	@ (80012d8 <HAL_RCC_OscConfig+0x4c8>)
 80010e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010e6:	f7ff fbbd 	bl	8000864 <HAL_GetTick>
 80010ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ec:	e008      	b.n	8001100 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010ee:	f7ff fbb9 	bl	8000864 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b64      	cmp	r3, #100	@ 0x64
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e103      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001100:	4b75      	ldr	r3, [pc, #468]	@ (80012d8 <HAL_RCC_OscConfig+0x4c8>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001108:	2b00      	cmp	r3, #0
 800110a:	d0f0      	beq.n	80010ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d106      	bne.n	8001122 <HAL_RCC_OscConfig+0x312>
 8001114:	4b6f      	ldr	r3, [pc, #444]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 8001116:	6a1b      	ldr	r3, [r3, #32]
 8001118:	4a6e      	ldr	r2, [pc, #440]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	6213      	str	r3, [r2, #32]
 8001120:	e02d      	b.n	800117e <HAL_RCC_OscConfig+0x36e>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10c      	bne.n	8001144 <HAL_RCC_OscConfig+0x334>
 800112a:	4b6a      	ldr	r3, [pc, #424]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 800112c:	6a1b      	ldr	r3, [r3, #32]
 800112e:	4a69      	ldr	r2, [pc, #420]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 8001130:	f023 0301 	bic.w	r3, r3, #1
 8001134:	6213      	str	r3, [r2, #32]
 8001136:	4b67      	ldr	r3, [pc, #412]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 8001138:	6a1b      	ldr	r3, [r3, #32]
 800113a:	4a66      	ldr	r2, [pc, #408]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 800113c:	f023 0304 	bic.w	r3, r3, #4
 8001140:	6213      	str	r3, [r2, #32]
 8001142:	e01c      	b.n	800117e <HAL_RCC_OscConfig+0x36e>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	2b05      	cmp	r3, #5
 800114a:	d10c      	bne.n	8001166 <HAL_RCC_OscConfig+0x356>
 800114c:	4b61      	ldr	r3, [pc, #388]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	4a60      	ldr	r2, [pc, #384]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 8001152:	f043 0304 	orr.w	r3, r3, #4
 8001156:	6213      	str	r3, [r2, #32]
 8001158:	4b5e      	ldr	r3, [pc, #376]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 800115a:	6a1b      	ldr	r3, [r3, #32]
 800115c:	4a5d      	ldr	r2, [pc, #372]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	6213      	str	r3, [r2, #32]
 8001164:	e00b      	b.n	800117e <HAL_RCC_OscConfig+0x36e>
 8001166:	4b5b      	ldr	r3, [pc, #364]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 8001168:	6a1b      	ldr	r3, [r3, #32]
 800116a:	4a5a      	ldr	r2, [pc, #360]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 800116c:	f023 0301 	bic.w	r3, r3, #1
 8001170:	6213      	str	r3, [r2, #32]
 8001172:	4b58      	ldr	r3, [pc, #352]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 8001174:	6a1b      	ldr	r3, [r3, #32]
 8001176:	4a57      	ldr	r2, [pc, #348]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 8001178:	f023 0304 	bic.w	r3, r3, #4
 800117c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d015      	beq.n	80011b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001186:	f7ff fb6d 	bl	8000864 <HAL_GetTick>
 800118a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800118c:	e00a      	b.n	80011a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800118e:	f7ff fb69 	bl	8000864 <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	f241 3288 	movw	r2, #5000	@ 0x1388
 800119c:	4293      	cmp	r3, r2
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e0b1      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011a4:	4b4b      	ldr	r3, [pc, #300]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 80011a6:	6a1b      	ldr	r3, [r3, #32]
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d0ee      	beq.n	800118e <HAL_RCC_OscConfig+0x37e>
 80011b0:	e014      	b.n	80011dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b2:	f7ff fb57 	bl	8000864 <HAL_GetTick>
 80011b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011b8:	e00a      	b.n	80011d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ba:	f7ff fb53 	bl	8000864 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d901      	bls.n	80011d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e09b      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011d0:	4b40      	ldr	r3, [pc, #256]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 80011d2:	6a1b      	ldr	r3, [r3, #32]
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1ee      	bne.n	80011ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011dc:	7dfb      	ldrb	r3, [r7, #23]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d105      	bne.n	80011ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011e2:	4b3c      	ldr	r3, [pc, #240]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	4a3b      	ldr	r2, [pc, #236]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 80011e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 8087 	beq.w	8001306 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011f8:	4b36      	ldr	r3, [pc, #216]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 030c 	and.w	r3, r3, #12
 8001200:	2b08      	cmp	r3, #8
 8001202:	d061      	beq.n	80012c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69db      	ldr	r3, [r3, #28]
 8001208:	2b02      	cmp	r3, #2
 800120a:	d146      	bne.n	800129a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800120c:	4b33      	ldr	r3, [pc, #204]	@ (80012dc <HAL_RCC_OscConfig+0x4cc>)
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001212:	f7ff fb27 	bl	8000864 <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800121a:	f7ff fb23 	bl	8000864 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e06d      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800122c:	4b29      	ldr	r3, [pc, #164]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1f0      	bne.n	800121a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a1b      	ldr	r3, [r3, #32]
 800123c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001240:	d108      	bne.n	8001254 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001242:	4b24      	ldr	r3, [pc, #144]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	4921      	ldr	r1, [pc, #132]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 8001250:	4313      	orrs	r3, r2
 8001252:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001254:	4b1f      	ldr	r3, [pc, #124]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a19      	ldr	r1, [r3, #32]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001264:	430b      	orrs	r3, r1
 8001266:	491b      	ldr	r1, [pc, #108]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 8001268:	4313      	orrs	r3, r2
 800126a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800126c:	4b1b      	ldr	r3, [pc, #108]	@ (80012dc <HAL_RCC_OscConfig+0x4cc>)
 800126e:	2201      	movs	r2, #1
 8001270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001272:	f7ff faf7 	bl	8000864 <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800127a:	f7ff faf3 	bl	8000864 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e03d      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800128c:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f0      	beq.n	800127a <HAL_RCC_OscConfig+0x46a>
 8001298:	e035      	b.n	8001306 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800129a:	4b10      	ldr	r3, [pc, #64]	@ (80012dc <HAL_RCC_OscConfig+0x4cc>)
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a0:	f7ff fae0 	bl	8000864 <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012a8:	f7ff fadc 	bl	8000864 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e026      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ba:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <HAL_RCC_OscConfig+0x4c4>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f0      	bne.n	80012a8 <HAL_RCC_OscConfig+0x498>
 80012c6:	e01e      	b.n	8001306 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69db      	ldr	r3, [r3, #28]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d107      	bne.n	80012e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e019      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40007000 	.word	0x40007000
 80012dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001310 <HAL_RCC_OscConfig+0x500>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a1b      	ldr	r3, [r3, #32]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d106      	bne.n	8001302 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012fe:	429a      	cmp	r2, r3
 8001300:	d001      	beq.n	8001306 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40021000 	.word	0x40021000

08001314 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e0d0      	b.n	80014ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001328:	4b6a      	ldr	r3, [pc, #424]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0307 	and.w	r3, r3, #7
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	429a      	cmp	r2, r3
 8001334:	d910      	bls.n	8001358 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001336:	4b67      	ldr	r3, [pc, #412]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f023 0207 	bic.w	r2, r3, #7
 800133e:	4965      	ldr	r1, [pc, #404]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	4313      	orrs	r3, r2
 8001344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001346:	4b63      	ldr	r3, [pc, #396]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	429a      	cmp	r2, r3
 8001352:	d001      	beq.n	8001358 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e0b8      	b.n	80014ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d020      	beq.n	80013a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	2b00      	cmp	r3, #0
 800136e:	d005      	beq.n	800137c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001370:	4b59      	ldr	r3, [pc, #356]	@ (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	4a58      	ldr	r2, [pc, #352]	@ (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001376:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800137a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0308 	and.w	r3, r3, #8
 8001384:	2b00      	cmp	r3, #0
 8001386:	d005      	beq.n	8001394 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001388:	4b53      	ldr	r3, [pc, #332]	@ (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	4a52      	ldr	r2, [pc, #328]	@ (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 800138e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001392:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001394:	4b50      	ldr	r3, [pc, #320]	@ (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	494d      	ldr	r1, [pc, #308]	@ (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d040      	beq.n	8001434 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d107      	bne.n	80013ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ba:	4b47      	ldr	r3, [pc, #284]	@ (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d115      	bne.n	80013f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e07f      	b.n	80014ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d107      	bne.n	80013e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013d2:	4b41      	ldr	r3, [pc, #260]	@ (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d109      	bne.n	80013f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e073      	b.n	80014ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e2:	4b3d      	ldr	r3, [pc, #244]	@ (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e06b      	b.n	80014ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013f2:	4b39      	ldr	r3, [pc, #228]	@ (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f023 0203 	bic.w	r2, r3, #3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	4936      	ldr	r1, [pc, #216]	@ (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001400:	4313      	orrs	r3, r2
 8001402:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001404:	f7ff fa2e 	bl	8000864 <HAL_GetTick>
 8001408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800140a:	e00a      	b.n	8001422 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800140c:	f7ff fa2a 	bl	8000864 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800141a:	4293      	cmp	r3, r2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e053      	b.n	80014ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001422:	4b2d      	ldr	r3, [pc, #180]	@ (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 020c 	and.w	r2, r3, #12
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	429a      	cmp	r2, r3
 8001432:	d1eb      	bne.n	800140c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001434:	4b27      	ldr	r3, [pc, #156]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0307 	and.w	r3, r3, #7
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	429a      	cmp	r2, r3
 8001440:	d210      	bcs.n	8001464 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001442:	4b24      	ldr	r3, [pc, #144]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f023 0207 	bic.w	r2, r3, #7
 800144a:	4922      	ldr	r1, [pc, #136]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	4313      	orrs	r3, r2
 8001450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001452:	4b20      	ldr	r3, [pc, #128]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	429a      	cmp	r2, r3
 800145e:	d001      	beq.n	8001464 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e032      	b.n	80014ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	d008      	beq.n	8001482 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001470:	4b19      	ldr	r3, [pc, #100]	@ (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	4916      	ldr	r1, [pc, #88]	@ (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 800147e:	4313      	orrs	r3, r2
 8001480:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	2b00      	cmp	r3, #0
 800148c:	d009      	beq.n	80014a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800148e:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	490e      	ldr	r1, [pc, #56]	@ (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014a2:	f000 f821 	bl	80014e8 <HAL_RCC_GetSysClockFreq>
 80014a6:	4602      	mov	r2, r0
 80014a8:	4b0b      	ldr	r3, [pc, #44]	@ (80014d8 <HAL_RCC_ClockConfig+0x1c4>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	091b      	lsrs	r3, r3, #4
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	490a      	ldr	r1, [pc, #40]	@ (80014dc <HAL_RCC_ClockConfig+0x1c8>)
 80014b4:	5ccb      	ldrb	r3, [r1, r3]
 80014b6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ba:	4a09      	ldr	r2, [pc, #36]	@ (80014e0 <HAL_RCC_ClockConfig+0x1cc>)
 80014bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014be:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <HAL_RCC_ClockConfig+0x1d0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff f98c 	bl	80007e0 <HAL_InitTick>

  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40022000 	.word	0x40022000
 80014d8:	40021000 	.word	0x40021000
 80014dc:	08002ab0 	.word	0x08002ab0
 80014e0:	20000000 	.word	0x20000000
 80014e4:	20000004 	.word	0x20000004

080014e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014e8:	b490      	push	{r4, r7}
 80014ea:	b08a      	sub	sp, #40	@ 0x28
 80014ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80014ee:	4b29      	ldr	r3, [pc, #164]	@ (8001594 <HAL_RCC_GetSysClockFreq+0xac>)
 80014f0:	1d3c      	adds	r4, r7, #4
 80014f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80014f8:	f240 2301 	movw	r3, #513	@ 0x201
 80014fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
 8001502:	2300      	movs	r3, #0
 8001504:	61bb      	str	r3, [r7, #24]
 8001506:	2300      	movs	r3, #0
 8001508:	627b      	str	r3, [r7, #36]	@ 0x24
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800150e:	2300      	movs	r3, #0
 8001510:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001512:	4b21      	ldr	r3, [pc, #132]	@ (8001598 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f003 030c 	and.w	r3, r3, #12
 800151e:	2b04      	cmp	r3, #4
 8001520:	d002      	beq.n	8001528 <HAL_RCC_GetSysClockFreq+0x40>
 8001522:	2b08      	cmp	r3, #8
 8001524:	d003      	beq.n	800152e <HAL_RCC_GetSysClockFreq+0x46>
 8001526:	e02b      	b.n	8001580 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001528:	4b1c      	ldr	r3, [pc, #112]	@ (800159c <HAL_RCC_GetSysClockFreq+0xb4>)
 800152a:	623b      	str	r3, [r7, #32]
      break;
 800152c:	e02b      	b.n	8001586 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	0c9b      	lsrs	r3, r3, #18
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	3328      	adds	r3, #40	@ 0x28
 8001538:	443b      	add	r3, r7
 800153a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800153e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d012      	beq.n	8001570 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800154a:	4b13      	ldr	r3, [pc, #76]	@ (8001598 <HAL_RCC_GetSysClockFreq+0xb0>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	0c5b      	lsrs	r3, r3, #17
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	3328      	adds	r3, #40	@ 0x28
 8001556:	443b      	add	r3, r7
 8001558:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800155c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	4a0e      	ldr	r2, [pc, #56]	@ (800159c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001562:	fb03 f202 	mul.w	r2, r3, r2
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	fbb2 f3f3 	udiv	r3, r2, r3
 800156c:	627b      	str	r3, [r7, #36]	@ 0x24
 800156e:	e004      	b.n	800157a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	4a0b      	ldr	r2, [pc, #44]	@ (80015a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001574:	fb02 f303 	mul.w	r3, r2, r3
 8001578:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 800157a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157c:	623b      	str	r3, [r7, #32]
      break;
 800157e:	e002      	b.n	8001586 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001580:	4b06      	ldr	r3, [pc, #24]	@ (800159c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001582:	623b      	str	r3, [r7, #32]
      break;
 8001584:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001586:	6a3b      	ldr	r3, [r7, #32]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3728      	adds	r7, #40	@ 0x28
 800158c:	46bd      	mov	sp, r7
 800158e:	bc90      	pop	{r4, r7}
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	08002aa0 	.word	0x08002aa0
 8001598:	40021000 	.word	0x40021000
 800159c:	007a1200 	.word	0x007a1200
 80015a0:	003d0900 	.word	0x003d0900

080015a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015a8:	4b02      	ldr	r3, [pc, #8]	@ (80015b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80015aa:	681b      	ldr	r3, [r3, #0]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	20000000 	.word	0x20000000

080015b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015bc:	f7ff fff2 	bl	80015a4 <HAL_RCC_GetHCLKFreq>
 80015c0:	4602      	mov	r2, r0
 80015c2:	4b05      	ldr	r3, [pc, #20]	@ (80015d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	0a1b      	lsrs	r3, r3, #8
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	4903      	ldr	r1, [pc, #12]	@ (80015dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80015ce:	5ccb      	ldrb	r3, [r1, r3]
 80015d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40021000 	.word	0x40021000
 80015dc:	08002ac0 	.word	0x08002ac0

080015e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015e4:	f7ff ffde 	bl	80015a4 <HAL_RCC_GetHCLKFreq>
 80015e8:	4602      	mov	r2, r0
 80015ea:	4b05      	ldr	r3, [pc, #20]	@ (8001600 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	0adb      	lsrs	r3, r3, #11
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	4903      	ldr	r1, [pc, #12]	@ (8001604 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015f6:	5ccb      	ldrb	r3, [r1, r3]
 80015f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40021000 	.word	0x40021000
 8001604:	08002ac0 	.word	0x08002ac0

08001608 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001610:	4b0a      	ldr	r3, [pc, #40]	@ (800163c <RCC_Delay+0x34>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0a      	ldr	r2, [pc, #40]	@ (8001640 <RCC_Delay+0x38>)
 8001616:	fba2 2303 	umull	r2, r3, r2, r3
 800161a:	0a5b      	lsrs	r3, r3, #9
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	fb02 f303 	mul.w	r3, r2, r3
 8001622:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001624:	bf00      	nop
  }
  while (Delay --);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1e5a      	subs	r2, r3, #1
 800162a:	60fa      	str	r2, [r7, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1f9      	bne.n	8001624 <RCC_Delay+0x1c>
}
 8001630:	bf00      	nop
 8001632:	bf00      	nop
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	20000000 	.word	0x20000000
 8001640:	10624dd3 	.word	0x10624dd3

08001644 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e03f      	b.n	80016d6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d106      	bne.n	8001670 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7fe ff64 	bl	8000538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2224      	movs	r2, #36	@ 0x24
 8001674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	68da      	ldr	r2, [r3, #12]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001686:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 f9a7 	bl	80019dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	691a      	ldr	r2, [r3, #16]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800169c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	695a      	ldr	r2, [r3, #20]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80016ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68da      	ldr	r2, [r3, #12]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80016bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2220      	movs	r2, #32
 80016c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2220      	movs	r2, #32
 80016d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b08a      	sub	sp, #40	@ 0x28
 80016e2:	af02      	add	r7, sp, #8
 80016e4:	60f8      	str	r0, [r7, #12]
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	603b      	str	r3, [r7, #0]
 80016ea:	4613      	mov	r3, r2
 80016ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b20      	cmp	r3, #32
 80016fc:	d17c      	bne.n	80017f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d002      	beq.n	800170a <HAL_UART_Transmit+0x2c>
 8001704:	88fb      	ldrh	r3, [r7, #6]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e075      	b.n	80017fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001714:	2b01      	cmp	r3, #1
 8001716:	d101      	bne.n	800171c <HAL_UART_Transmit+0x3e>
 8001718:	2302      	movs	r3, #2
 800171a:	e06e      	b.n	80017fa <HAL_UART_Transmit+0x11c>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2200      	movs	r2, #0
 8001728:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2221      	movs	r2, #33	@ 0x21
 800172e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001732:	f7ff f897 	bl	8000864 <HAL_GetTick>
 8001736:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	88fa      	ldrh	r2, [r7, #6]
 800173c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	88fa      	ldrh	r2, [r7, #6]
 8001742:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800174c:	d108      	bne.n	8001760 <HAL_UART_Transmit+0x82>
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d104      	bne.n	8001760 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	61bb      	str	r3, [r7, #24]
 800175e:	e003      	b.n	8001768 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8001770:	e02a      	b.n	80017c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	2200      	movs	r2, #0
 800177a:	2180      	movs	r1, #128	@ 0x80
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	f000 f8e2 	bl	8001946 <UART_WaitOnFlagUntilTimeout>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e036      	b.n	80017fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10b      	bne.n	80017aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	461a      	mov	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80017a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	3302      	adds	r3, #2
 80017a6:	61bb      	str	r3, [r7, #24]
 80017a8:	e007      	b.n	80017ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	781a      	ldrb	r2, [r3, #0]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	3301      	adds	r3, #1
 80017b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80017be:	b29b      	uxth	r3, r3
 80017c0:	3b01      	subs	r3, #1
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1cf      	bne.n	8001772 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	2200      	movs	r2, #0
 80017da:	2140      	movs	r1, #64	@ 0x40
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f000 f8b2 	bl	8001946 <UART_WaitOnFlagUntilTimeout>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e006      	b.n	80017fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2220      	movs	r2, #32
 80017f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	e000      	b.n	80017fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80017f8:	2302      	movs	r3, #2
  }
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3720      	adds	r7, #32
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b08a      	sub	sp, #40	@ 0x28
 8001806:	af02      	add	r7, sp, #8
 8001808:	60f8      	str	r0, [r7, #12]
 800180a:	60b9      	str	r1, [r7, #8]
 800180c:	603b      	str	r3, [r7, #0]
 800180e:	4613      	mov	r3, r2
 8001810:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b20      	cmp	r3, #32
 8001820:	f040 808c 	bne.w	800193c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d002      	beq.n	8001830 <HAL_UART_Receive+0x2e>
 800182a:	88fb      	ldrh	r3, [r7, #6]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e084      	b.n	800193e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800183a:	2b01      	cmp	r3, #1
 800183c:	d101      	bne.n	8001842 <HAL_UART_Receive+0x40>
 800183e:	2302      	movs	r3, #2
 8001840:	e07d      	b.n	800193e <HAL_UART_Receive+0x13c>
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2200      	movs	r2, #0
 800184e:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2222      	movs	r2, #34	@ 0x22
 8001854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2200      	movs	r2, #0
 800185c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800185e:	f7ff f801 	bl	8000864 <HAL_GetTick>
 8001862:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	88fa      	ldrh	r2, [r7, #6]
 8001868:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	88fa      	ldrh	r2, [r7, #6]
 800186e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001878:	d108      	bne.n	800188c <HAL_UART_Receive+0x8a>
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d104      	bne.n	800188c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	61bb      	str	r3, [r7, #24]
 800188a:	e003      	b.n	8001894 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001890:	2300      	movs	r3, #0
 8001892:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800189c:	e043      	b.n	8001926 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	2200      	movs	r2, #0
 80018a6:	2120      	movs	r1, #32
 80018a8:	68f8      	ldr	r0, [r7, #12]
 80018aa:	f000 f84c 	bl	8001946 <UART_WaitOnFlagUntilTimeout>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e042      	b.n	800193e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10c      	bne.n	80018d8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	3302      	adds	r3, #2
 80018d4:	61bb      	str	r3, [r7, #24]
 80018d6:	e01f      	b.n	8001918 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018e0:	d007      	beq.n	80018f2 <HAL_UART_Receive+0xf0>
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10a      	bne.n	8001900 <HAL_UART_Receive+0xfe>
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d106      	bne.n	8001900 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	701a      	strb	r2, [r3, #0]
 80018fe:	e008      	b.n	8001912 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	b2db      	uxtb	r3, r3
 8001908:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800190c:	b2da      	uxtb	r2, r3
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3301      	adds	r3, #1
 8001916:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800191c:	b29b      	uxth	r3, r3
 800191e:	3b01      	subs	r3, #1
 8001920:	b29a      	uxth	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800192a:	b29b      	uxth	r3, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1b6      	bne.n	800189e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2220      	movs	r2, #32
 8001934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    return HAL_OK;
 8001938:	2300      	movs	r3, #0
 800193a:	e000      	b.n	800193e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800193c:	2302      	movs	r3, #2
  }
}
 800193e:	4618      	mov	r0, r3
 8001940:	3720      	adds	r7, #32
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b084      	sub	sp, #16
 800194a:	af00      	add	r7, sp, #0
 800194c:	60f8      	str	r0, [r7, #12]
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	603b      	str	r3, [r7, #0]
 8001952:	4613      	mov	r3, r2
 8001954:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001956:	e02c      	b.n	80019b2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800195e:	d028      	beq.n	80019b2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d007      	beq.n	8001976 <UART_WaitOnFlagUntilTimeout+0x30>
 8001966:	f7fe ff7d 	bl	8000864 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	429a      	cmp	r2, r3
 8001974:	d21d      	bcs.n	80019b2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68da      	ldr	r2, [r3, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8001984:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	695a      	ldr	r2, [r3, #20]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f022 0201 	bic.w	r2, r2, #1
 8001994:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2220      	movs	r2, #32
 800199a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2220      	movs	r2, #32
 80019a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e00f      	b.n	80019d2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	4013      	ands	r3, r2
 80019bc:	68ba      	ldr	r2, [r7, #8]
 80019be:	429a      	cmp	r2, r3
 80019c0:	bf0c      	ite	eq
 80019c2:	2301      	moveq	r3, #1
 80019c4:	2300      	movne	r3, #0
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	461a      	mov	r2, r3
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d0c3      	beq.n	8001958 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001a16:	f023 030c 	bic.w	r3, r3, #12
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6812      	ldr	r2, [r2, #0]
 8001a1e:	68b9      	ldr	r1, [r7, #8]
 8001a20:	430b      	orrs	r3, r1
 8001a22:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	699a      	ldr	r2, [r3, #24]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a2c      	ldr	r2, [pc, #176]	@ (8001af0 <UART_SetConfig+0x114>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d103      	bne.n	8001a4c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001a44:	f7ff fdcc 	bl	80015e0 <HAL_RCC_GetPCLK2Freq>
 8001a48:	60f8      	str	r0, [r7, #12]
 8001a4a:	e002      	b.n	8001a52 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001a4c:	f7ff fdb4 	bl	80015b8 <HAL_RCC_GetPCLK1Freq>
 8001a50:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	4613      	mov	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	009a      	lsls	r2, r3, #2
 8001a5c:	441a      	add	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a68:	4a22      	ldr	r2, [pc, #136]	@ (8001af4 <UART_SetConfig+0x118>)
 8001a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6e:	095b      	lsrs	r3, r3, #5
 8001a70:	0119      	lsls	r1, r3, #4
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	009a      	lsls	r2, r3, #2
 8001a7c:	441a      	add	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a88:	4b1a      	ldr	r3, [pc, #104]	@ (8001af4 <UART_SetConfig+0x118>)
 8001a8a:	fba3 0302 	umull	r0, r3, r3, r2
 8001a8e:	095b      	lsrs	r3, r3, #5
 8001a90:	2064      	movs	r0, #100	@ 0x64
 8001a92:	fb00 f303 	mul.w	r3, r0, r3
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	011b      	lsls	r3, r3, #4
 8001a9a:	3332      	adds	r3, #50	@ 0x32
 8001a9c:	4a15      	ldr	r2, [pc, #84]	@ (8001af4 <UART_SetConfig+0x118>)
 8001a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa2:	095b      	lsrs	r3, r3, #5
 8001aa4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001aa8:	4419      	add	r1, r3
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	4613      	mov	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	009a      	lsls	r2, r3, #2
 8001ab4:	441a      	add	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8001af4 <UART_SetConfig+0x118>)
 8001ac2:	fba3 0302 	umull	r0, r3, r3, r2
 8001ac6:	095b      	lsrs	r3, r3, #5
 8001ac8:	2064      	movs	r0, #100	@ 0x64
 8001aca:	fb00 f303 	mul.w	r3, r0, r3
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	011b      	lsls	r3, r3, #4
 8001ad2:	3332      	adds	r3, #50	@ 0x32
 8001ad4:	4a07      	ldr	r2, [pc, #28]	@ (8001af4 <UART_SetConfig+0x118>)
 8001ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ada:	095b      	lsrs	r3, r3, #5
 8001adc:	f003 020f 	and.w	r2, r3, #15
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	440a      	add	r2, r1
 8001ae6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001ae8:	bf00      	nop
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40013800 	.word	0x40013800
 8001af4:	51eb851f 	.word	0x51eb851f

08001af8 <std>:
 8001af8:	2300      	movs	r3, #0
 8001afa:	b510      	push	{r4, lr}
 8001afc:	4604      	mov	r4, r0
 8001afe:	e9c0 3300 	strd	r3, r3, [r0]
 8001b02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001b06:	6083      	str	r3, [r0, #8]
 8001b08:	8181      	strh	r1, [r0, #12]
 8001b0a:	6643      	str	r3, [r0, #100]	@ 0x64
 8001b0c:	81c2      	strh	r2, [r0, #14]
 8001b0e:	6183      	str	r3, [r0, #24]
 8001b10:	4619      	mov	r1, r3
 8001b12:	2208      	movs	r2, #8
 8001b14:	305c      	adds	r0, #92	@ 0x5c
 8001b16:	f000 f921 	bl	8001d5c <memset>
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b50 <std+0x58>)
 8001b1c:	6224      	str	r4, [r4, #32]
 8001b1e:	6263      	str	r3, [r4, #36]	@ 0x24
 8001b20:	4b0c      	ldr	r3, [pc, #48]	@ (8001b54 <std+0x5c>)
 8001b22:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001b24:	4b0c      	ldr	r3, [pc, #48]	@ (8001b58 <std+0x60>)
 8001b26:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001b28:	4b0c      	ldr	r3, [pc, #48]	@ (8001b5c <std+0x64>)
 8001b2a:	6323      	str	r3, [r4, #48]	@ 0x30
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b60 <std+0x68>)
 8001b2e:	429c      	cmp	r4, r3
 8001b30:	d006      	beq.n	8001b40 <std+0x48>
 8001b32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001b36:	4294      	cmp	r4, r2
 8001b38:	d002      	beq.n	8001b40 <std+0x48>
 8001b3a:	33d0      	adds	r3, #208	@ 0xd0
 8001b3c:	429c      	cmp	r4, r3
 8001b3e:	d105      	bne.n	8001b4c <std+0x54>
 8001b40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b48:	f000 b93a 	b.w	8001dc0 <__retarget_lock_init_recursive>
 8001b4c:	bd10      	pop	{r4, pc}
 8001b4e:	bf00      	nop
 8001b50:	08002611 	.word	0x08002611
 8001b54:	08002633 	.word	0x08002633
 8001b58:	0800266b 	.word	0x0800266b
 8001b5c:	0800268f 	.word	0x0800268f
 8001b60:	200000d0 	.word	0x200000d0

08001b64 <stdio_exit_handler>:
 8001b64:	4a02      	ldr	r2, [pc, #8]	@ (8001b70 <stdio_exit_handler+0xc>)
 8001b66:	4903      	ldr	r1, [pc, #12]	@ (8001b74 <stdio_exit_handler+0x10>)
 8001b68:	4803      	ldr	r0, [pc, #12]	@ (8001b78 <stdio_exit_handler+0x14>)
 8001b6a:	f000 b869 	b.w	8001c40 <_fwalk_sglue>
 8001b6e:	bf00      	nop
 8001b70:	2000000c 	.word	0x2000000c
 8001b74:	080025a9 	.word	0x080025a9
 8001b78:	2000001c 	.word	0x2000001c

08001b7c <cleanup_stdio>:
 8001b7c:	6841      	ldr	r1, [r0, #4]
 8001b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb0 <cleanup_stdio+0x34>)
 8001b80:	b510      	push	{r4, lr}
 8001b82:	4299      	cmp	r1, r3
 8001b84:	4604      	mov	r4, r0
 8001b86:	d001      	beq.n	8001b8c <cleanup_stdio+0x10>
 8001b88:	f000 fd0e 	bl	80025a8 <_fflush_r>
 8001b8c:	68a1      	ldr	r1, [r4, #8]
 8001b8e:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <cleanup_stdio+0x38>)
 8001b90:	4299      	cmp	r1, r3
 8001b92:	d002      	beq.n	8001b9a <cleanup_stdio+0x1e>
 8001b94:	4620      	mov	r0, r4
 8001b96:	f000 fd07 	bl	80025a8 <_fflush_r>
 8001b9a:	68e1      	ldr	r1, [r4, #12]
 8001b9c:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <cleanup_stdio+0x3c>)
 8001b9e:	4299      	cmp	r1, r3
 8001ba0:	d004      	beq.n	8001bac <cleanup_stdio+0x30>
 8001ba2:	4620      	mov	r0, r4
 8001ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ba8:	f000 bcfe 	b.w	80025a8 <_fflush_r>
 8001bac:	bd10      	pop	{r4, pc}
 8001bae:	bf00      	nop
 8001bb0:	200000d0 	.word	0x200000d0
 8001bb4:	20000138 	.word	0x20000138
 8001bb8:	200001a0 	.word	0x200001a0

08001bbc <global_stdio_init.part.0>:
 8001bbc:	b510      	push	{r4, lr}
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001bec <global_stdio_init.part.0+0x30>)
 8001bc0:	4c0b      	ldr	r4, [pc, #44]	@ (8001bf0 <global_stdio_init.part.0+0x34>)
 8001bc2:	4a0c      	ldr	r2, [pc, #48]	@ (8001bf4 <global_stdio_init.part.0+0x38>)
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	2104      	movs	r1, #4
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f7ff ff94 	bl	8001af8 <std>
 8001bd0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	2109      	movs	r1, #9
 8001bd8:	f7ff ff8e 	bl	8001af8 <std>
 8001bdc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001be0:	2202      	movs	r2, #2
 8001be2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001be6:	2112      	movs	r1, #18
 8001be8:	f7ff bf86 	b.w	8001af8 <std>
 8001bec:	20000208 	.word	0x20000208
 8001bf0:	200000d0 	.word	0x200000d0
 8001bf4:	08001b65 	.word	0x08001b65

08001bf8 <__sfp_lock_acquire>:
 8001bf8:	4801      	ldr	r0, [pc, #4]	@ (8001c00 <__sfp_lock_acquire+0x8>)
 8001bfa:	f000 b8e2 	b.w	8001dc2 <__retarget_lock_acquire_recursive>
 8001bfe:	bf00      	nop
 8001c00:	2000020d 	.word	0x2000020d

08001c04 <__sfp_lock_release>:
 8001c04:	4801      	ldr	r0, [pc, #4]	@ (8001c0c <__sfp_lock_release+0x8>)
 8001c06:	f000 b8dd 	b.w	8001dc4 <__retarget_lock_release_recursive>
 8001c0a:	bf00      	nop
 8001c0c:	2000020d 	.word	0x2000020d

08001c10 <__sinit>:
 8001c10:	b510      	push	{r4, lr}
 8001c12:	4604      	mov	r4, r0
 8001c14:	f7ff fff0 	bl	8001bf8 <__sfp_lock_acquire>
 8001c18:	6a23      	ldr	r3, [r4, #32]
 8001c1a:	b11b      	cbz	r3, 8001c24 <__sinit+0x14>
 8001c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c20:	f7ff bff0 	b.w	8001c04 <__sfp_lock_release>
 8001c24:	4b04      	ldr	r3, [pc, #16]	@ (8001c38 <__sinit+0x28>)
 8001c26:	6223      	str	r3, [r4, #32]
 8001c28:	4b04      	ldr	r3, [pc, #16]	@ (8001c3c <__sinit+0x2c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1f5      	bne.n	8001c1c <__sinit+0xc>
 8001c30:	f7ff ffc4 	bl	8001bbc <global_stdio_init.part.0>
 8001c34:	e7f2      	b.n	8001c1c <__sinit+0xc>
 8001c36:	bf00      	nop
 8001c38:	08001b7d 	.word	0x08001b7d
 8001c3c:	20000208 	.word	0x20000208

08001c40 <_fwalk_sglue>:
 8001c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c44:	4607      	mov	r7, r0
 8001c46:	4688      	mov	r8, r1
 8001c48:	4614      	mov	r4, r2
 8001c4a:	2600      	movs	r6, #0
 8001c4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001c50:	f1b9 0901 	subs.w	r9, r9, #1
 8001c54:	d505      	bpl.n	8001c62 <_fwalk_sglue+0x22>
 8001c56:	6824      	ldr	r4, [r4, #0]
 8001c58:	2c00      	cmp	r4, #0
 8001c5a:	d1f7      	bne.n	8001c4c <_fwalk_sglue+0xc>
 8001c5c:	4630      	mov	r0, r6
 8001c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c62:	89ab      	ldrh	r3, [r5, #12]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d907      	bls.n	8001c78 <_fwalk_sglue+0x38>
 8001c68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	d003      	beq.n	8001c78 <_fwalk_sglue+0x38>
 8001c70:	4629      	mov	r1, r5
 8001c72:	4638      	mov	r0, r7
 8001c74:	47c0      	blx	r8
 8001c76:	4306      	orrs	r6, r0
 8001c78:	3568      	adds	r5, #104	@ 0x68
 8001c7a:	e7e9      	b.n	8001c50 <_fwalk_sglue+0x10>

08001c7c <iprintf>:
 8001c7c:	b40f      	push	{r0, r1, r2, r3}
 8001c7e:	b507      	push	{r0, r1, r2, lr}
 8001c80:	4906      	ldr	r1, [pc, #24]	@ (8001c9c <iprintf+0x20>)
 8001c82:	ab04      	add	r3, sp, #16
 8001c84:	6808      	ldr	r0, [r1, #0]
 8001c86:	f853 2b04 	ldr.w	r2, [r3], #4
 8001c8a:	6881      	ldr	r1, [r0, #8]
 8001c8c:	9301      	str	r3, [sp, #4]
 8001c8e:	f000 f8c1 	bl	8001e14 <_vfiprintf_r>
 8001c92:	b003      	add	sp, #12
 8001c94:	f85d eb04 	ldr.w	lr, [sp], #4
 8001c98:	b004      	add	sp, #16
 8001c9a:	4770      	bx	lr
 8001c9c:	20000018 	.word	0x20000018

08001ca0 <_puts_r>:
 8001ca0:	6a03      	ldr	r3, [r0, #32]
 8001ca2:	b570      	push	{r4, r5, r6, lr}
 8001ca4:	4605      	mov	r5, r0
 8001ca6:	460e      	mov	r6, r1
 8001ca8:	6884      	ldr	r4, [r0, #8]
 8001caa:	b90b      	cbnz	r3, 8001cb0 <_puts_r+0x10>
 8001cac:	f7ff ffb0 	bl	8001c10 <__sinit>
 8001cb0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001cb2:	07db      	lsls	r3, r3, #31
 8001cb4:	d405      	bmi.n	8001cc2 <_puts_r+0x22>
 8001cb6:	89a3      	ldrh	r3, [r4, #12]
 8001cb8:	0598      	lsls	r0, r3, #22
 8001cba:	d402      	bmi.n	8001cc2 <_puts_r+0x22>
 8001cbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001cbe:	f000 f880 	bl	8001dc2 <__retarget_lock_acquire_recursive>
 8001cc2:	89a3      	ldrh	r3, [r4, #12]
 8001cc4:	0719      	lsls	r1, r3, #28
 8001cc6:	d502      	bpl.n	8001cce <_puts_r+0x2e>
 8001cc8:	6923      	ldr	r3, [r4, #16]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d135      	bne.n	8001d3a <_puts_r+0x9a>
 8001cce:	4621      	mov	r1, r4
 8001cd0:	4628      	mov	r0, r5
 8001cd2:	f000 fd1f 	bl	8002714 <__swsetup_r>
 8001cd6:	b380      	cbz	r0, 8001d3a <_puts_r+0x9a>
 8001cd8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8001cdc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001cde:	07da      	lsls	r2, r3, #31
 8001ce0:	d405      	bmi.n	8001cee <_puts_r+0x4e>
 8001ce2:	89a3      	ldrh	r3, [r4, #12]
 8001ce4:	059b      	lsls	r3, r3, #22
 8001ce6:	d402      	bmi.n	8001cee <_puts_r+0x4e>
 8001ce8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001cea:	f000 f86b 	bl	8001dc4 <__retarget_lock_release_recursive>
 8001cee:	4628      	mov	r0, r5
 8001cf0:	bd70      	pop	{r4, r5, r6, pc}
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	da04      	bge.n	8001d00 <_puts_r+0x60>
 8001cf6:	69a2      	ldr	r2, [r4, #24]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	dc17      	bgt.n	8001d2c <_puts_r+0x8c>
 8001cfc:	290a      	cmp	r1, #10
 8001cfe:	d015      	beq.n	8001d2c <_puts_r+0x8c>
 8001d00:	6823      	ldr	r3, [r4, #0]
 8001d02:	1c5a      	adds	r2, r3, #1
 8001d04:	6022      	str	r2, [r4, #0]
 8001d06:	7019      	strb	r1, [r3, #0]
 8001d08:	68a3      	ldr	r3, [r4, #8]
 8001d0a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	60a3      	str	r3, [r4, #8]
 8001d12:	2900      	cmp	r1, #0
 8001d14:	d1ed      	bne.n	8001cf2 <_puts_r+0x52>
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	da11      	bge.n	8001d3e <_puts_r+0x9e>
 8001d1a:	4622      	mov	r2, r4
 8001d1c:	210a      	movs	r1, #10
 8001d1e:	4628      	mov	r0, r5
 8001d20:	f000 fcb9 	bl	8002696 <__swbuf_r>
 8001d24:	3001      	adds	r0, #1
 8001d26:	d0d7      	beq.n	8001cd8 <_puts_r+0x38>
 8001d28:	250a      	movs	r5, #10
 8001d2a:	e7d7      	b.n	8001cdc <_puts_r+0x3c>
 8001d2c:	4622      	mov	r2, r4
 8001d2e:	4628      	mov	r0, r5
 8001d30:	f000 fcb1 	bl	8002696 <__swbuf_r>
 8001d34:	3001      	adds	r0, #1
 8001d36:	d1e7      	bne.n	8001d08 <_puts_r+0x68>
 8001d38:	e7ce      	b.n	8001cd8 <_puts_r+0x38>
 8001d3a:	3e01      	subs	r6, #1
 8001d3c:	e7e4      	b.n	8001d08 <_puts_r+0x68>
 8001d3e:	6823      	ldr	r3, [r4, #0]
 8001d40:	1c5a      	adds	r2, r3, #1
 8001d42:	6022      	str	r2, [r4, #0]
 8001d44:	220a      	movs	r2, #10
 8001d46:	701a      	strb	r2, [r3, #0]
 8001d48:	e7ee      	b.n	8001d28 <_puts_r+0x88>
	...

08001d4c <puts>:
 8001d4c:	4b02      	ldr	r3, [pc, #8]	@ (8001d58 <puts+0xc>)
 8001d4e:	4601      	mov	r1, r0
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	f7ff bfa5 	b.w	8001ca0 <_puts_r>
 8001d56:	bf00      	nop
 8001d58:	20000018 	.word	0x20000018

08001d5c <memset>:
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	4402      	add	r2, r0
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d100      	bne.n	8001d66 <memset+0xa>
 8001d64:	4770      	bx	lr
 8001d66:	f803 1b01 	strb.w	r1, [r3], #1
 8001d6a:	e7f9      	b.n	8001d60 <memset+0x4>

08001d6c <__errno>:
 8001d6c:	4b01      	ldr	r3, [pc, #4]	@ (8001d74 <__errno+0x8>)
 8001d6e:	6818      	ldr	r0, [r3, #0]
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	20000018 	.word	0x20000018

08001d78 <__libc_init_array>:
 8001d78:	b570      	push	{r4, r5, r6, lr}
 8001d7a:	2600      	movs	r6, #0
 8001d7c:	4d0c      	ldr	r5, [pc, #48]	@ (8001db0 <__libc_init_array+0x38>)
 8001d7e:	4c0d      	ldr	r4, [pc, #52]	@ (8001db4 <__libc_init_array+0x3c>)
 8001d80:	1b64      	subs	r4, r4, r5
 8001d82:	10a4      	asrs	r4, r4, #2
 8001d84:	42a6      	cmp	r6, r4
 8001d86:	d109      	bne.n	8001d9c <__libc_init_array+0x24>
 8001d88:	f000 fe4a 	bl	8002a20 <_init>
 8001d8c:	2600      	movs	r6, #0
 8001d8e:	4d0a      	ldr	r5, [pc, #40]	@ (8001db8 <__libc_init_array+0x40>)
 8001d90:	4c0a      	ldr	r4, [pc, #40]	@ (8001dbc <__libc_init_array+0x44>)
 8001d92:	1b64      	subs	r4, r4, r5
 8001d94:	10a4      	asrs	r4, r4, #2
 8001d96:	42a6      	cmp	r6, r4
 8001d98:	d105      	bne.n	8001da6 <__libc_init_array+0x2e>
 8001d9a:	bd70      	pop	{r4, r5, r6, pc}
 8001d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001da0:	4798      	blx	r3
 8001da2:	3601      	adds	r6, #1
 8001da4:	e7ee      	b.n	8001d84 <__libc_init_array+0xc>
 8001da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001daa:	4798      	blx	r3
 8001dac:	3601      	adds	r6, #1
 8001dae:	e7f2      	b.n	8001d96 <__libc_init_array+0x1e>
 8001db0:	08002afc 	.word	0x08002afc
 8001db4:	08002afc 	.word	0x08002afc
 8001db8:	08002afc 	.word	0x08002afc
 8001dbc:	08002b00 	.word	0x08002b00

08001dc0 <__retarget_lock_init_recursive>:
 8001dc0:	4770      	bx	lr

08001dc2 <__retarget_lock_acquire_recursive>:
 8001dc2:	4770      	bx	lr

08001dc4 <__retarget_lock_release_recursive>:
 8001dc4:	4770      	bx	lr

08001dc6 <__sfputc_r>:
 8001dc6:	6893      	ldr	r3, [r2, #8]
 8001dc8:	b410      	push	{r4}
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	6093      	str	r3, [r2, #8]
 8001dd0:	da07      	bge.n	8001de2 <__sfputc_r+0x1c>
 8001dd2:	6994      	ldr	r4, [r2, #24]
 8001dd4:	42a3      	cmp	r3, r4
 8001dd6:	db01      	blt.n	8001ddc <__sfputc_r+0x16>
 8001dd8:	290a      	cmp	r1, #10
 8001dda:	d102      	bne.n	8001de2 <__sfputc_r+0x1c>
 8001ddc:	bc10      	pop	{r4}
 8001dde:	f000 bc5a 	b.w	8002696 <__swbuf_r>
 8001de2:	6813      	ldr	r3, [r2, #0]
 8001de4:	1c58      	adds	r0, r3, #1
 8001de6:	6010      	str	r0, [r2, #0]
 8001de8:	7019      	strb	r1, [r3, #0]
 8001dea:	4608      	mov	r0, r1
 8001dec:	bc10      	pop	{r4}
 8001dee:	4770      	bx	lr

08001df0 <__sfputs_r>:
 8001df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001df2:	4606      	mov	r6, r0
 8001df4:	460f      	mov	r7, r1
 8001df6:	4614      	mov	r4, r2
 8001df8:	18d5      	adds	r5, r2, r3
 8001dfa:	42ac      	cmp	r4, r5
 8001dfc:	d101      	bne.n	8001e02 <__sfputs_r+0x12>
 8001dfe:	2000      	movs	r0, #0
 8001e00:	e007      	b.n	8001e12 <__sfputs_r+0x22>
 8001e02:	463a      	mov	r2, r7
 8001e04:	4630      	mov	r0, r6
 8001e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e0a:	f7ff ffdc 	bl	8001dc6 <__sfputc_r>
 8001e0e:	1c43      	adds	r3, r0, #1
 8001e10:	d1f3      	bne.n	8001dfa <__sfputs_r+0xa>
 8001e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001e14 <_vfiprintf_r>:
 8001e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e18:	460d      	mov	r5, r1
 8001e1a:	4614      	mov	r4, r2
 8001e1c:	4698      	mov	r8, r3
 8001e1e:	4606      	mov	r6, r0
 8001e20:	b09d      	sub	sp, #116	@ 0x74
 8001e22:	b118      	cbz	r0, 8001e2c <_vfiprintf_r+0x18>
 8001e24:	6a03      	ldr	r3, [r0, #32]
 8001e26:	b90b      	cbnz	r3, 8001e2c <_vfiprintf_r+0x18>
 8001e28:	f7ff fef2 	bl	8001c10 <__sinit>
 8001e2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001e2e:	07d9      	lsls	r1, r3, #31
 8001e30:	d405      	bmi.n	8001e3e <_vfiprintf_r+0x2a>
 8001e32:	89ab      	ldrh	r3, [r5, #12]
 8001e34:	059a      	lsls	r2, r3, #22
 8001e36:	d402      	bmi.n	8001e3e <_vfiprintf_r+0x2a>
 8001e38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001e3a:	f7ff ffc2 	bl	8001dc2 <__retarget_lock_acquire_recursive>
 8001e3e:	89ab      	ldrh	r3, [r5, #12]
 8001e40:	071b      	lsls	r3, r3, #28
 8001e42:	d501      	bpl.n	8001e48 <_vfiprintf_r+0x34>
 8001e44:	692b      	ldr	r3, [r5, #16]
 8001e46:	b99b      	cbnz	r3, 8001e70 <_vfiprintf_r+0x5c>
 8001e48:	4629      	mov	r1, r5
 8001e4a:	4630      	mov	r0, r6
 8001e4c:	f000 fc62 	bl	8002714 <__swsetup_r>
 8001e50:	b170      	cbz	r0, 8001e70 <_vfiprintf_r+0x5c>
 8001e52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001e54:	07dc      	lsls	r4, r3, #31
 8001e56:	d504      	bpl.n	8001e62 <_vfiprintf_r+0x4e>
 8001e58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e5c:	b01d      	add	sp, #116	@ 0x74
 8001e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e62:	89ab      	ldrh	r3, [r5, #12]
 8001e64:	0598      	lsls	r0, r3, #22
 8001e66:	d4f7      	bmi.n	8001e58 <_vfiprintf_r+0x44>
 8001e68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001e6a:	f7ff ffab 	bl	8001dc4 <__retarget_lock_release_recursive>
 8001e6e:	e7f3      	b.n	8001e58 <_vfiprintf_r+0x44>
 8001e70:	2300      	movs	r3, #0
 8001e72:	9309      	str	r3, [sp, #36]	@ 0x24
 8001e74:	2320      	movs	r3, #32
 8001e76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001e7a:	2330      	movs	r3, #48	@ 0x30
 8001e7c:	f04f 0901 	mov.w	r9, #1
 8001e80:	f8cd 800c 	str.w	r8, [sp, #12]
 8001e84:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8002030 <_vfiprintf_r+0x21c>
 8001e88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001e8c:	4623      	mov	r3, r4
 8001e8e:	469a      	mov	sl, r3
 8001e90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001e94:	b10a      	cbz	r2, 8001e9a <_vfiprintf_r+0x86>
 8001e96:	2a25      	cmp	r2, #37	@ 0x25
 8001e98:	d1f9      	bne.n	8001e8e <_vfiprintf_r+0x7a>
 8001e9a:	ebba 0b04 	subs.w	fp, sl, r4
 8001e9e:	d00b      	beq.n	8001eb8 <_vfiprintf_r+0xa4>
 8001ea0:	465b      	mov	r3, fp
 8001ea2:	4622      	mov	r2, r4
 8001ea4:	4629      	mov	r1, r5
 8001ea6:	4630      	mov	r0, r6
 8001ea8:	f7ff ffa2 	bl	8001df0 <__sfputs_r>
 8001eac:	3001      	adds	r0, #1
 8001eae:	f000 80a7 	beq.w	8002000 <_vfiprintf_r+0x1ec>
 8001eb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001eb4:	445a      	add	r2, fp
 8001eb6:	9209      	str	r2, [sp, #36]	@ 0x24
 8001eb8:	f89a 3000 	ldrb.w	r3, [sl]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 809f 	beq.w	8002000 <_vfiprintf_r+0x1ec>
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ec8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001ecc:	f10a 0a01 	add.w	sl, sl, #1
 8001ed0:	9304      	str	r3, [sp, #16]
 8001ed2:	9307      	str	r3, [sp, #28]
 8001ed4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001ed8:	931a      	str	r3, [sp, #104]	@ 0x68
 8001eda:	4654      	mov	r4, sl
 8001edc:	2205      	movs	r2, #5
 8001ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ee2:	4853      	ldr	r0, [pc, #332]	@ (8002030 <_vfiprintf_r+0x21c>)
 8001ee4:	f000 fd46 	bl	8002974 <memchr>
 8001ee8:	9a04      	ldr	r2, [sp, #16]
 8001eea:	b9d8      	cbnz	r0, 8001f24 <_vfiprintf_r+0x110>
 8001eec:	06d1      	lsls	r1, r2, #27
 8001eee:	bf44      	itt	mi
 8001ef0:	2320      	movmi	r3, #32
 8001ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001ef6:	0713      	lsls	r3, r2, #28
 8001ef8:	bf44      	itt	mi
 8001efa:	232b      	movmi	r3, #43	@ 0x2b
 8001efc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001f00:	f89a 3000 	ldrb.w	r3, [sl]
 8001f04:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f06:	d015      	beq.n	8001f34 <_vfiprintf_r+0x120>
 8001f08:	4654      	mov	r4, sl
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f04f 0c0a 	mov.w	ip, #10
 8001f10:	9a07      	ldr	r2, [sp, #28]
 8001f12:	4621      	mov	r1, r4
 8001f14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001f18:	3b30      	subs	r3, #48	@ 0x30
 8001f1a:	2b09      	cmp	r3, #9
 8001f1c:	d94b      	bls.n	8001fb6 <_vfiprintf_r+0x1a2>
 8001f1e:	b1b0      	cbz	r0, 8001f4e <_vfiprintf_r+0x13a>
 8001f20:	9207      	str	r2, [sp, #28]
 8001f22:	e014      	b.n	8001f4e <_vfiprintf_r+0x13a>
 8001f24:	eba0 0308 	sub.w	r3, r0, r8
 8001f28:	fa09 f303 	lsl.w	r3, r9, r3
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	46a2      	mov	sl, r4
 8001f30:	9304      	str	r3, [sp, #16]
 8001f32:	e7d2      	b.n	8001eda <_vfiprintf_r+0xc6>
 8001f34:	9b03      	ldr	r3, [sp, #12]
 8001f36:	1d19      	adds	r1, r3, #4
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	9103      	str	r1, [sp, #12]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	bfbb      	ittet	lt
 8001f40:	425b      	neglt	r3, r3
 8001f42:	f042 0202 	orrlt.w	r2, r2, #2
 8001f46:	9307      	strge	r3, [sp, #28]
 8001f48:	9307      	strlt	r3, [sp, #28]
 8001f4a:	bfb8      	it	lt
 8001f4c:	9204      	strlt	r2, [sp, #16]
 8001f4e:	7823      	ldrb	r3, [r4, #0]
 8001f50:	2b2e      	cmp	r3, #46	@ 0x2e
 8001f52:	d10a      	bne.n	8001f6a <_vfiprintf_r+0x156>
 8001f54:	7863      	ldrb	r3, [r4, #1]
 8001f56:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f58:	d132      	bne.n	8001fc0 <_vfiprintf_r+0x1ac>
 8001f5a:	9b03      	ldr	r3, [sp, #12]
 8001f5c:	3402      	adds	r4, #2
 8001f5e:	1d1a      	adds	r2, r3, #4
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	9203      	str	r2, [sp, #12]
 8001f64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001f68:	9305      	str	r3, [sp, #20]
 8001f6a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002034 <_vfiprintf_r+0x220>
 8001f6e:	2203      	movs	r2, #3
 8001f70:	4650      	mov	r0, sl
 8001f72:	7821      	ldrb	r1, [r4, #0]
 8001f74:	f000 fcfe 	bl	8002974 <memchr>
 8001f78:	b138      	cbz	r0, 8001f8a <_vfiprintf_r+0x176>
 8001f7a:	2240      	movs	r2, #64	@ 0x40
 8001f7c:	9b04      	ldr	r3, [sp, #16]
 8001f7e:	eba0 000a 	sub.w	r0, r0, sl
 8001f82:	4082      	lsls	r2, r0
 8001f84:	4313      	orrs	r3, r2
 8001f86:	3401      	adds	r4, #1
 8001f88:	9304      	str	r3, [sp, #16]
 8001f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f8e:	2206      	movs	r2, #6
 8001f90:	4829      	ldr	r0, [pc, #164]	@ (8002038 <_vfiprintf_r+0x224>)
 8001f92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001f96:	f000 fced 	bl	8002974 <memchr>
 8001f9a:	2800      	cmp	r0, #0
 8001f9c:	d03f      	beq.n	800201e <_vfiprintf_r+0x20a>
 8001f9e:	4b27      	ldr	r3, [pc, #156]	@ (800203c <_vfiprintf_r+0x228>)
 8001fa0:	bb1b      	cbnz	r3, 8001fea <_vfiprintf_r+0x1d6>
 8001fa2:	9b03      	ldr	r3, [sp, #12]
 8001fa4:	3307      	adds	r3, #7
 8001fa6:	f023 0307 	bic.w	r3, r3, #7
 8001faa:	3308      	adds	r3, #8
 8001fac:	9303      	str	r3, [sp, #12]
 8001fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001fb0:	443b      	add	r3, r7
 8001fb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8001fb4:	e76a      	b.n	8001e8c <_vfiprintf_r+0x78>
 8001fb6:	460c      	mov	r4, r1
 8001fb8:	2001      	movs	r0, #1
 8001fba:	fb0c 3202 	mla	r2, ip, r2, r3
 8001fbe:	e7a8      	b.n	8001f12 <_vfiprintf_r+0xfe>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f04f 0c0a 	mov.w	ip, #10
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	3401      	adds	r4, #1
 8001fca:	9305      	str	r3, [sp, #20]
 8001fcc:	4620      	mov	r0, r4
 8001fce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001fd2:	3a30      	subs	r2, #48	@ 0x30
 8001fd4:	2a09      	cmp	r2, #9
 8001fd6:	d903      	bls.n	8001fe0 <_vfiprintf_r+0x1cc>
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0c6      	beq.n	8001f6a <_vfiprintf_r+0x156>
 8001fdc:	9105      	str	r1, [sp, #20]
 8001fde:	e7c4      	b.n	8001f6a <_vfiprintf_r+0x156>
 8001fe0:	4604      	mov	r4, r0
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	fb0c 2101 	mla	r1, ip, r1, r2
 8001fe8:	e7f0      	b.n	8001fcc <_vfiprintf_r+0x1b8>
 8001fea:	ab03      	add	r3, sp, #12
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	462a      	mov	r2, r5
 8001ff0:	4630      	mov	r0, r6
 8001ff2:	4b13      	ldr	r3, [pc, #76]	@ (8002040 <_vfiprintf_r+0x22c>)
 8001ff4:	a904      	add	r1, sp, #16
 8001ff6:	f3af 8000 	nop.w
 8001ffa:	4607      	mov	r7, r0
 8001ffc:	1c78      	adds	r0, r7, #1
 8001ffe:	d1d6      	bne.n	8001fae <_vfiprintf_r+0x19a>
 8002000:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002002:	07d9      	lsls	r1, r3, #31
 8002004:	d405      	bmi.n	8002012 <_vfiprintf_r+0x1fe>
 8002006:	89ab      	ldrh	r3, [r5, #12]
 8002008:	059a      	lsls	r2, r3, #22
 800200a:	d402      	bmi.n	8002012 <_vfiprintf_r+0x1fe>
 800200c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800200e:	f7ff fed9 	bl	8001dc4 <__retarget_lock_release_recursive>
 8002012:	89ab      	ldrh	r3, [r5, #12]
 8002014:	065b      	lsls	r3, r3, #25
 8002016:	f53f af1f 	bmi.w	8001e58 <_vfiprintf_r+0x44>
 800201a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800201c:	e71e      	b.n	8001e5c <_vfiprintf_r+0x48>
 800201e:	ab03      	add	r3, sp, #12
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	462a      	mov	r2, r5
 8002024:	4630      	mov	r0, r6
 8002026:	4b06      	ldr	r3, [pc, #24]	@ (8002040 <_vfiprintf_r+0x22c>)
 8002028:	a904      	add	r1, sp, #16
 800202a:	f000 f91f 	bl	800226c <_printf_i>
 800202e:	e7e4      	b.n	8001ffa <_vfiprintf_r+0x1e6>
 8002030:	08002ac8 	.word	0x08002ac8
 8002034:	08002ace 	.word	0x08002ace
 8002038:	08002ad2 	.word	0x08002ad2
 800203c:	00000000 	.word	0x00000000
 8002040:	08001df1 	.word	0x08001df1

08002044 <sbrk_aligned>:
 8002044:	b570      	push	{r4, r5, r6, lr}
 8002046:	4e0f      	ldr	r6, [pc, #60]	@ (8002084 <sbrk_aligned+0x40>)
 8002048:	460c      	mov	r4, r1
 800204a:	6831      	ldr	r1, [r6, #0]
 800204c:	4605      	mov	r5, r0
 800204e:	b911      	cbnz	r1, 8002056 <sbrk_aligned+0x12>
 8002050:	f000 fc4c 	bl	80028ec <_sbrk_r>
 8002054:	6030      	str	r0, [r6, #0]
 8002056:	4621      	mov	r1, r4
 8002058:	4628      	mov	r0, r5
 800205a:	f000 fc47 	bl	80028ec <_sbrk_r>
 800205e:	1c43      	adds	r3, r0, #1
 8002060:	d103      	bne.n	800206a <sbrk_aligned+0x26>
 8002062:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002066:	4620      	mov	r0, r4
 8002068:	bd70      	pop	{r4, r5, r6, pc}
 800206a:	1cc4      	adds	r4, r0, #3
 800206c:	f024 0403 	bic.w	r4, r4, #3
 8002070:	42a0      	cmp	r0, r4
 8002072:	d0f8      	beq.n	8002066 <sbrk_aligned+0x22>
 8002074:	1a21      	subs	r1, r4, r0
 8002076:	4628      	mov	r0, r5
 8002078:	f000 fc38 	bl	80028ec <_sbrk_r>
 800207c:	3001      	adds	r0, #1
 800207e:	d1f2      	bne.n	8002066 <sbrk_aligned+0x22>
 8002080:	e7ef      	b.n	8002062 <sbrk_aligned+0x1e>
 8002082:	bf00      	nop
 8002084:	20000210 	.word	0x20000210

08002088 <_malloc_r>:
 8002088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800208c:	1ccd      	adds	r5, r1, #3
 800208e:	f025 0503 	bic.w	r5, r5, #3
 8002092:	3508      	adds	r5, #8
 8002094:	2d0c      	cmp	r5, #12
 8002096:	bf38      	it	cc
 8002098:	250c      	movcc	r5, #12
 800209a:	2d00      	cmp	r5, #0
 800209c:	4606      	mov	r6, r0
 800209e:	db01      	blt.n	80020a4 <_malloc_r+0x1c>
 80020a0:	42a9      	cmp	r1, r5
 80020a2:	d904      	bls.n	80020ae <_malloc_r+0x26>
 80020a4:	230c      	movs	r3, #12
 80020a6:	6033      	str	r3, [r6, #0]
 80020a8:	2000      	movs	r0, #0
 80020aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80020ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002184 <_malloc_r+0xfc>
 80020b2:	f000 faa1 	bl	80025f8 <__malloc_lock>
 80020b6:	f8d8 3000 	ldr.w	r3, [r8]
 80020ba:	461c      	mov	r4, r3
 80020bc:	bb44      	cbnz	r4, 8002110 <_malloc_r+0x88>
 80020be:	4629      	mov	r1, r5
 80020c0:	4630      	mov	r0, r6
 80020c2:	f7ff ffbf 	bl	8002044 <sbrk_aligned>
 80020c6:	1c43      	adds	r3, r0, #1
 80020c8:	4604      	mov	r4, r0
 80020ca:	d158      	bne.n	800217e <_malloc_r+0xf6>
 80020cc:	f8d8 4000 	ldr.w	r4, [r8]
 80020d0:	4627      	mov	r7, r4
 80020d2:	2f00      	cmp	r7, #0
 80020d4:	d143      	bne.n	800215e <_malloc_r+0xd6>
 80020d6:	2c00      	cmp	r4, #0
 80020d8:	d04b      	beq.n	8002172 <_malloc_r+0xea>
 80020da:	6823      	ldr	r3, [r4, #0]
 80020dc:	4639      	mov	r1, r7
 80020de:	4630      	mov	r0, r6
 80020e0:	eb04 0903 	add.w	r9, r4, r3
 80020e4:	f000 fc02 	bl	80028ec <_sbrk_r>
 80020e8:	4581      	cmp	r9, r0
 80020ea:	d142      	bne.n	8002172 <_malloc_r+0xea>
 80020ec:	6821      	ldr	r1, [r4, #0]
 80020ee:	4630      	mov	r0, r6
 80020f0:	1a6d      	subs	r5, r5, r1
 80020f2:	4629      	mov	r1, r5
 80020f4:	f7ff ffa6 	bl	8002044 <sbrk_aligned>
 80020f8:	3001      	adds	r0, #1
 80020fa:	d03a      	beq.n	8002172 <_malloc_r+0xea>
 80020fc:	6823      	ldr	r3, [r4, #0]
 80020fe:	442b      	add	r3, r5
 8002100:	6023      	str	r3, [r4, #0]
 8002102:	f8d8 3000 	ldr.w	r3, [r8]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	bb62      	cbnz	r2, 8002164 <_malloc_r+0xdc>
 800210a:	f8c8 7000 	str.w	r7, [r8]
 800210e:	e00f      	b.n	8002130 <_malloc_r+0xa8>
 8002110:	6822      	ldr	r2, [r4, #0]
 8002112:	1b52      	subs	r2, r2, r5
 8002114:	d420      	bmi.n	8002158 <_malloc_r+0xd0>
 8002116:	2a0b      	cmp	r2, #11
 8002118:	d917      	bls.n	800214a <_malloc_r+0xc2>
 800211a:	1961      	adds	r1, r4, r5
 800211c:	42a3      	cmp	r3, r4
 800211e:	6025      	str	r5, [r4, #0]
 8002120:	bf18      	it	ne
 8002122:	6059      	strne	r1, [r3, #4]
 8002124:	6863      	ldr	r3, [r4, #4]
 8002126:	bf08      	it	eq
 8002128:	f8c8 1000 	streq.w	r1, [r8]
 800212c:	5162      	str	r2, [r4, r5]
 800212e:	604b      	str	r3, [r1, #4]
 8002130:	4630      	mov	r0, r6
 8002132:	f000 fa67 	bl	8002604 <__malloc_unlock>
 8002136:	f104 000b 	add.w	r0, r4, #11
 800213a:	1d23      	adds	r3, r4, #4
 800213c:	f020 0007 	bic.w	r0, r0, #7
 8002140:	1ac2      	subs	r2, r0, r3
 8002142:	bf1c      	itt	ne
 8002144:	1a1b      	subne	r3, r3, r0
 8002146:	50a3      	strne	r3, [r4, r2]
 8002148:	e7af      	b.n	80020aa <_malloc_r+0x22>
 800214a:	6862      	ldr	r2, [r4, #4]
 800214c:	42a3      	cmp	r3, r4
 800214e:	bf0c      	ite	eq
 8002150:	f8c8 2000 	streq.w	r2, [r8]
 8002154:	605a      	strne	r2, [r3, #4]
 8002156:	e7eb      	b.n	8002130 <_malloc_r+0xa8>
 8002158:	4623      	mov	r3, r4
 800215a:	6864      	ldr	r4, [r4, #4]
 800215c:	e7ae      	b.n	80020bc <_malloc_r+0x34>
 800215e:	463c      	mov	r4, r7
 8002160:	687f      	ldr	r7, [r7, #4]
 8002162:	e7b6      	b.n	80020d2 <_malloc_r+0x4a>
 8002164:	461a      	mov	r2, r3
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	42a3      	cmp	r3, r4
 800216a:	d1fb      	bne.n	8002164 <_malloc_r+0xdc>
 800216c:	2300      	movs	r3, #0
 800216e:	6053      	str	r3, [r2, #4]
 8002170:	e7de      	b.n	8002130 <_malloc_r+0xa8>
 8002172:	230c      	movs	r3, #12
 8002174:	4630      	mov	r0, r6
 8002176:	6033      	str	r3, [r6, #0]
 8002178:	f000 fa44 	bl	8002604 <__malloc_unlock>
 800217c:	e794      	b.n	80020a8 <_malloc_r+0x20>
 800217e:	6005      	str	r5, [r0, #0]
 8002180:	e7d6      	b.n	8002130 <_malloc_r+0xa8>
 8002182:	bf00      	nop
 8002184:	20000214 	.word	0x20000214

08002188 <_printf_common>:
 8002188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800218c:	4616      	mov	r6, r2
 800218e:	4698      	mov	r8, r3
 8002190:	688a      	ldr	r2, [r1, #8]
 8002192:	690b      	ldr	r3, [r1, #16]
 8002194:	4607      	mov	r7, r0
 8002196:	4293      	cmp	r3, r2
 8002198:	bfb8      	it	lt
 800219a:	4613      	movlt	r3, r2
 800219c:	6033      	str	r3, [r6, #0]
 800219e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80021a2:	460c      	mov	r4, r1
 80021a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80021a8:	b10a      	cbz	r2, 80021ae <_printf_common+0x26>
 80021aa:	3301      	adds	r3, #1
 80021ac:	6033      	str	r3, [r6, #0]
 80021ae:	6823      	ldr	r3, [r4, #0]
 80021b0:	0699      	lsls	r1, r3, #26
 80021b2:	bf42      	ittt	mi
 80021b4:	6833      	ldrmi	r3, [r6, #0]
 80021b6:	3302      	addmi	r3, #2
 80021b8:	6033      	strmi	r3, [r6, #0]
 80021ba:	6825      	ldr	r5, [r4, #0]
 80021bc:	f015 0506 	ands.w	r5, r5, #6
 80021c0:	d106      	bne.n	80021d0 <_printf_common+0x48>
 80021c2:	f104 0a19 	add.w	sl, r4, #25
 80021c6:	68e3      	ldr	r3, [r4, #12]
 80021c8:	6832      	ldr	r2, [r6, #0]
 80021ca:	1a9b      	subs	r3, r3, r2
 80021cc:	42ab      	cmp	r3, r5
 80021ce:	dc2b      	bgt.n	8002228 <_printf_common+0xa0>
 80021d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80021d4:	6822      	ldr	r2, [r4, #0]
 80021d6:	3b00      	subs	r3, #0
 80021d8:	bf18      	it	ne
 80021da:	2301      	movne	r3, #1
 80021dc:	0692      	lsls	r2, r2, #26
 80021de:	d430      	bmi.n	8002242 <_printf_common+0xba>
 80021e0:	4641      	mov	r1, r8
 80021e2:	4638      	mov	r0, r7
 80021e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80021e8:	47c8      	blx	r9
 80021ea:	3001      	adds	r0, #1
 80021ec:	d023      	beq.n	8002236 <_printf_common+0xae>
 80021ee:	6823      	ldr	r3, [r4, #0]
 80021f0:	6922      	ldr	r2, [r4, #16]
 80021f2:	f003 0306 	and.w	r3, r3, #6
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	bf14      	ite	ne
 80021fa:	2500      	movne	r5, #0
 80021fc:	6833      	ldreq	r3, [r6, #0]
 80021fe:	f04f 0600 	mov.w	r6, #0
 8002202:	bf08      	it	eq
 8002204:	68e5      	ldreq	r5, [r4, #12]
 8002206:	f104 041a 	add.w	r4, r4, #26
 800220a:	bf08      	it	eq
 800220c:	1aed      	subeq	r5, r5, r3
 800220e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002212:	bf08      	it	eq
 8002214:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002218:	4293      	cmp	r3, r2
 800221a:	bfc4      	itt	gt
 800221c:	1a9b      	subgt	r3, r3, r2
 800221e:	18ed      	addgt	r5, r5, r3
 8002220:	42b5      	cmp	r5, r6
 8002222:	d11a      	bne.n	800225a <_printf_common+0xd2>
 8002224:	2000      	movs	r0, #0
 8002226:	e008      	b.n	800223a <_printf_common+0xb2>
 8002228:	2301      	movs	r3, #1
 800222a:	4652      	mov	r2, sl
 800222c:	4641      	mov	r1, r8
 800222e:	4638      	mov	r0, r7
 8002230:	47c8      	blx	r9
 8002232:	3001      	adds	r0, #1
 8002234:	d103      	bne.n	800223e <_printf_common+0xb6>
 8002236:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800223a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800223e:	3501      	adds	r5, #1
 8002240:	e7c1      	b.n	80021c6 <_printf_common+0x3e>
 8002242:	2030      	movs	r0, #48	@ 0x30
 8002244:	18e1      	adds	r1, r4, r3
 8002246:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002250:	4422      	add	r2, r4
 8002252:	3302      	adds	r3, #2
 8002254:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002258:	e7c2      	b.n	80021e0 <_printf_common+0x58>
 800225a:	2301      	movs	r3, #1
 800225c:	4622      	mov	r2, r4
 800225e:	4641      	mov	r1, r8
 8002260:	4638      	mov	r0, r7
 8002262:	47c8      	blx	r9
 8002264:	3001      	adds	r0, #1
 8002266:	d0e6      	beq.n	8002236 <_printf_common+0xae>
 8002268:	3601      	adds	r6, #1
 800226a:	e7d9      	b.n	8002220 <_printf_common+0x98>

0800226c <_printf_i>:
 800226c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002270:	7e0f      	ldrb	r7, [r1, #24]
 8002272:	4691      	mov	r9, r2
 8002274:	2f78      	cmp	r7, #120	@ 0x78
 8002276:	4680      	mov	r8, r0
 8002278:	460c      	mov	r4, r1
 800227a:	469a      	mov	sl, r3
 800227c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800227e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002282:	d807      	bhi.n	8002294 <_printf_i+0x28>
 8002284:	2f62      	cmp	r7, #98	@ 0x62
 8002286:	d80a      	bhi.n	800229e <_printf_i+0x32>
 8002288:	2f00      	cmp	r7, #0
 800228a:	f000 80d1 	beq.w	8002430 <_printf_i+0x1c4>
 800228e:	2f58      	cmp	r7, #88	@ 0x58
 8002290:	f000 80b8 	beq.w	8002404 <_printf_i+0x198>
 8002294:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002298:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800229c:	e03a      	b.n	8002314 <_printf_i+0xa8>
 800229e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80022a2:	2b15      	cmp	r3, #21
 80022a4:	d8f6      	bhi.n	8002294 <_printf_i+0x28>
 80022a6:	a101      	add	r1, pc, #4	@ (adr r1, 80022ac <_printf_i+0x40>)
 80022a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80022ac:	08002305 	.word	0x08002305
 80022b0:	08002319 	.word	0x08002319
 80022b4:	08002295 	.word	0x08002295
 80022b8:	08002295 	.word	0x08002295
 80022bc:	08002295 	.word	0x08002295
 80022c0:	08002295 	.word	0x08002295
 80022c4:	08002319 	.word	0x08002319
 80022c8:	08002295 	.word	0x08002295
 80022cc:	08002295 	.word	0x08002295
 80022d0:	08002295 	.word	0x08002295
 80022d4:	08002295 	.word	0x08002295
 80022d8:	08002417 	.word	0x08002417
 80022dc:	08002343 	.word	0x08002343
 80022e0:	080023d1 	.word	0x080023d1
 80022e4:	08002295 	.word	0x08002295
 80022e8:	08002295 	.word	0x08002295
 80022ec:	08002439 	.word	0x08002439
 80022f0:	08002295 	.word	0x08002295
 80022f4:	08002343 	.word	0x08002343
 80022f8:	08002295 	.word	0x08002295
 80022fc:	08002295 	.word	0x08002295
 8002300:	080023d9 	.word	0x080023d9
 8002304:	6833      	ldr	r3, [r6, #0]
 8002306:	1d1a      	adds	r2, r3, #4
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6032      	str	r2, [r6, #0]
 800230c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002310:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002314:	2301      	movs	r3, #1
 8002316:	e09c      	b.n	8002452 <_printf_i+0x1e6>
 8002318:	6833      	ldr	r3, [r6, #0]
 800231a:	6820      	ldr	r0, [r4, #0]
 800231c:	1d19      	adds	r1, r3, #4
 800231e:	6031      	str	r1, [r6, #0]
 8002320:	0606      	lsls	r6, r0, #24
 8002322:	d501      	bpl.n	8002328 <_printf_i+0xbc>
 8002324:	681d      	ldr	r5, [r3, #0]
 8002326:	e003      	b.n	8002330 <_printf_i+0xc4>
 8002328:	0645      	lsls	r5, r0, #25
 800232a:	d5fb      	bpl.n	8002324 <_printf_i+0xb8>
 800232c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002330:	2d00      	cmp	r5, #0
 8002332:	da03      	bge.n	800233c <_printf_i+0xd0>
 8002334:	232d      	movs	r3, #45	@ 0x2d
 8002336:	426d      	negs	r5, r5
 8002338:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800233c:	230a      	movs	r3, #10
 800233e:	4858      	ldr	r0, [pc, #352]	@ (80024a0 <_printf_i+0x234>)
 8002340:	e011      	b.n	8002366 <_printf_i+0xfa>
 8002342:	6821      	ldr	r1, [r4, #0]
 8002344:	6833      	ldr	r3, [r6, #0]
 8002346:	0608      	lsls	r0, r1, #24
 8002348:	f853 5b04 	ldr.w	r5, [r3], #4
 800234c:	d402      	bmi.n	8002354 <_printf_i+0xe8>
 800234e:	0649      	lsls	r1, r1, #25
 8002350:	bf48      	it	mi
 8002352:	b2ad      	uxthmi	r5, r5
 8002354:	2f6f      	cmp	r7, #111	@ 0x6f
 8002356:	6033      	str	r3, [r6, #0]
 8002358:	bf14      	ite	ne
 800235a:	230a      	movne	r3, #10
 800235c:	2308      	moveq	r3, #8
 800235e:	4850      	ldr	r0, [pc, #320]	@ (80024a0 <_printf_i+0x234>)
 8002360:	2100      	movs	r1, #0
 8002362:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002366:	6866      	ldr	r6, [r4, #4]
 8002368:	2e00      	cmp	r6, #0
 800236a:	60a6      	str	r6, [r4, #8]
 800236c:	db05      	blt.n	800237a <_printf_i+0x10e>
 800236e:	6821      	ldr	r1, [r4, #0]
 8002370:	432e      	orrs	r6, r5
 8002372:	f021 0104 	bic.w	r1, r1, #4
 8002376:	6021      	str	r1, [r4, #0]
 8002378:	d04b      	beq.n	8002412 <_printf_i+0x1a6>
 800237a:	4616      	mov	r6, r2
 800237c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002380:	fb03 5711 	mls	r7, r3, r1, r5
 8002384:	5dc7      	ldrb	r7, [r0, r7]
 8002386:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800238a:	462f      	mov	r7, r5
 800238c:	42bb      	cmp	r3, r7
 800238e:	460d      	mov	r5, r1
 8002390:	d9f4      	bls.n	800237c <_printf_i+0x110>
 8002392:	2b08      	cmp	r3, #8
 8002394:	d10b      	bne.n	80023ae <_printf_i+0x142>
 8002396:	6823      	ldr	r3, [r4, #0]
 8002398:	07df      	lsls	r7, r3, #31
 800239a:	d508      	bpl.n	80023ae <_printf_i+0x142>
 800239c:	6923      	ldr	r3, [r4, #16]
 800239e:	6861      	ldr	r1, [r4, #4]
 80023a0:	4299      	cmp	r1, r3
 80023a2:	bfde      	ittt	le
 80023a4:	2330      	movle	r3, #48	@ 0x30
 80023a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80023aa:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80023ae:	1b92      	subs	r2, r2, r6
 80023b0:	6122      	str	r2, [r4, #16]
 80023b2:	464b      	mov	r3, r9
 80023b4:	4621      	mov	r1, r4
 80023b6:	4640      	mov	r0, r8
 80023b8:	f8cd a000 	str.w	sl, [sp]
 80023bc:	aa03      	add	r2, sp, #12
 80023be:	f7ff fee3 	bl	8002188 <_printf_common>
 80023c2:	3001      	adds	r0, #1
 80023c4:	d14a      	bne.n	800245c <_printf_i+0x1f0>
 80023c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80023ca:	b004      	add	sp, #16
 80023cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023d0:	6823      	ldr	r3, [r4, #0]
 80023d2:	f043 0320 	orr.w	r3, r3, #32
 80023d6:	6023      	str	r3, [r4, #0]
 80023d8:	2778      	movs	r7, #120	@ 0x78
 80023da:	4832      	ldr	r0, [pc, #200]	@ (80024a4 <_printf_i+0x238>)
 80023dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80023e0:	6823      	ldr	r3, [r4, #0]
 80023e2:	6831      	ldr	r1, [r6, #0]
 80023e4:	061f      	lsls	r7, r3, #24
 80023e6:	f851 5b04 	ldr.w	r5, [r1], #4
 80023ea:	d402      	bmi.n	80023f2 <_printf_i+0x186>
 80023ec:	065f      	lsls	r7, r3, #25
 80023ee:	bf48      	it	mi
 80023f0:	b2ad      	uxthmi	r5, r5
 80023f2:	6031      	str	r1, [r6, #0]
 80023f4:	07d9      	lsls	r1, r3, #31
 80023f6:	bf44      	itt	mi
 80023f8:	f043 0320 	orrmi.w	r3, r3, #32
 80023fc:	6023      	strmi	r3, [r4, #0]
 80023fe:	b11d      	cbz	r5, 8002408 <_printf_i+0x19c>
 8002400:	2310      	movs	r3, #16
 8002402:	e7ad      	b.n	8002360 <_printf_i+0xf4>
 8002404:	4826      	ldr	r0, [pc, #152]	@ (80024a0 <_printf_i+0x234>)
 8002406:	e7e9      	b.n	80023dc <_printf_i+0x170>
 8002408:	6823      	ldr	r3, [r4, #0]
 800240a:	f023 0320 	bic.w	r3, r3, #32
 800240e:	6023      	str	r3, [r4, #0]
 8002410:	e7f6      	b.n	8002400 <_printf_i+0x194>
 8002412:	4616      	mov	r6, r2
 8002414:	e7bd      	b.n	8002392 <_printf_i+0x126>
 8002416:	6833      	ldr	r3, [r6, #0]
 8002418:	6825      	ldr	r5, [r4, #0]
 800241a:	1d18      	adds	r0, r3, #4
 800241c:	6961      	ldr	r1, [r4, #20]
 800241e:	6030      	str	r0, [r6, #0]
 8002420:	062e      	lsls	r6, r5, #24
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	d501      	bpl.n	800242a <_printf_i+0x1be>
 8002426:	6019      	str	r1, [r3, #0]
 8002428:	e002      	b.n	8002430 <_printf_i+0x1c4>
 800242a:	0668      	lsls	r0, r5, #25
 800242c:	d5fb      	bpl.n	8002426 <_printf_i+0x1ba>
 800242e:	8019      	strh	r1, [r3, #0]
 8002430:	2300      	movs	r3, #0
 8002432:	4616      	mov	r6, r2
 8002434:	6123      	str	r3, [r4, #16]
 8002436:	e7bc      	b.n	80023b2 <_printf_i+0x146>
 8002438:	6833      	ldr	r3, [r6, #0]
 800243a:	2100      	movs	r1, #0
 800243c:	1d1a      	adds	r2, r3, #4
 800243e:	6032      	str	r2, [r6, #0]
 8002440:	681e      	ldr	r6, [r3, #0]
 8002442:	6862      	ldr	r2, [r4, #4]
 8002444:	4630      	mov	r0, r6
 8002446:	f000 fa95 	bl	8002974 <memchr>
 800244a:	b108      	cbz	r0, 8002450 <_printf_i+0x1e4>
 800244c:	1b80      	subs	r0, r0, r6
 800244e:	6060      	str	r0, [r4, #4]
 8002450:	6863      	ldr	r3, [r4, #4]
 8002452:	6123      	str	r3, [r4, #16]
 8002454:	2300      	movs	r3, #0
 8002456:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800245a:	e7aa      	b.n	80023b2 <_printf_i+0x146>
 800245c:	4632      	mov	r2, r6
 800245e:	4649      	mov	r1, r9
 8002460:	4640      	mov	r0, r8
 8002462:	6923      	ldr	r3, [r4, #16]
 8002464:	47d0      	blx	sl
 8002466:	3001      	adds	r0, #1
 8002468:	d0ad      	beq.n	80023c6 <_printf_i+0x15a>
 800246a:	6823      	ldr	r3, [r4, #0]
 800246c:	079b      	lsls	r3, r3, #30
 800246e:	d413      	bmi.n	8002498 <_printf_i+0x22c>
 8002470:	68e0      	ldr	r0, [r4, #12]
 8002472:	9b03      	ldr	r3, [sp, #12]
 8002474:	4298      	cmp	r0, r3
 8002476:	bfb8      	it	lt
 8002478:	4618      	movlt	r0, r3
 800247a:	e7a6      	b.n	80023ca <_printf_i+0x15e>
 800247c:	2301      	movs	r3, #1
 800247e:	4632      	mov	r2, r6
 8002480:	4649      	mov	r1, r9
 8002482:	4640      	mov	r0, r8
 8002484:	47d0      	blx	sl
 8002486:	3001      	adds	r0, #1
 8002488:	d09d      	beq.n	80023c6 <_printf_i+0x15a>
 800248a:	3501      	adds	r5, #1
 800248c:	68e3      	ldr	r3, [r4, #12]
 800248e:	9903      	ldr	r1, [sp, #12]
 8002490:	1a5b      	subs	r3, r3, r1
 8002492:	42ab      	cmp	r3, r5
 8002494:	dcf2      	bgt.n	800247c <_printf_i+0x210>
 8002496:	e7eb      	b.n	8002470 <_printf_i+0x204>
 8002498:	2500      	movs	r5, #0
 800249a:	f104 0619 	add.w	r6, r4, #25
 800249e:	e7f5      	b.n	800248c <_printf_i+0x220>
 80024a0:	08002ad9 	.word	0x08002ad9
 80024a4:	08002aea 	.word	0x08002aea

080024a8 <__sflush_r>:
 80024a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80024ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ae:	0716      	lsls	r6, r2, #28
 80024b0:	4605      	mov	r5, r0
 80024b2:	460c      	mov	r4, r1
 80024b4:	d454      	bmi.n	8002560 <__sflush_r+0xb8>
 80024b6:	684b      	ldr	r3, [r1, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	dc02      	bgt.n	80024c2 <__sflush_r+0x1a>
 80024bc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80024be:	2b00      	cmp	r3, #0
 80024c0:	dd48      	ble.n	8002554 <__sflush_r+0xac>
 80024c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80024c4:	2e00      	cmp	r6, #0
 80024c6:	d045      	beq.n	8002554 <__sflush_r+0xac>
 80024c8:	2300      	movs	r3, #0
 80024ca:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80024ce:	682f      	ldr	r7, [r5, #0]
 80024d0:	6a21      	ldr	r1, [r4, #32]
 80024d2:	602b      	str	r3, [r5, #0]
 80024d4:	d030      	beq.n	8002538 <__sflush_r+0x90>
 80024d6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80024d8:	89a3      	ldrh	r3, [r4, #12]
 80024da:	0759      	lsls	r1, r3, #29
 80024dc:	d505      	bpl.n	80024ea <__sflush_r+0x42>
 80024de:	6863      	ldr	r3, [r4, #4]
 80024e0:	1ad2      	subs	r2, r2, r3
 80024e2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80024e4:	b10b      	cbz	r3, 80024ea <__sflush_r+0x42>
 80024e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80024e8:	1ad2      	subs	r2, r2, r3
 80024ea:	2300      	movs	r3, #0
 80024ec:	4628      	mov	r0, r5
 80024ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80024f0:	6a21      	ldr	r1, [r4, #32]
 80024f2:	47b0      	blx	r6
 80024f4:	1c43      	adds	r3, r0, #1
 80024f6:	89a3      	ldrh	r3, [r4, #12]
 80024f8:	d106      	bne.n	8002508 <__sflush_r+0x60>
 80024fa:	6829      	ldr	r1, [r5, #0]
 80024fc:	291d      	cmp	r1, #29
 80024fe:	d82b      	bhi.n	8002558 <__sflush_r+0xb0>
 8002500:	4a28      	ldr	r2, [pc, #160]	@ (80025a4 <__sflush_r+0xfc>)
 8002502:	40ca      	lsrs	r2, r1
 8002504:	07d6      	lsls	r6, r2, #31
 8002506:	d527      	bpl.n	8002558 <__sflush_r+0xb0>
 8002508:	2200      	movs	r2, #0
 800250a:	6062      	str	r2, [r4, #4]
 800250c:	6922      	ldr	r2, [r4, #16]
 800250e:	04d9      	lsls	r1, r3, #19
 8002510:	6022      	str	r2, [r4, #0]
 8002512:	d504      	bpl.n	800251e <__sflush_r+0x76>
 8002514:	1c42      	adds	r2, r0, #1
 8002516:	d101      	bne.n	800251c <__sflush_r+0x74>
 8002518:	682b      	ldr	r3, [r5, #0]
 800251a:	b903      	cbnz	r3, 800251e <__sflush_r+0x76>
 800251c:	6560      	str	r0, [r4, #84]	@ 0x54
 800251e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002520:	602f      	str	r7, [r5, #0]
 8002522:	b1b9      	cbz	r1, 8002554 <__sflush_r+0xac>
 8002524:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002528:	4299      	cmp	r1, r3
 800252a:	d002      	beq.n	8002532 <__sflush_r+0x8a>
 800252c:	4628      	mov	r0, r5
 800252e:	f000 fa2f 	bl	8002990 <_free_r>
 8002532:	2300      	movs	r3, #0
 8002534:	6363      	str	r3, [r4, #52]	@ 0x34
 8002536:	e00d      	b.n	8002554 <__sflush_r+0xac>
 8002538:	2301      	movs	r3, #1
 800253a:	4628      	mov	r0, r5
 800253c:	47b0      	blx	r6
 800253e:	4602      	mov	r2, r0
 8002540:	1c50      	adds	r0, r2, #1
 8002542:	d1c9      	bne.n	80024d8 <__sflush_r+0x30>
 8002544:	682b      	ldr	r3, [r5, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0c6      	beq.n	80024d8 <__sflush_r+0x30>
 800254a:	2b1d      	cmp	r3, #29
 800254c:	d001      	beq.n	8002552 <__sflush_r+0xaa>
 800254e:	2b16      	cmp	r3, #22
 8002550:	d11d      	bne.n	800258e <__sflush_r+0xe6>
 8002552:	602f      	str	r7, [r5, #0]
 8002554:	2000      	movs	r0, #0
 8002556:	e021      	b.n	800259c <__sflush_r+0xf4>
 8002558:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800255c:	b21b      	sxth	r3, r3
 800255e:	e01a      	b.n	8002596 <__sflush_r+0xee>
 8002560:	690f      	ldr	r7, [r1, #16]
 8002562:	2f00      	cmp	r7, #0
 8002564:	d0f6      	beq.n	8002554 <__sflush_r+0xac>
 8002566:	0793      	lsls	r3, r2, #30
 8002568:	bf18      	it	ne
 800256a:	2300      	movne	r3, #0
 800256c:	680e      	ldr	r6, [r1, #0]
 800256e:	bf08      	it	eq
 8002570:	694b      	ldreq	r3, [r1, #20]
 8002572:	1bf6      	subs	r6, r6, r7
 8002574:	600f      	str	r7, [r1, #0]
 8002576:	608b      	str	r3, [r1, #8]
 8002578:	2e00      	cmp	r6, #0
 800257a:	ddeb      	ble.n	8002554 <__sflush_r+0xac>
 800257c:	4633      	mov	r3, r6
 800257e:	463a      	mov	r2, r7
 8002580:	4628      	mov	r0, r5
 8002582:	6a21      	ldr	r1, [r4, #32]
 8002584:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002588:	47e0      	blx	ip
 800258a:	2800      	cmp	r0, #0
 800258c:	dc07      	bgt.n	800259e <__sflush_r+0xf6>
 800258e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002592:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002596:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800259a:	81a3      	strh	r3, [r4, #12]
 800259c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800259e:	4407      	add	r7, r0
 80025a0:	1a36      	subs	r6, r6, r0
 80025a2:	e7e9      	b.n	8002578 <__sflush_r+0xd0>
 80025a4:	20400001 	.word	0x20400001

080025a8 <_fflush_r>:
 80025a8:	b538      	push	{r3, r4, r5, lr}
 80025aa:	690b      	ldr	r3, [r1, #16]
 80025ac:	4605      	mov	r5, r0
 80025ae:	460c      	mov	r4, r1
 80025b0:	b913      	cbnz	r3, 80025b8 <_fflush_r+0x10>
 80025b2:	2500      	movs	r5, #0
 80025b4:	4628      	mov	r0, r5
 80025b6:	bd38      	pop	{r3, r4, r5, pc}
 80025b8:	b118      	cbz	r0, 80025c2 <_fflush_r+0x1a>
 80025ba:	6a03      	ldr	r3, [r0, #32]
 80025bc:	b90b      	cbnz	r3, 80025c2 <_fflush_r+0x1a>
 80025be:	f7ff fb27 	bl	8001c10 <__sinit>
 80025c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0f3      	beq.n	80025b2 <_fflush_r+0xa>
 80025ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80025cc:	07d0      	lsls	r0, r2, #31
 80025ce:	d404      	bmi.n	80025da <_fflush_r+0x32>
 80025d0:	0599      	lsls	r1, r3, #22
 80025d2:	d402      	bmi.n	80025da <_fflush_r+0x32>
 80025d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80025d6:	f7ff fbf4 	bl	8001dc2 <__retarget_lock_acquire_recursive>
 80025da:	4628      	mov	r0, r5
 80025dc:	4621      	mov	r1, r4
 80025de:	f7ff ff63 	bl	80024a8 <__sflush_r>
 80025e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80025e4:	4605      	mov	r5, r0
 80025e6:	07da      	lsls	r2, r3, #31
 80025e8:	d4e4      	bmi.n	80025b4 <_fflush_r+0xc>
 80025ea:	89a3      	ldrh	r3, [r4, #12]
 80025ec:	059b      	lsls	r3, r3, #22
 80025ee:	d4e1      	bmi.n	80025b4 <_fflush_r+0xc>
 80025f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80025f2:	f7ff fbe7 	bl	8001dc4 <__retarget_lock_release_recursive>
 80025f6:	e7dd      	b.n	80025b4 <_fflush_r+0xc>

080025f8 <__malloc_lock>:
 80025f8:	4801      	ldr	r0, [pc, #4]	@ (8002600 <__malloc_lock+0x8>)
 80025fa:	f7ff bbe2 	b.w	8001dc2 <__retarget_lock_acquire_recursive>
 80025fe:	bf00      	nop
 8002600:	2000020c 	.word	0x2000020c

08002604 <__malloc_unlock>:
 8002604:	4801      	ldr	r0, [pc, #4]	@ (800260c <__malloc_unlock+0x8>)
 8002606:	f7ff bbdd 	b.w	8001dc4 <__retarget_lock_release_recursive>
 800260a:	bf00      	nop
 800260c:	2000020c 	.word	0x2000020c

08002610 <__sread>:
 8002610:	b510      	push	{r4, lr}
 8002612:	460c      	mov	r4, r1
 8002614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002618:	f000 f956 	bl	80028c8 <_read_r>
 800261c:	2800      	cmp	r0, #0
 800261e:	bfab      	itete	ge
 8002620:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002622:	89a3      	ldrhlt	r3, [r4, #12]
 8002624:	181b      	addge	r3, r3, r0
 8002626:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800262a:	bfac      	ite	ge
 800262c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800262e:	81a3      	strhlt	r3, [r4, #12]
 8002630:	bd10      	pop	{r4, pc}

08002632 <__swrite>:
 8002632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002636:	461f      	mov	r7, r3
 8002638:	898b      	ldrh	r3, [r1, #12]
 800263a:	4605      	mov	r5, r0
 800263c:	05db      	lsls	r3, r3, #23
 800263e:	460c      	mov	r4, r1
 8002640:	4616      	mov	r6, r2
 8002642:	d505      	bpl.n	8002650 <__swrite+0x1e>
 8002644:	2302      	movs	r3, #2
 8002646:	2200      	movs	r2, #0
 8002648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800264c:	f000 f92a 	bl	80028a4 <_lseek_r>
 8002650:	89a3      	ldrh	r3, [r4, #12]
 8002652:	4632      	mov	r2, r6
 8002654:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002658:	81a3      	strh	r3, [r4, #12]
 800265a:	4628      	mov	r0, r5
 800265c:	463b      	mov	r3, r7
 800265e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002666:	f000 b951 	b.w	800290c <_write_r>

0800266a <__sseek>:
 800266a:	b510      	push	{r4, lr}
 800266c:	460c      	mov	r4, r1
 800266e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002672:	f000 f917 	bl	80028a4 <_lseek_r>
 8002676:	1c43      	adds	r3, r0, #1
 8002678:	89a3      	ldrh	r3, [r4, #12]
 800267a:	bf15      	itete	ne
 800267c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800267e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002682:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002686:	81a3      	strheq	r3, [r4, #12]
 8002688:	bf18      	it	ne
 800268a:	81a3      	strhne	r3, [r4, #12]
 800268c:	bd10      	pop	{r4, pc}

0800268e <__sclose>:
 800268e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002692:	f000 b94d 	b.w	8002930 <_close_r>

08002696 <__swbuf_r>:
 8002696:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002698:	460e      	mov	r6, r1
 800269a:	4614      	mov	r4, r2
 800269c:	4605      	mov	r5, r0
 800269e:	b118      	cbz	r0, 80026a8 <__swbuf_r+0x12>
 80026a0:	6a03      	ldr	r3, [r0, #32]
 80026a2:	b90b      	cbnz	r3, 80026a8 <__swbuf_r+0x12>
 80026a4:	f7ff fab4 	bl	8001c10 <__sinit>
 80026a8:	69a3      	ldr	r3, [r4, #24]
 80026aa:	60a3      	str	r3, [r4, #8]
 80026ac:	89a3      	ldrh	r3, [r4, #12]
 80026ae:	071a      	lsls	r2, r3, #28
 80026b0:	d501      	bpl.n	80026b6 <__swbuf_r+0x20>
 80026b2:	6923      	ldr	r3, [r4, #16]
 80026b4:	b943      	cbnz	r3, 80026c8 <__swbuf_r+0x32>
 80026b6:	4621      	mov	r1, r4
 80026b8:	4628      	mov	r0, r5
 80026ba:	f000 f82b 	bl	8002714 <__swsetup_r>
 80026be:	b118      	cbz	r0, 80026c8 <__swbuf_r+0x32>
 80026c0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80026c4:	4638      	mov	r0, r7
 80026c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026c8:	6823      	ldr	r3, [r4, #0]
 80026ca:	6922      	ldr	r2, [r4, #16]
 80026cc:	b2f6      	uxtb	r6, r6
 80026ce:	1a98      	subs	r0, r3, r2
 80026d0:	6963      	ldr	r3, [r4, #20]
 80026d2:	4637      	mov	r7, r6
 80026d4:	4283      	cmp	r3, r0
 80026d6:	dc05      	bgt.n	80026e4 <__swbuf_r+0x4e>
 80026d8:	4621      	mov	r1, r4
 80026da:	4628      	mov	r0, r5
 80026dc:	f7ff ff64 	bl	80025a8 <_fflush_r>
 80026e0:	2800      	cmp	r0, #0
 80026e2:	d1ed      	bne.n	80026c0 <__swbuf_r+0x2a>
 80026e4:	68a3      	ldr	r3, [r4, #8]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	60a3      	str	r3, [r4, #8]
 80026ea:	6823      	ldr	r3, [r4, #0]
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	6022      	str	r2, [r4, #0]
 80026f0:	701e      	strb	r6, [r3, #0]
 80026f2:	6962      	ldr	r2, [r4, #20]
 80026f4:	1c43      	adds	r3, r0, #1
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d004      	beq.n	8002704 <__swbuf_r+0x6e>
 80026fa:	89a3      	ldrh	r3, [r4, #12]
 80026fc:	07db      	lsls	r3, r3, #31
 80026fe:	d5e1      	bpl.n	80026c4 <__swbuf_r+0x2e>
 8002700:	2e0a      	cmp	r6, #10
 8002702:	d1df      	bne.n	80026c4 <__swbuf_r+0x2e>
 8002704:	4621      	mov	r1, r4
 8002706:	4628      	mov	r0, r5
 8002708:	f7ff ff4e 	bl	80025a8 <_fflush_r>
 800270c:	2800      	cmp	r0, #0
 800270e:	d0d9      	beq.n	80026c4 <__swbuf_r+0x2e>
 8002710:	e7d6      	b.n	80026c0 <__swbuf_r+0x2a>
	...

08002714 <__swsetup_r>:
 8002714:	b538      	push	{r3, r4, r5, lr}
 8002716:	4b29      	ldr	r3, [pc, #164]	@ (80027bc <__swsetup_r+0xa8>)
 8002718:	4605      	mov	r5, r0
 800271a:	6818      	ldr	r0, [r3, #0]
 800271c:	460c      	mov	r4, r1
 800271e:	b118      	cbz	r0, 8002728 <__swsetup_r+0x14>
 8002720:	6a03      	ldr	r3, [r0, #32]
 8002722:	b90b      	cbnz	r3, 8002728 <__swsetup_r+0x14>
 8002724:	f7ff fa74 	bl	8001c10 <__sinit>
 8002728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800272c:	0719      	lsls	r1, r3, #28
 800272e:	d422      	bmi.n	8002776 <__swsetup_r+0x62>
 8002730:	06da      	lsls	r2, r3, #27
 8002732:	d407      	bmi.n	8002744 <__swsetup_r+0x30>
 8002734:	2209      	movs	r2, #9
 8002736:	602a      	str	r2, [r5, #0]
 8002738:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800273c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002740:	81a3      	strh	r3, [r4, #12]
 8002742:	e033      	b.n	80027ac <__swsetup_r+0x98>
 8002744:	0758      	lsls	r0, r3, #29
 8002746:	d512      	bpl.n	800276e <__swsetup_r+0x5a>
 8002748:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800274a:	b141      	cbz	r1, 800275e <__swsetup_r+0x4a>
 800274c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002750:	4299      	cmp	r1, r3
 8002752:	d002      	beq.n	800275a <__swsetup_r+0x46>
 8002754:	4628      	mov	r0, r5
 8002756:	f000 f91b 	bl	8002990 <_free_r>
 800275a:	2300      	movs	r3, #0
 800275c:	6363      	str	r3, [r4, #52]	@ 0x34
 800275e:	89a3      	ldrh	r3, [r4, #12]
 8002760:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002764:	81a3      	strh	r3, [r4, #12]
 8002766:	2300      	movs	r3, #0
 8002768:	6063      	str	r3, [r4, #4]
 800276a:	6923      	ldr	r3, [r4, #16]
 800276c:	6023      	str	r3, [r4, #0]
 800276e:	89a3      	ldrh	r3, [r4, #12]
 8002770:	f043 0308 	orr.w	r3, r3, #8
 8002774:	81a3      	strh	r3, [r4, #12]
 8002776:	6923      	ldr	r3, [r4, #16]
 8002778:	b94b      	cbnz	r3, 800278e <__swsetup_r+0x7a>
 800277a:	89a3      	ldrh	r3, [r4, #12]
 800277c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002780:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002784:	d003      	beq.n	800278e <__swsetup_r+0x7a>
 8002786:	4621      	mov	r1, r4
 8002788:	4628      	mov	r0, r5
 800278a:	f000 f83e 	bl	800280a <__smakebuf_r>
 800278e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002792:	f013 0201 	ands.w	r2, r3, #1
 8002796:	d00a      	beq.n	80027ae <__swsetup_r+0x9a>
 8002798:	2200      	movs	r2, #0
 800279a:	60a2      	str	r2, [r4, #8]
 800279c:	6962      	ldr	r2, [r4, #20]
 800279e:	4252      	negs	r2, r2
 80027a0:	61a2      	str	r2, [r4, #24]
 80027a2:	6922      	ldr	r2, [r4, #16]
 80027a4:	b942      	cbnz	r2, 80027b8 <__swsetup_r+0xa4>
 80027a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80027aa:	d1c5      	bne.n	8002738 <__swsetup_r+0x24>
 80027ac:	bd38      	pop	{r3, r4, r5, pc}
 80027ae:	0799      	lsls	r1, r3, #30
 80027b0:	bf58      	it	pl
 80027b2:	6962      	ldrpl	r2, [r4, #20]
 80027b4:	60a2      	str	r2, [r4, #8]
 80027b6:	e7f4      	b.n	80027a2 <__swsetup_r+0x8e>
 80027b8:	2000      	movs	r0, #0
 80027ba:	e7f7      	b.n	80027ac <__swsetup_r+0x98>
 80027bc:	20000018 	.word	0x20000018

080027c0 <__swhatbuf_r>:
 80027c0:	b570      	push	{r4, r5, r6, lr}
 80027c2:	460c      	mov	r4, r1
 80027c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027c8:	4615      	mov	r5, r2
 80027ca:	2900      	cmp	r1, #0
 80027cc:	461e      	mov	r6, r3
 80027ce:	b096      	sub	sp, #88	@ 0x58
 80027d0:	da0c      	bge.n	80027ec <__swhatbuf_r+0x2c>
 80027d2:	89a3      	ldrh	r3, [r4, #12]
 80027d4:	2100      	movs	r1, #0
 80027d6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80027da:	bf14      	ite	ne
 80027dc:	2340      	movne	r3, #64	@ 0x40
 80027de:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80027e2:	2000      	movs	r0, #0
 80027e4:	6031      	str	r1, [r6, #0]
 80027e6:	602b      	str	r3, [r5, #0]
 80027e8:	b016      	add	sp, #88	@ 0x58
 80027ea:	bd70      	pop	{r4, r5, r6, pc}
 80027ec:	466a      	mov	r2, sp
 80027ee:	f000 f8af 	bl	8002950 <_fstat_r>
 80027f2:	2800      	cmp	r0, #0
 80027f4:	dbed      	blt.n	80027d2 <__swhatbuf_r+0x12>
 80027f6:	9901      	ldr	r1, [sp, #4]
 80027f8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80027fc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002800:	4259      	negs	r1, r3
 8002802:	4159      	adcs	r1, r3
 8002804:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002808:	e7eb      	b.n	80027e2 <__swhatbuf_r+0x22>

0800280a <__smakebuf_r>:
 800280a:	898b      	ldrh	r3, [r1, #12]
 800280c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800280e:	079d      	lsls	r5, r3, #30
 8002810:	4606      	mov	r6, r0
 8002812:	460c      	mov	r4, r1
 8002814:	d507      	bpl.n	8002826 <__smakebuf_r+0x1c>
 8002816:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800281a:	6023      	str	r3, [r4, #0]
 800281c:	6123      	str	r3, [r4, #16]
 800281e:	2301      	movs	r3, #1
 8002820:	6163      	str	r3, [r4, #20]
 8002822:	b003      	add	sp, #12
 8002824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002826:	466a      	mov	r2, sp
 8002828:	ab01      	add	r3, sp, #4
 800282a:	f7ff ffc9 	bl	80027c0 <__swhatbuf_r>
 800282e:	9f00      	ldr	r7, [sp, #0]
 8002830:	4605      	mov	r5, r0
 8002832:	4639      	mov	r1, r7
 8002834:	4630      	mov	r0, r6
 8002836:	f7ff fc27 	bl	8002088 <_malloc_r>
 800283a:	b948      	cbnz	r0, 8002850 <__smakebuf_r+0x46>
 800283c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002840:	059a      	lsls	r2, r3, #22
 8002842:	d4ee      	bmi.n	8002822 <__smakebuf_r+0x18>
 8002844:	f023 0303 	bic.w	r3, r3, #3
 8002848:	f043 0302 	orr.w	r3, r3, #2
 800284c:	81a3      	strh	r3, [r4, #12]
 800284e:	e7e2      	b.n	8002816 <__smakebuf_r+0xc>
 8002850:	89a3      	ldrh	r3, [r4, #12]
 8002852:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002856:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800285a:	81a3      	strh	r3, [r4, #12]
 800285c:	9b01      	ldr	r3, [sp, #4]
 800285e:	6020      	str	r0, [r4, #0]
 8002860:	b15b      	cbz	r3, 800287a <__smakebuf_r+0x70>
 8002862:	4630      	mov	r0, r6
 8002864:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002868:	f000 f80c 	bl	8002884 <_isatty_r>
 800286c:	b128      	cbz	r0, 800287a <__smakebuf_r+0x70>
 800286e:	89a3      	ldrh	r3, [r4, #12]
 8002870:	f023 0303 	bic.w	r3, r3, #3
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	81a3      	strh	r3, [r4, #12]
 800287a:	89a3      	ldrh	r3, [r4, #12]
 800287c:	431d      	orrs	r5, r3
 800287e:	81a5      	strh	r5, [r4, #12]
 8002880:	e7cf      	b.n	8002822 <__smakebuf_r+0x18>
	...

08002884 <_isatty_r>:
 8002884:	b538      	push	{r3, r4, r5, lr}
 8002886:	2300      	movs	r3, #0
 8002888:	4d05      	ldr	r5, [pc, #20]	@ (80028a0 <_isatty_r+0x1c>)
 800288a:	4604      	mov	r4, r0
 800288c:	4608      	mov	r0, r1
 800288e:	602b      	str	r3, [r5, #0]
 8002890:	f7fd ff17 	bl	80006c2 <_isatty>
 8002894:	1c43      	adds	r3, r0, #1
 8002896:	d102      	bne.n	800289e <_isatty_r+0x1a>
 8002898:	682b      	ldr	r3, [r5, #0]
 800289a:	b103      	cbz	r3, 800289e <_isatty_r+0x1a>
 800289c:	6023      	str	r3, [r4, #0]
 800289e:	bd38      	pop	{r3, r4, r5, pc}
 80028a0:	20000218 	.word	0x20000218

080028a4 <_lseek_r>:
 80028a4:	b538      	push	{r3, r4, r5, lr}
 80028a6:	4604      	mov	r4, r0
 80028a8:	4608      	mov	r0, r1
 80028aa:	4611      	mov	r1, r2
 80028ac:	2200      	movs	r2, #0
 80028ae:	4d05      	ldr	r5, [pc, #20]	@ (80028c4 <_lseek_r+0x20>)
 80028b0:	602a      	str	r2, [r5, #0]
 80028b2:	461a      	mov	r2, r3
 80028b4:	f7fd ff0f 	bl	80006d6 <_lseek>
 80028b8:	1c43      	adds	r3, r0, #1
 80028ba:	d102      	bne.n	80028c2 <_lseek_r+0x1e>
 80028bc:	682b      	ldr	r3, [r5, #0]
 80028be:	b103      	cbz	r3, 80028c2 <_lseek_r+0x1e>
 80028c0:	6023      	str	r3, [r4, #0]
 80028c2:	bd38      	pop	{r3, r4, r5, pc}
 80028c4:	20000218 	.word	0x20000218

080028c8 <_read_r>:
 80028c8:	b538      	push	{r3, r4, r5, lr}
 80028ca:	4604      	mov	r4, r0
 80028cc:	4608      	mov	r0, r1
 80028ce:	4611      	mov	r1, r2
 80028d0:	2200      	movs	r2, #0
 80028d2:	4d05      	ldr	r5, [pc, #20]	@ (80028e8 <_read_r+0x20>)
 80028d4:	602a      	str	r2, [r5, #0]
 80028d6:	461a      	mov	r2, r3
 80028d8:	f7fd fea0 	bl	800061c <_read>
 80028dc:	1c43      	adds	r3, r0, #1
 80028de:	d102      	bne.n	80028e6 <_read_r+0x1e>
 80028e0:	682b      	ldr	r3, [r5, #0]
 80028e2:	b103      	cbz	r3, 80028e6 <_read_r+0x1e>
 80028e4:	6023      	str	r3, [r4, #0]
 80028e6:	bd38      	pop	{r3, r4, r5, pc}
 80028e8:	20000218 	.word	0x20000218

080028ec <_sbrk_r>:
 80028ec:	b538      	push	{r3, r4, r5, lr}
 80028ee:	2300      	movs	r3, #0
 80028f0:	4d05      	ldr	r5, [pc, #20]	@ (8002908 <_sbrk_r+0x1c>)
 80028f2:	4604      	mov	r4, r0
 80028f4:	4608      	mov	r0, r1
 80028f6:	602b      	str	r3, [r5, #0]
 80028f8:	f7fd fefa 	bl	80006f0 <_sbrk>
 80028fc:	1c43      	adds	r3, r0, #1
 80028fe:	d102      	bne.n	8002906 <_sbrk_r+0x1a>
 8002900:	682b      	ldr	r3, [r5, #0]
 8002902:	b103      	cbz	r3, 8002906 <_sbrk_r+0x1a>
 8002904:	6023      	str	r3, [r4, #0]
 8002906:	bd38      	pop	{r3, r4, r5, pc}
 8002908:	20000218 	.word	0x20000218

0800290c <_write_r>:
 800290c:	b538      	push	{r3, r4, r5, lr}
 800290e:	4604      	mov	r4, r0
 8002910:	4608      	mov	r0, r1
 8002912:	4611      	mov	r1, r2
 8002914:	2200      	movs	r2, #0
 8002916:	4d05      	ldr	r5, [pc, #20]	@ (800292c <_write_r+0x20>)
 8002918:	602a      	str	r2, [r5, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	f7fd fe9b 	bl	8000656 <_write>
 8002920:	1c43      	adds	r3, r0, #1
 8002922:	d102      	bne.n	800292a <_write_r+0x1e>
 8002924:	682b      	ldr	r3, [r5, #0]
 8002926:	b103      	cbz	r3, 800292a <_write_r+0x1e>
 8002928:	6023      	str	r3, [r4, #0]
 800292a:	bd38      	pop	{r3, r4, r5, pc}
 800292c:	20000218 	.word	0x20000218

08002930 <_close_r>:
 8002930:	b538      	push	{r3, r4, r5, lr}
 8002932:	2300      	movs	r3, #0
 8002934:	4d05      	ldr	r5, [pc, #20]	@ (800294c <_close_r+0x1c>)
 8002936:	4604      	mov	r4, r0
 8002938:	4608      	mov	r0, r1
 800293a:	602b      	str	r3, [r5, #0]
 800293c:	f7fd fea7 	bl	800068e <_close>
 8002940:	1c43      	adds	r3, r0, #1
 8002942:	d102      	bne.n	800294a <_close_r+0x1a>
 8002944:	682b      	ldr	r3, [r5, #0]
 8002946:	b103      	cbz	r3, 800294a <_close_r+0x1a>
 8002948:	6023      	str	r3, [r4, #0]
 800294a:	bd38      	pop	{r3, r4, r5, pc}
 800294c:	20000218 	.word	0x20000218

08002950 <_fstat_r>:
 8002950:	b538      	push	{r3, r4, r5, lr}
 8002952:	2300      	movs	r3, #0
 8002954:	4d06      	ldr	r5, [pc, #24]	@ (8002970 <_fstat_r+0x20>)
 8002956:	4604      	mov	r4, r0
 8002958:	4608      	mov	r0, r1
 800295a:	4611      	mov	r1, r2
 800295c:	602b      	str	r3, [r5, #0]
 800295e:	f7fd fea1 	bl	80006a4 <_fstat>
 8002962:	1c43      	adds	r3, r0, #1
 8002964:	d102      	bne.n	800296c <_fstat_r+0x1c>
 8002966:	682b      	ldr	r3, [r5, #0]
 8002968:	b103      	cbz	r3, 800296c <_fstat_r+0x1c>
 800296a:	6023      	str	r3, [r4, #0]
 800296c:	bd38      	pop	{r3, r4, r5, pc}
 800296e:	bf00      	nop
 8002970:	20000218 	.word	0x20000218

08002974 <memchr>:
 8002974:	4603      	mov	r3, r0
 8002976:	b510      	push	{r4, lr}
 8002978:	b2c9      	uxtb	r1, r1
 800297a:	4402      	add	r2, r0
 800297c:	4293      	cmp	r3, r2
 800297e:	4618      	mov	r0, r3
 8002980:	d101      	bne.n	8002986 <memchr+0x12>
 8002982:	2000      	movs	r0, #0
 8002984:	e003      	b.n	800298e <memchr+0x1a>
 8002986:	7804      	ldrb	r4, [r0, #0]
 8002988:	3301      	adds	r3, #1
 800298a:	428c      	cmp	r4, r1
 800298c:	d1f6      	bne.n	800297c <memchr+0x8>
 800298e:	bd10      	pop	{r4, pc}

08002990 <_free_r>:
 8002990:	b538      	push	{r3, r4, r5, lr}
 8002992:	4605      	mov	r5, r0
 8002994:	2900      	cmp	r1, #0
 8002996:	d040      	beq.n	8002a1a <_free_r+0x8a>
 8002998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800299c:	1f0c      	subs	r4, r1, #4
 800299e:	2b00      	cmp	r3, #0
 80029a0:	bfb8      	it	lt
 80029a2:	18e4      	addlt	r4, r4, r3
 80029a4:	f7ff fe28 	bl	80025f8 <__malloc_lock>
 80029a8:	4a1c      	ldr	r2, [pc, #112]	@ (8002a1c <_free_r+0x8c>)
 80029aa:	6813      	ldr	r3, [r2, #0]
 80029ac:	b933      	cbnz	r3, 80029bc <_free_r+0x2c>
 80029ae:	6063      	str	r3, [r4, #4]
 80029b0:	6014      	str	r4, [r2, #0]
 80029b2:	4628      	mov	r0, r5
 80029b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029b8:	f7ff be24 	b.w	8002604 <__malloc_unlock>
 80029bc:	42a3      	cmp	r3, r4
 80029be:	d908      	bls.n	80029d2 <_free_r+0x42>
 80029c0:	6820      	ldr	r0, [r4, #0]
 80029c2:	1821      	adds	r1, r4, r0
 80029c4:	428b      	cmp	r3, r1
 80029c6:	bf01      	itttt	eq
 80029c8:	6819      	ldreq	r1, [r3, #0]
 80029ca:	685b      	ldreq	r3, [r3, #4]
 80029cc:	1809      	addeq	r1, r1, r0
 80029ce:	6021      	streq	r1, [r4, #0]
 80029d0:	e7ed      	b.n	80029ae <_free_r+0x1e>
 80029d2:	461a      	mov	r2, r3
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	b10b      	cbz	r3, 80029dc <_free_r+0x4c>
 80029d8:	42a3      	cmp	r3, r4
 80029da:	d9fa      	bls.n	80029d2 <_free_r+0x42>
 80029dc:	6811      	ldr	r1, [r2, #0]
 80029de:	1850      	adds	r0, r2, r1
 80029e0:	42a0      	cmp	r0, r4
 80029e2:	d10b      	bne.n	80029fc <_free_r+0x6c>
 80029e4:	6820      	ldr	r0, [r4, #0]
 80029e6:	4401      	add	r1, r0
 80029e8:	1850      	adds	r0, r2, r1
 80029ea:	4283      	cmp	r3, r0
 80029ec:	6011      	str	r1, [r2, #0]
 80029ee:	d1e0      	bne.n	80029b2 <_free_r+0x22>
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	4408      	add	r0, r1
 80029f6:	6010      	str	r0, [r2, #0]
 80029f8:	6053      	str	r3, [r2, #4]
 80029fa:	e7da      	b.n	80029b2 <_free_r+0x22>
 80029fc:	d902      	bls.n	8002a04 <_free_r+0x74>
 80029fe:	230c      	movs	r3, #12
 8002a00:	602b      	str	r3, [r5, #0]
 8002a02:	e7d6      	b.n	80029b2 <_free_r+0x22>
 8002a04:	6820      	ldr	r0, [r4, #0]
 8002a06:	1821      	adds	r1, r4, r0
 8002a08:	428b      	cmp	r3, r1
 8002a0a:	bf01      	itttt	eq
 8002a0c:	6819      	ldreq	r1, [r3, #0]
 8002a0e:	685b      	ldreq	r3, [r3, #4]
 8002a10:	1809      	addeq	r1, r1, r0
 8002a12:	6021      	streq	r1, [r4, #0]
 8002a14:	6063      	str	r3, [r4, #4]
 8002a16:	6054      	str	r4, [r2, #4]
 8002a18:	e7cb      	b.n	80029b2 <_free_r+0x22>
 8002a1a:	bd38      	pop	{r3, r4, r5, pc}
 8002a1c:	20000214 	.word	0x20000214

08002a20 <_init>:
 8002a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a22:	bf00      	nop
 8002a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a26:	bc08      	pop	{r3}
 8002a28:	469e      	mov	lr, r3
 8002a2a:	4770      	bx	lr

08002a2c <_fini>:
 8002a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a2e:	bf00      	nop
 8002a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a32:	bc08      	pop	{r3}
 8002a34:	469e      	mov	lr, r3
 8002a36:	4770      	bx	lr
