
00_CORTEX_02_ASSEMBLY_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b28  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08002c34  08002c34  00003c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e20  08002e20  00004068  2**0
                  CONTENTS
  4 .ARM          00000000  08002e20  08002e20  00004068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e20  08002e20  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e20  08002e20  00003e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e24  08002e24  00003e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002e28  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000068  08002e90  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08002e90  0000421c  2**0
                  ALLOC
 11 .ARM.attributes 0000002f  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005788  00000000  00000000  00004097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015e3  00000000  00000000  0000981f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  0000ae08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000053e  00000000  00000000  0000b500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c63  00000000  00000000  0000ba3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000078ec  00000000  00000000  000236a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083c2d  00000000  00000000  0002af8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aebba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002298  00000000  00000000  000aec00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000b0e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c1c 	.word	0x08002c1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002c1c 	.word	0x08002c1c

0800014c <mem32set>:
#include <stdint.h>

uint8_t ReadMem(uint32_t* pulMemAddr, int ulLength);

void mem32set (void *dest, int val, size_t len)
{
 800014c:	b480      	push	{r7}
 800014e:	b087      	sub	sp, #28
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
  unsigned int *ptr = dest;
 8000158:	68fb      	ldr	r3, [r7, #12]
 800015a:	617b      	str	r3, [r7, #20]
  while (len-- > 0)
 800015c:	e004      	b.n	8000168 <mem32set+0x1c>
    *ptr++ = val;
 800015e:	697b      	ldr	r3, [r7, #20]
 8000160:	1d1a      	adds	r2, r3, #4
 8000162:	617a      	str	r2, [r7, #20]
 8000164:	68ba      	ldr	r2, [r7, #8]
 8000166:	601a      	str	r2, [r3, #0]
  while (len-- > 0)
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	1e5a      	subs	r2, r3, #1
 800016c:	607a      	str	r2, [r7, #4]
 800016e:	2b00      	cmp	r3, #0
 8000170:	d1f5      	bne.n	800015e <mem32set+0x12>
}
 8000172:	bf00      	nop
 8000174:	bf00      	nop
 8000176:	371c      	adds	r7, #28
 8000178:	46bd      	mov	sp, r7
 800017a:	bc80      	pop	{r7}
 800017c:	4770      	bx	lr
	...

08000180 <dump_m>:

void dump_m(uint32_t* pulMemAddr)
{
 8000180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000184:	b09a      	sub	sp, #104	@ 0x68
 8000186:	af0e      	add	r7, sp, #56	@ 0x38
 8000188:	6278      	str	r0, [r7, #36]	@ 0x24
	uint8_t* pucRegister;
	int i;

	pucRegister = (uint8_t*)((unsigned long)pulMemAddr);
 800018a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800018c:	62bb      	str	r3, [r7, #40]	@ 0x28

	printf("-----------------------------------------------------------\n");
 800018e:	4877      	ldr	r0, [pc, #476]	@ (800036c <dump_m+0x1ec>)
 8000190:	f001 fecc 	bl	8001f2c <puts>
	printf("  Address   0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\n");
 8000194:	4876      	ldr	r0, [pc, #472]	@ (8000370 <dump_m+0x1f0>)
 8000196:	f001 fec9 	bl	8001f2c <puts>
	for(i=0; i<16; i++)
 800019a:	2300      	movs	r3, #0
 800019c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800019e:	e0d9      	b.n	8000354 <dump_m+0x1d4>
	{
		printf("%p ", &pucRegister[i*16]);
 80001a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80001a2:	011b      	lsls	r3, r3, #4
 80001a4:	461a      	mov	r2, r3
 80001a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80001a8:	4413      	add	r3, r2
 80001aa:	4619      	mov	r1, r3
 80001ac:	4871      	ldr	r0, [pc, #452]	@ (8000374 <dump_m+0x1f4>)
 80001ae:	f001 fe55 	bl	8001e5c <iprintf>
		printf("%02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x\n", ReadMem((uint32_t*)(&pucRegister[i*16+0]), 1), ReadMem((uint32_t*)(&pucRegister[i*16+1]), 1), ReadMem((uint32_t*)(&pucRegister[i*16+2]), 1), ReadMem((uint32_t*)(&pucRegister[i*16+3]), 1), ReadMem((uint32_t*)(&pucRegister[i*16+4]), 1), ReadMem((uint32_t*)(&pucRegister[i*16+5]), 1), ReadMem((uint32_t*)(&pucRegister[i*16+6]), 1), ReadMem((uint32_t*)(&pucRegister[i*16+7]), 1), ReadMem((uint32_t*)(&pucRegister[i*16+8]), 1), ReadMem((uint32_t*)(&pucRegister[i*16+9]), 1), ReadMem((uint32_t*)(&pucRegister[i*16+10]), 1), ReadMem((uint32_t*)(&pucRegister[i*16+11]), 1), ReadMem((uint32_t*)(&pucRegister[i*16+12]), 1), ReadMem((uint32_t*)(&pucRegister[i*16+13]), 1), ReadMem((uint32_t*)(&pucRegister[i*16+14]), 1), ReadMem((uint32_t*)(&pucRegister[i*16+15]), 1));
 80001b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80001b4:	011b      	lsls	r3, r3, #4
 80001b6:	461a      	mov	r2, r3
 80001b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80001ba:	4413      	add	r3, r2
 80001bc:	2101      	movs	r1, #1
 80001be:	4618      	mov	r0, r3
 80001c0:	f000 f8de 	bl	8000380 <ReadMem>
 80001c4:	4603      	mov	r3, r0
 80001c6:	4698      	mov	r8, r3
 80001c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80001ca:	011b      	lsls	r3, r3, #4
 80001cc:	3301      	adds	r3, #1
 80001ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80001d0:	4413      	add	r3, r2
 80001d2:	2101      	movs	r1, #1
 80001d4:	4618      	mov	r0, r3
 80001d6:	f000 f8d3 	bl	8000380 <ReadMem>
 80001da:	4603      	mov	r3, r0
 80001dc:	4699      	mov	r9, r3
 80001de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80001e0:	011b      	lsls	r3, r3, #4
 80001e2:	3302      	adds	r3, #2
 80001e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80001e6:	4413      	add	r3, r2
 80001e8:	2101      	movs	r1, #1
 80001ea:	4618      	mov	r0, r3
 80001ec:	f000 f8c8 	bl	8000380 <ReadMem>
 80001f0:	4603      	mov	r3, r0
 80001f2:	469a      	mov	sl, r3
 80001f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80001f6:	011b      	lsls	r3, r3, #4
 80001f8:	3303      	adds	r3, #3
 80001fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80001fc:	4413      	add	r3, r2
 80001fe:	2101      	movs	r1, #1
 8000200:	4618      	mov	r0, r3
 8000202:	f000 f8bd 	bl	8000380 <ReadMem>
 8000206:	4603      	mov	r3, r0
 8000208:	623b      	str	r3, [r7, #32]
 800020a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800020c:	011b      	lsls	r3, r3, #4
 800020e:	3304      	adds	r3, #4
 8000210:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000212:	4413      	add	r3, r2
 8000214:	2101      	movs	r1, #1
 8000216:	4618      	mov	r0, r3
 8000218:	f000 f8b2 	bl	8000380 <ReadMem>
 800021c:	4603      	mov	r3, r0
 800021e:	61fb      	str	r3, [r7, #28]
 8000220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000222:	011b      	lsls	r3, r3, #4
 8000224:	3305      	adds	r3, #5
 8000226:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000228:	4413      	add	r3, r2
 800022a:	2101      	movs	r1, #1
 800022c:	4618      	mov	r0, r3
 800022e:	f000 f8a7 	bl	8000380 <ReadMem>
 8000232:	4603      	mov	r3, r0
 8000234:	61bb      	str	r3, [r7, #24]
 8000236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000238:	011b      	lsls	r3, r3, #4
 800023a:	3306      	adds	r3, #6
 800023c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800023e:	4413      	add	r3, r2
 8000240:	2101      	movs	r1, #1
 8000242:	4618      	mov	r0, r3
 8000244:	f000 f89c 	bl	8000380 <ReadMem>
 8000248:	4603      	mov	r3, r0
 800024a:	617b      	str	r3, [r7, #20]
 800024c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800024e:	011b      	lsls	r3, r3, #4
 8000250:	3307      	adds	r3, #7
 8000252:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000254:	4413      	add	r3, r2
 8000256:	2101      	movs	r1, #1
 8000258:	4618      	mov	r0, r3
 800025a:	f000 f891 	bl	8000380 <ReadMem>
 800025e:	4603      	mov	r3, r0
 8000260:	613b      	str	r3, [r7, #16]
 8000262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000264:	011b      	lsls	r3, r3, #4
 8000266:	3308      	adds	r3, #8
 8000268:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800026a:	4413      	add	r3, r2
 800026c:	2101      	movs	r1, #1
 800026e:	4618      	mov	r0, r3
 8000270:	f000 f886 	bl	8000380 <ReadMem>
 8000274:	4603      	mov	r3, r0
 8000276:	60fb      	str	r3, [r7, #12]
 8000278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800027a:	011b      	lsls	r3, r3, #4
 800027c:	3309      	adds	r3, #9
 800027e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000280:	4413      	add	r3, r2
 8000282:	2101      	movs	r1, #1
 8000284:	4618      	mov	r0, r3
 8000286:	f000 f87b 	bl	8000380 <ReadMem>
 800028a:	4603      	mov	r3, r0
 800028c:	60bb      	str	r3, [r7, #8]
 800028e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000290:	011b      	lsls	r3, r3, #4
 8000292:	330a      	adds	r3, #10
 8000294:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000296:	4413      	add	r3, r2
 8000298:	2101      	movs	r1, #1
 800029a:	4618      	mov	r0, r3
 800029c:	f000 f870 	bl	8000380 <ReadMem>
 80002a0:	4603      	mov	r3, r0
 80002a2:	607b      	str	r3, [r7, #4]
 80002a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80002a6:	011b      	lsls	r3, r3, #4
 80002a8:	330b      	adds	r3, #11
 80002aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80002ac:	4413      	add	r3, r2
 80002ae:	2101      	movs	r1, #1
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 f865 	bl	8000380 <ReadMem>
 80002b6:	4603      	mov	r3, r0
 80002b8:	603b      	str	r3, [r7, #0]
 80002ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80002bc:	011b      	lsls	r3, r3, #4
 80002be:	330c      	adds	r3, #12
 80002c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80002c2:	4413      	add	r3, r2
 80002c4:	2101      	movs	r1, #1
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 f85a 	bl	8000380 <ReadMem>
 80002cc:	4603      	mov	r3, r0
 80002ce:	461e      	mov	r6, r3
 80002d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80002d2:	011b      	lsls	r3, r3, #4
 80002d4:	f103 020d 	add.w	r2, r3, #13
 80002d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80002da:	4413      	add	r3, r2
 80002dc:	2101      	movs	r1, #1
 80002de:	4618      	mov	r0, r3
 80002e0:	f000 f84e 	bl	8000380 <ReadMem>
 80002e4:	4603      	mov	r3, r0
 80002e6:	461d      	mov	r5, r3
 80002e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80002ea:	011b      	lsls	r3, r3, #4
 80002ec:	f103 020e 	add.w	r2, r3, #14
 80002f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80002f2:	4413      	add	r3, r2
 80002f4:	2101      	movs	r1, #1
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 f842 	bl	8000380 <ReadMem>
 80002fc:	4603      	mov	r3, r0
 80002fe:	461c      	mov	r4, r3
 8000300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000302:	011b      	lsls	r3, r3, #4
 8000304:	f103 020f 	add.w	r2, r3, #15
 8000308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800030a:	4413      	add	r3, r2
 800030c:	2101      	movs	r1, #1
 800030e:	4618      	mov	r0, r3
 8000310:	f000 f836 	bl	8000380 <ReadMem>
 8000314:	4603      	mov	r3, r0
 8000316:	930c      	str	r3, [sp, #48]	@ 0x30
 8000318:	940b      	str	r4, [sp, #44]	@ 0x2c
 800031a:	950a      	str	r5, [sp, #40]	@ 0x28
 800031c:	9609      	str	r6, [sp, #36]	@ 0x24
 800031e:	683a      	ldr	r2, [r7, #0]
 8000320:	9208      	str	r2, [sp, #32]
 8000322:	687a      	ldr	r2, [r7, #4]
 8000324:	9207      	str	r2, [sp, #28]
 8000326:	68ba      	ldr	r2, [r7, #8]
 8000328:	9206      	str	r2, [sp, #24]
 800032a:	68fa      	ldr	r2, [r7, #12]
 800032c:	9205      	str	r2, [sp, #20]
 800032e:	693a      	ldr	r2, [r7, #16]
 8000330:	9204      	str	r2, [sp, #16]
 8000332:	697a      	ldr	r2, [r7, #20]
 8000334:	9203      	str	r2, [sp, #12]
 8000336:	69ba      	ldr	r2, [r7, #24]
 8000338:	9202      	str	r2, [sp, #8]
 800033a:	69fa      	ldr	r2, [r7, #28]
 800033c:	9201      	str	r2, [sp, #4]
 800033e:	6a3b      	ldr	r3, [r7, #32]
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	4653      	mov	r3, sl
 8000344:	464a      	mov	r2, r9
 8000346:	4641      	mov	r1, r8
 8000348:	480b      	ldr	r0, [pc, #44]	@ (8000378 <dump_m+0x1f8>)
 800034a:	f001 fd87 	bl	8001e5c <iprintf>
	for(i=0; i<16; i++)
 800034e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000350:	3301      	adds	r3, #1
 8000352:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000356:	2b0f      	cmp	r3, #15
 8000358:	f77f af22 	ble.w	80001a0 <dump_m+0x20>
	}
	printf("-----------------------------------------------------------\n\n");
 800035c:	4807      	ldr	r0, [pc, #28]	@ (800037c <dump_m+0x1fc>)
 800035e:	f001 fde5 	bl	8001f2c <puts>

}
 8000362:	bf00      	nop
 8000364:	3730      	adds	r7, #48	@ 0x30
 8000366:	46bd      	mov	sp, r7
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	08002c34 	.word	0x08002c34
 8000370:	08002c70 	.word	0x08002c70
 8000374:	08002cac 	.word	0x08002cac
 8000378:	08002cb0 	.word	0x08002cb0
 800037c:	08002d04 	.word	0x08002d04

08000380 <ReadMem>:

	SEE ALSO:
	----------------------------------------------------------------------------
*/
uint8_t ReadMem(uint32_t* pulMemAddr, int ulLength)
{
 8000380:	b480      	push	{r7}
 8000382:	b087      	sub	sp, #28
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]
	uint32_t* pulRegister = pulMemAddr;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	613b      	str	r3, [r7, #16]
	uint16_t* puwRegister = (uint16_t*)pulMemAddr;
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	60fb      	str	r3, [r7, #12]
	uint8_t* pucRegister = (uint8_t*)pulMemAddr;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	60bb      	str	r3, [r7, #8]

	uint8_t ulRValue = -1;
 8000396:	23ff      	movs	r3, #255	@ 0xff
 8000398:	75fb      	strb	r3, [r7, #23]

	switch(ulLength)
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	2b04      	cmp	r3, #4
 800039e:	d011      	beq.n	80003c4 <ReadMem+0x44>
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	2b04      	cmp	r3, #4
 80003a4:	dc12      	bgt.n	80003cc <ReadMem+0x4c>
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	2b01      	cmp	r3, #1
 80003aa:	d003      	beq.n	80003b4 <ReadMem+0x34>
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	2b02      	cmp	r3, #2
 80003b0:	d004      	beq.n	80003bc <ReadMem+0x3c>
 80003b2:	e00b      	b.n	80003cc <ReadMem+0x4c>
	{
	case 1:
		ulRValue = *pucRegister;
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	75fb      	strb	r3, [r7, #23]
		break;
 80003ba:	e007      	b.n	80003cc <ReadMem+0x4c>
	case 2:
		ulRValue = *puwRegister;
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	881b      	ldrh	r3, [r3, #0]
 80003c0:	75fb      	strb	r3, [r7, #23]
		break;
 80003c2:	e003      	b.n	80003cc <ReadMem+0x4c>
	case 4:
		ulRValue = *pulRegister;
 80003c4:	693b      	ldr	r3, [r7, #16]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	75fb      	strb	r3, [r7, #23]
		break;
 80003ca:	bf00      	nop
	}

	return(ulRValue);
 80003cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	371c      	adds	r7, #28
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr

080003d8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 if ( ch == '\n' )
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	2b0a      	cmp	r3, #10
 80003e4:	d106      	bne.n	80003f4 <__io_putchar+0x1c>
	 HAL_UART_Transmit(&huart2, (uint8_t*)&"\r", 1, HAL_MAX_DELAY);
 80003e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80003ea:	2201      	movs	r2, #1
 80003ec:	4907      	ldr	r1, [pc, #28]	@ (800040c <__io_putchar+0x34>)
 80003ee:	4808      	ldr	r0, [pc, #32]	@ (8000410 <__io_putchar+0x38>)
 80003f0:	f001 fa65 	bl	80018be <HAL_UART_Transmit>
 HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80003f4:	1d39      	adds	r1, r7, #4
 80003f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80003fa:	2201      	movs	r2, #1
 80003fc:	4804      	ldr	r0, [pc, #16]	@ (8000410 <__io_putchar+0x38>)
 80003fe:	f001 fa5e 	bl	80018be <HAL_UART_Transmit>
 return ch;
 8000402:	687b      	ldr	r3, [r7, #4]
}
 8000404:	4618      	mov	r0, r3
 8000406:	3708      	adds	r7, #8
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	08002d44 	.word	0x08002d44
 8000410:	20000084 	.word	0x20000084

08000414 <__io_getchar>:

int __io_getchar(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
	uint8_t ch;

	while( HAL_OK != HAL_UART_Receive(&huart2, &ch, 1, HAL_MAX_DELAY) )
 800041a:	bf00      	nop
 800041c:	1df9      	adds	r1, r7, #7
 800041e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000422:	2201      	movs	r2, #1
 8000424:	4805      	ldr	r0, [pc, #20]	@ (800043c <__io_getchar+0x28>)
 8000426:	f001 fadc 	bl	80019e2 <HAL_UART_Receive>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d1f5      	bne.n	800041c <__io_getchar+0x8>
	{
		;
	}
	return ch;
 8000430:	79fb      	ldrb	r3, [r7, #7]
}
 8000432:	4618      	mov	r0, r3
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	20000084 	.word	0x20000084

08000440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000446:	f000 faa5 	bl	8000994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800044a:	f000 f853 	bl	80004f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800044e:	f000 f8bd 	bl	80005cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000452:	f000 f891 	bl	8000578 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("\n\n\nHELLO, STM32\n");
 8000456:	481f      	ldr	r0, [pc, #124]	@ (80004d4 <main+0x94>)
 8000458:	f001 fd68 	bl	8001f2c <puts>
  SCB->SHCSR = SCB->SHCSR | (7<<16); // If you do not do this, it will be treated as a hard fault.
 800045c:	4b1e      	ldr	r3, [pc, #120]	@ (80004d8 <main+0x98>)
 800045e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000460:	4a1d      	ldr	r2, [pc, #116]	@ (80004d8 <main+0x98>)
 8000462:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8000466:	6253      	str	r3, [r2, #36]	@ 0x24
#endif

#if 1
/* Memory Copy */
{
	unsigned int src=0x20004000;
 8000468:	4b1c      	ldr	r3, [pc, #112]	@ (80004dc <main+0x9c>)
 800046a:	60fb      	str	r3, [r7, #12]
	unsigned int dst=0x20004800;
 800046c:	4b1c      	ldr	r3, [pc, #112]	@ (80004e0 <main+0xa0>)
 800046e:	60bb      	str	r3, [r7, #8]
	int size = 16; /* word size */
 8000470:	2310      	movs	r3, #16
 8000472:	607b      	str	r3, [r7, #4]
	unsigned int v;

#if 1
	/* memory copy by LDR/STR */
	v = 0x12345678;
 8000474:	4b1b      	ldr	r3, [pc, #108]	@ (80004e4 <main+0xa4>)
 8000476:	603b      	str	r3, [r7, #0]
	printf("ex6. MEMCPY_SINGLE\n");
 8000478:	481b      	ldr	r0, [pc, #108]	@ (80004e8 <main+0xa8>)
 800047a:	f001 fd57 	bl	8001f2c <puts>

	printf("\nmemory address @0x%08x filled with [0x%08x]\n", src, v);
 800047e:	683a      	ldr	r2, [r7, #0]
 8000480:	68f9      	ldr	r1, [r7, #12]
 8000482:	481a      	ldr	r0, [pc, #104]	@ (80004ec <main+0xac>)
 8000484:	f001 fcea 	bl	8001e5c <iprintf>
	mem32set((char*)src, v, size+4);
 8000488:	68f8      	ldr	r0, [r7, #12]
 800048a:	6839      	ldr	r1, [r7, #0]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	3304      	adds	r3, #4
 8000490:	461a      	mov	r2, r3
 8000492:	f7ff fe5b 	bl	800014c <mem32set>
	mem32set((char*)dst, 0x00000000, size+4);
 8000496:	68b8      	ldr	r0, [r7, #8]
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	3304      	adds	r3, #4
 800049c:	461a      	mov	r2, r3
 800049e:	2100      	movs	r1, #0
 80004a0:	f7ff fe54 	bl	800014c <mem32set>
	dump_m((uint32_t*)src); // print the buffer contents to the screen
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	4618      	mov	r0, r3
 80004a8:	f7ff fe6a 	bl	8000180 <dump_m>

	printf("\nsingle copy from @0x%08x to @0x%08x\n",src, dst);
 80004ac:	68ba      	ldr	r2, [r7, #8]
 80004ae:	68f9      	ldr	r1, [r7, #12]
 80004b0:	480f      	ldr	r0, [pc, #60]	@ (80004f0 <main+0xb0>)
 80004b2:	f001 fcd3 	bl	8001e5c <iprintf>
	//MEMCPY_SINGLE(dst, src, size);
	memcpy((void*)dst, (void*)src, size*4); // word copy
 80004b6:	68b8      	ldr	r0, [r7, #8]
 80004b8:	68f9      	ldr	r1, [r7, #12]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	461a      	mov	r2, r3
 80004c0:	f001 fd71 	bl	8001fa6 <memcpy>
	dump_m((uint32_t*)dst); // print the buffer contents to the screen
 80004c4:	68bb      	ldr	r3, [r7, #8]
 80004c6:	4618      	mov	r0, r3
 80004c8:	f7ff fe5a 	bl	8000180 <dump_m>
	__BKPT(0);
 80004cc:	be00      	bkpt	0x0000

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ce:	bf00      	nop
 80004d0:	e7fd      	b.n	80004ce <main+0x8e>
 80004d2:	bf00      	nop
 80004d4:	08002d48 	.word	0x08002d48
 80004d8:	e000ed00 	.word	0xe000ed00
 80004dc:	20004000 	.word	0x20004000
 80004e0:	20004800 	.word	0x20004800
 80004e4:	12345678 	.word	0x12345678
 80004e8:	08002d58 	.word	0x08002d58
 80004ec:	08002d6c 	.word	0x08002d6c
 80004f0:	08002d9c 	.word	0x08002d9c

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b090      	sub	sp, #64	@ 0x40
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	f107 0318 	add.w	r3, r7, #24
 80004fe:	2228      	movs	r2, #40	@ 0x28
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f001 fd1a 	bl	8001f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000516:	2302      	movs	r3, #2
 8000518:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800051a:	2301      	movs	r3, #1
 800051c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800051e:	2310      	movs	r3, #16
 8000520:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000522:	2302      	movs	r3, #2
 8000524:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000526:	2300      	movs	r3, #0
 8000528:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800052a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800052e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000530:	f107 0318 	add.w	r3, r7, #24
 8000534:	4618      	mov	r0, r3
 8000536:	f000 fd5b 	bl	8000ff0 <HAL_RCC_OscConfig>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000540:	f000 f8b2 	bl	80006a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000544:	230f      	movs	r3, #15
 8000546:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000548:	2302      	movs	r3, #2
 800054a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800054c:	2300      	movs	r3, #0
 800054e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000550:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000554:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	2102      	movs	r1, #2
 800055e:	4618      	mov	r0, r3
 8000560:	f000 ffc8 	bl	80014f4 <HAL_RCC_ClockConfig>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800056a:	f000 f89d 	bl	80006a8 <Error_Handler>
  }
}
 800056e:	bf00      	nop
 8000570:	3740      	adds	r7, #64	@ 0x40
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
	...

08000578 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800057c:	4b11      	ldr	r3, [pc, #68]	@ (80005c4 <MX_USART2_UART_Init+0x4c>)
 800057e:	4a12      	ldr	r2, [pc, #72]	@ (80005c8 <MX_USART2_UART_Init+0x50>)
 8000580:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000582:	4b10      	ldr	r3, [pc, #64]	@ (80005c4 <MX_USART2_UART_Init+0x4c>)
 8000584:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000588:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800058a:	4b0e      	ldr	r3, [pc, #56]	@ (80005c4 <MX_USART2_UART_Init+0x4c>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000590:	4b0c      	ldr	r3, [pc, #48]	@ (80005c4 <MX_USART2_UART_Init+0x4c>)
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000596:	4b0b      	ldr	r3, [pc, #44]	@ (80005c4 <MX_USART2_UART_Init+0x4c>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800059c:	4b09      	ldr	r3, [pc, #36]	@ (80005c4 <MX_USART2_UART_Init+0x4c>)
 800059e:	220c      	movs	r2, #12
 80005a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005a2:	4b08      	ldr	r3, [pc, #32]	@ (80005c4 <MX_USART2_UART_Init+0x4c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a8:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <MX_USART2_UART_Init+0x4c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ae:	4805      	ldr	r0, [pc, #20]	@ (80005c4 <MX_USART2_UART_Init+0x4c>)
 80005b0:	f001 f938 	bl	8001824 <HAL_UART_Init>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005ba:	f000 f875 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000084 	.word	0x20000084
 80005c8:	40004400 	.word	0x40004400

080005cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b088      	sub	sp, #32
 80005d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d2:	f107 0310 	add.w	r3, r7, #16
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000698 <MX_GPIO_Init+0xcc>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	4a2c      	ldr	r2, [pc, #176]	@ (8000698 <MX_GPIO_Init+0xcc>)
 80005e6:	f043 0310 	orr.w	r3, r3, #16
 80005ea:	6193      	str	r3, [r2, #24]
 80005ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000698 <MX_GPIO_Init+0xcc>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	f003 0310 	and.w	r3, r3, #16
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f8:	4b27      	ldr	r3, [pc, #156]	@ (8000698 <MX_GPIO_Init+0xcc>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4a26      	ldr	r2, [pc, #152]	@ (8000698 <MX_GPIO_Init+0xcc>)
 80005fe:	f043 0320 	orr.w	r3, r3, #32
 8000602:	6193      	str	r3, [r2, #24]
 8000604:	4b24      	ldr	r3, [pc, #144]	@ (8000698 <MX_GPIO_Init+0xcc>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	f003 0320 	and.w	r3, r3, #32
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000610:	4b21      	ldr	r3, [pc, #132]	@ (8000698 <MX_GPIO_Init+0xcc>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	4a20      	ldr	r2, [pc, #128]	@ (8000698 <MX_GPIO_Init+0xcc>)
 8000616:	f043 0304 	orr.w	r3, r3, #4
 800061a:	6193      	str	r3, [r2, #24]
 800061c:	4b1e      	ldr	r3, [pc, #120]	@ (8000698 <MX_GPIO_Init+0xcc>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	f003 0304 	and.w	r3, r3, #4
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000628:	4b1b      	ldr	r3, [pc, #108]	@ (8000698 <MX_GPIO_Init+0xcc>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	4a1a      	ldr	r2, [pc, #104]	@ (8000698 <MX_GPIO_Init+0xcc>)
 800062e:	f043 0308 	orr.w	r3, r3, #8
 8000632:	6193      	str	r3, [r2, #24]
 8000634:	4b18      	ldr	r3, [pc, #96]	@ (8000698 <MX_GPIO_Init+0xcc>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	f003 0308 	and.w	r3, r3, #8
 800063c:	603b      	str	r3, [r7, #0]
 800063e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	2120      	movs	r1, #32
 8000644:	4815      	ldr	r0, [pc, #84]	@ (800069c <MX_GPIO_Init+0xd0>)
 8000646:	f000 fc99 	bl	8000f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800064a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800064e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000650:	4b13      	ldr	r3, [pc, #76]	@ (80006a0 <MX_GPIO_Init+0xd4>)
 8000652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000658:	f107 0310 	add.w	r3, r7, #16
 800065c:	4619      	mov	r1, r3
 800065e:	4811      	ldr	r0, [pc, #68]	@ (80006a4 <MX_GPIO_Init+0xd8>)
 8000660:	f000 fb08 	bl	8000c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000664:	2320      	movs	r3, #32
 8000666:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000668:	2301      	movs	r3, #1
 800066a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000670:	2302      	movs	r3, #2
 8000672:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000674:	f107 0310 	add.w	r3, r7, #16
 8000678:	4619      	mov	r1, r3
 800067a:	4808      	ldr	r0, [pc, #32]	@ (800069c <MX_GPIO_Init+0xd0>)
 800067c:	f000 fafa 	bl	8000c74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000680:	2200      	movs	r2, #0
 8000682:	2100      	movs	r1, #0
 8000684:	2028      	movs	r0, #40	@ 0x28
 8000686:	f000 fabe 	bl	8000c06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800068a:	2028      	movs	r0, #40	@ 0x28
 800068c:	f000 fad7 	bl	8000c3e <HAL_NVIC_EnableIRQ>

}
 8000690:	bf00      	nop
 8000692:	3720      	adds	r7, #32
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40021000 	.word	0x40021000
 800069c:	40010800 	.word	0x40010800
 80006a0:	10110000 	.word	0x10110000
 80006a4:	40011000 	.word	0x40011000

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ac:	b672      	cpsid	i
}
 80006ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b0:	bf00      	nop
 80006b2:	e7fd      	b.n	80006b0 <Error_Handler+0x8>

080006b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006ba:	4b15      	ldr	r3, [pc, #84]	@ (8000710 <HAL_MspInit+0x5c>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	4a14      	ldr	r2, [pc, #80]	@ (8000710 <HAL_MspInit+0x5c>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6193      	str	r3, [r2, #24]
 80006c6:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <HAL_MspInit+0x5c>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <HAL_MspInit+0x5c>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000710 <HAL_MspInit+0x5c>)
 80006d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006dc:	61d3      	str	r3, [r2, #28]
 80006de:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <HAL_MspInit+0x5c>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000714 <HAL_MspInit+0x60>)
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	4a04      	ldr	r2, [pc, #16]	@ (8000714 <HAL_MspInit+0x60>)
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000706:	bf00      	nop
 8000708:	3714      	adds	r7, #20
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	40021000 	.word	0x40021000
 8000714:	40010000 	.word	0x40010000

08000718 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	f107 0310 	add.w	r3, r7, #16
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a15      	ldr	r2, [pc, #84]	@ (8000788 <HAL_UART_MspInit+0x70>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d123      	bne.n	8000780 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000738:	4b14      	ldr	r3, [pc, #80]	@ (800078c <HAL_UART_MspInit+0x74>)
 800073a:	69db      	ldr	r3, [r3, #28]
 800073c:	4a13      	ldr	r2, [pc, #76]	@ (800078c <HAL_UART_MspInit+0x74>)
 800073e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000742:	61d3      	str	r3, [r2, #28]
 8000744:	4b11      	ldr	r3, [pc, #68]	@ (800078c <HAL_UART_MspInit+0x74>)
 8000746:	69db      	ldr	r3, [r3, #28]
 8000748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000750:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <HAL_UART_MspInit+0x74>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	4a0d      	ldr	r2, [pc, #52]	@ (800078c <HAL_UART_MspInit+0x74>)
 8000756:	f043 0304 	orr.w	r3, r3, #4
 800075a:	6193      	str	r3, [r2, #24]
 800075c:	4b0b      	ldr	r3, [pc, #44]	@ (800078c <HAL_UART_MspInit+0x74>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	f003 0304 	and.w	r3, r3, #4
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000768:	230c      	movs	r3, #12
 800076a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076c:	2302      	movs	r3, #2
 800076e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2302      	movs	r3, #2
 8000772:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000774:	f107 0310 	add.w	r3, r7, #16
 8000778:	4619      	mov	r1, r3
 800077a:	4805      	ldr	r0, [pc, #20]	@ (8000790 <HAL_UART_MspInit+0x78>)
 800077c:	f000 fa7a 	bl	8000c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000780:	bf00      	nop
 8000782:	3720      	adds	r7, #32
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40004400 	.word	0x40004400
 800078c:	40021000 	.word	0x40021000
 8000790:	40010800 	.word	0x40010800

08000794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <NMI_Handler+0x4>

0800079c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <HardFault_Handler+0x4>

080007a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <MemManage_Handler+0x4>

080007ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <BusFault_Handler+0x4>

080007b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <UsageFault_Handler+0x4>

080007bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr

080007d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr

080007e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e4:	f000 f91c 	bl	8000a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}

080007ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80007f0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80007f4:	f000 fbda 	bl	8000fac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}

080007fc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	e00a      	b.n	8000824 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800080e:	f7ff fe01 	bl	8000414 <__io_getchar>
 8000812:	4601      	mov	r1, r0
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	1c5a      	adds	r2, r3, #1
 8000818:	60ba      	str	r2, [r7, #8]
 800081a:	b2ca      	uxtb	r2, r1
 800081c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	3301      	adds	r3, #1
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	697a      	ldr	r2, [r7, #20]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	429a      	cmp	r2, r3
 800082a:	dbf0      	blt.n	800080e <_read+0x12>
	}

return len;
 800082c:	687b      	ldr	r3, [r7, #4]
}
 800082e:	4618      	mov	r0, r3
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b086      	sub	sp, #24
 800083a:	af00      	add	r7, sp, #0
 800083c:	60f8      	str	r0, [r7, #12]
 800083e:	60b9      	str	r1, [r7, #8]
 8000840:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
 8000846:	e009      	b.n	800085c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	1c5a      	adds	r2, r3, #1
 800084c:	60ba      	str	r2, [r7, #8]
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fdc1 	bl	80003d8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	3301      	adds	r3, #1
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	697a      	ldr	r2, [r7, #20]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	429a      	cmp	r2, r3
 8000862:	dbf1      	blt.n	8000848 <_write+0x12>
	}
	return len;
 8000864:	687b      	ldr	r3, [r7, #4]
}
 8000866:	4618      	mov	r0, r3
 8000868:	3718      	adds	r7, #24
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <_close>:

int _close(int file)
{
 800086e:	b480      	push	{r7}
 8000870:	b083      	sub	sp, #12
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
	return -1;
 8000876:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800087a:	4618      	mov	r0, r3
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr

08000884 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000894:	605a      	str	r2, [r3, #4]
	return 0;
 8000896:	2300      	movs	r3, #0
}
 8000898:	4618      	mov	r0, r3
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr

080008a2 <_isatty>:

int _isatty(int file)
{
 80008a2:	b480      	push	{r7}
 80008a4:	b083      	sub	sp, #12
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
	return 1;
 80008aa:	2301      	movs	r3, #1
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr

080008b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008b6:	b480      	push	{r7}
 80008b8:	b085      	sub	sp, #20
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	60f8      	str	r0, [r7, #12]
 80008be:	60b9      	str	r1, [r7, #8]
 80008c0:	607a      	str	r2, [r7, #4]
	return 0;
 80008c2:	2300      	movs	r3, #0
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr
	...

080008d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d8:	4a14      	ldr	r2, [pc, #80]	@ (800092c <_sbrk+0x5c>)
 80008da:	4b15      	ldr	r3, [pc, #84]	@ (8000930 <_sbrk+0x60>)
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008e4:	4b13      	ldr	r3, [pc, #76]	@ (8000934 <_sbrk+0x64>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d102      	bne.n	80008f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008ec:	4b11      	ldr	r3, [pc, #68]	@ (8000934 <_sbrk+0x64>)
 80008ee:	4a12      	ldr	r2, [pc, #72]	@ (8000938 <_sbrk+0x68>)
 80008f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008f2:	4b10      	ldr	r3, [pc, #64]	@ (8000934 <_sbrk+0x64>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4413      	add	r3, r2
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d207      	bcs.n	8000910 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000900:	f001 fb24 	bl	8001f4c <__errno>
 8000904:	4603      	mov	r3, r0
 8000906:	220c      	movs	r2, #12
 8000908:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800090a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800090e:	e009      	b.n	8000924 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000910:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <_sbrk+0x64>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000916:	4b07      	ldr	r3, [pc, #28]	@ (8000934 <_sbrk+0x64>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	4a05      	ldr	r2, [pc, #20]	@ (8000934 <_sbrk+0x64>)
 8000920:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000922:	68fb      	ldr	r3, [r7, #12]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20005000 	.word	0x20005000
 8000930:	00000400 	.word	0x00000400
 8000934:	200000c8 	.word	0x200000c8
 8000938:	20000220 	.word	0x20000220

0800093c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr

08000948 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000948:	480c      	ldr	r0, [pc, #48]	@ (800097c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800094a:	490d      	ldr	r1, [pc, #52]	@ (8000980 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800094c:	4a0d      	ldr	r2, [pc, #52]	@ (8000984 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000950:	e002      	b.n	8000958 <LoopCopyDataInit>

08000952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000956:	3304      	adds	r3, #4

08000958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800095c:	d3f9      	bcc.n	8000952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800095e:	4a0a      	ldr	r2, [pc, #40]	@ (8000988 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000960:	4c0a      	ldr	r4, [pc, #40]	@ (800098c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000964:	e001      	b.n	800096a <LoopFillZerobss>

08000966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000968:	3204      	adds	r2, #4

0800096a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800096c:	d3fb      	bcc.n	8000966 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800096e:	f7ff ffe5 	bl	800093c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000972:	f001 faf1 	bl	8001f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000976:	f7ff fd63 	bl	8000440 <main>
	b . @endless loop
 800097a:	e7fe      	b.n	800097a <LoopFillZerobss+0x10>
  ldr r0, =_sdata
 800097c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000980:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000984:	08002e28 	.word	0x08002e28
  ldr r2, =_sbss
 8000988:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800098c:	2000021c 	.word	0x2000021c

08000990 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000990:	e7fe      	b.n	8000990 <ADC1_2_IRQHandler>
	...

08000994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000998:	4b08      	ldr	r3, [pc, #32]	@ (80009bc <HAL_Init+0x28>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a07      	ldr	r2, [pc, #28]	@ (80009bc <HAL_Init+0x28>)
 800099e:	f043 0310 	orr.w	r3, r3, #16
 80009a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a4:	2003      	movs	r0, #3
 80009a6:	f000 f923 	bl	8000bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009aa:	2000      	movs	r0, #0
 80009ac:	f000 f808 	bl	80009c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b0:	f7ff fe80 	bl	80006b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40022000 	.word	0x40022000

080009c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c8:	4b12      	ldr	r3, [pc, #72]	@ (8000a14 <HAL_InitTick+0x54>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	4b12      	ldr	r3, [pc, #72]	@ (8000a18 <HAL_InitTick+0x58>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	4619      	mov	r1, r3
 80009d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009da:	fbb2 f3f3 	udiv	r3, r2, r3
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 f93b 	bl	8000c5a <HAL_SYSTICK_Config>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	e00e      	b.n	8000a0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2b0f      	cmp	r3, #15
 80009f2:	d80a      	bhi.n	8000a0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f4:	2200      	movs	r2, #0
 80009f6:	6879      	ldr	r1, [r7, #4]
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009fc:	f000 f903 	bl	8000c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a00:	4a06      	ldr	r2, [pc, #24]	@ (8000a1c <HAL_InitTick+0x5c>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a06:	2300      	movs	r3, #0
 8000a08:	e000      	b.n	8000a0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000000 	.word	0x20000000
 8000a18:	20000008 	.word	0x20000008
 8000a1c:	20000004 	.word	0x20000004

08000a20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a24:	4b05      	ldr	r3, [pc, #20]	@ (8000a3c <HAL_IncTick+0x1c>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b05      	ldr	r3, [pc, #20]	@ (8000a40 <HAL_IncTick+0x20>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4413      	add	r3, r2
 8000a30:	4a03      	ldr	r2, [pc, #12]	@ (8000a40 <HAL_IncTick+0x20>)
 8000a32:	6013      	str	r3, [r2, #0]
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	20000008 	.word	0x20000008
 8000a40:	200000cc 	.word	0x200000cc

08000a44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return uwTick;
 8000a48:	4b02      	ldr	r3, [pc, #8]	@ (8000a54 <HAL_GetTick+0x10>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr
 8000a54:	200000cc 	.word	0x200000cc

08000a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a68:	4b0c      	ldr	r3, [pc, #48]	@ (8000a9c <__NVIC_SetPriorityGrouping+0x44>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a6e:	68ba      	ldr	r2, [r7, #8]
 8000a70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a74:	4013      	ands	r3, r2
 8000a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a8a:	4a04      	ldr	r2, [pc, #16]	@ (8000a9c <__NVIC_SetPriorityGrouping+0x44>)
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	60d3      	str	r3, [r2, #12]
}
 8000a90:	bf00      	nop
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa4:	4b04      	ldr	r3, [pc, #16]	@ (8000ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	0a1b      	lsrs	r3, r3, #8
 8000aaa:	f003 0307 	and.w	r3, r3, #7
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	db0b      	blt.n	8000ae6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	f003 021f 	and.w	r2, r3, #31
 8000ad4:	4906      	ldr	r1, [pc, #24]	@ (8000af0 <__NVIC_EnableIRQ+0x34>)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	095b      	lsrs	r3, r3, #5
 8000adc:	2001      	movs	r0, #1
 8000ade:	fa00 f202 	lsl.w	r2, r0, r2
 8000ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr
 8000af0:	e000e100 	.word	0xe000e100

08000af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	6039      	str	r1, [r7, #0]
 8000afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	db0a      	blt.n	8000b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	490c      	ldr	r1, [pc, #48]	@ (8000b40 <__NVIC_SetPriority+0x4c>)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	0112      	lsls	r2, r2, #4
 8000b14:	b2d2      	uxtb	r2, r2
 8000b16:	440b      	add	r3, r1
 8000b18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b1c:	e00a      	b.n	8000b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	4908      	ldr	r1, [pc, #32]	@ (8000b44 <__NVIC_SetPriority+0x50>)
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	f003 030f 	and.w	r3, r3, #15
 8000b2a:	3b04      	subs	r3, #4
 8000b2c:	0112      	lsls	r2, r2, #4
 8000b2e:	b2d2      	uxtb	r2, r2
 8000b30:	440b      	add	r3, r1
 8000b32:	761a      	strb	r2, [r3, #24]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000e100 	.word	0xe000e100
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b089      	sub	sp, #36	@ 0x24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	f1c3 0307 	rsb	r3, r3, #7
 8000b62:	2b04      	cmp	r3, #4
 8000b64:	bf28      	it	cs
 8000b66:	2304      	movcs	r3, #4
 8000b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	3304      	adds	r3, #4
 8000b6e:	2b06      	cmp	r3, #6
 8000b70:	d902      	bls.n	8000b78 <NVIC_EncodePriority+0x30>
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	3b03      	subs	r3, #3
 8000b76:	e000      	b.n	8000b7a <NVIC_EncodePriority+0x32>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43da      	mvns	r2, r3
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b90:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9a:	43d9      	mvns	r1, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	4313      	orrs	r3, r2
         );
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3724      	adds	r7, #36	@ 0x24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr

08000bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bbc:	d301      	bcc.n	8000bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e00f      	b.n	8000be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bec <SysTick_Config+0x40>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bca:	210f      	movs	r1, #15
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bd0:	f7ff ff90 	bl	8000af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd4:	4b05      	ldr	r3, [pc, #20]	@ (8000bec <SysTick_Config+0x40>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bda:	4b04      	ldr	r3, [pc, #16]	@ (8000bec <SysTick_Config+0x40>)
 8000bdc:	2207      	movs	r2, #7
 8000bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	e000e010 	.word	0xe000e010

08000bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff ff2d 	bl	8000a58 <__NVIC_SetPriorityGrouping>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b086      	sub	sp, #24
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	607a      	str	r2, [r7, #4]
 8000c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c18:	f7ff ff42 	bl	8000aa0 <__NVIC_GetPriorityGrouping>
 8000c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	68b9      	ldr	r1, [r7, #8]
 8000c22:	6978      	ldr	r0, [r7, #20]
 8000c24:	f7ff ff90 	bl	8000b48 <NVIC_EncodePriority>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c2e:	4611      	mov	r1, r2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff ff5f 	bl	8000af4 <__NVIC_SetPriority>
}
 8000c36:	bf00      	nop
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ff35 	bl	8000abc <__NVIC_EnableIRQ>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff ffa2 	bl	8000bac <SysTick_Config>
 8000c68:	4603      	mov	r3, r0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b08b      	sub	sp, #44	@ 0x2c
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c82:	2300      	movs	r3, #0
 8000c84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c86:	e169      	b.n	8000f5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c88:	2201      	movs	r2, #1
 8000c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	69fa      	ldr	r2, [r7, #28]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	f040 8158 	bne.w	8000f56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	4a9a      	ldr	r2, [pc, #616]	@ (8000f14 <HAL_GPIO_Init+0x2a0>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d05e      	beq.n	8000d6e <HAL_GPIO_Init+0xfa>
 8000cb0:	4a98      	ldr	r2, [pc, #608]	@ (8000f14 <HAL_GPIO_Init+0x2a0>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d875      	bhi.n	8000da2 <HAL_GPIO_Init+0x12e>
 8000cb6:	4a98      	ldr	r2, [pc, #608]	@ (8000f18 <HAL_GPIO_Init+0x2a4>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d058      	beq.n	8000d6e <HAL_GPIO_Init+0xfa>
 8000cbc:	4a96      	ldr	r2, [pc, #600]	@ (8000f18 <HAL_GPIO_Init+0x2a4>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d86f      	bhi.n	8000da2 <HAL_GPIO_Init+0x12e>
 8000cc2:	4a96      	ldr	r2, [pc, #600]	@ (8000f1c <HAL_GPIO_Init+0x2a8>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d052      	beq.n	8000d6e <HAL_GPIO_Init+0xfa>
 8000cc8:	4a94      	ldr	r2, [pc, #592]	@ (8000f1c <HAL_GPIO_Init+0x2a8>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d869      	bhi.n	8000da2 <HAL_GPIO_Init+0x12e>
 8000cce:	4a94      	ldr	r2, [pc, #592]	@ (8000f20 <HAL_GPIO_Init+0x2ac>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d04c      	beq.n	8000d6e <HAL_GPIO_Init+0xfa>
 8000cd4:	4a92      	ldr	r2, [pc, #584]	@ (8000f20 <HAL_GPIO_Init+0x2ac>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d863      	bhi.n	8000da2 <HAL_GPIO_Init+0x12e>
 8000cda:	4a92      	ldr	r2, [pc, #584]	@ (8000f24 <HAL_GPIO_Init+0x2b0>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d046      	beq.n	8000d6e <HAL_GPIO_Init+0xfa>
 8000ce0:	4a90      	ldr	r2, [pc, #576]	@ (8000f24 <HAL_GPIO_Init+0x2b0>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d85d      	bhi.n	8000da2 <HAL_GPIO_Init+0x12e>
 8000ce6:	2b12      	cmp	r3, #18
 8000ce8:	d82a      	bhi.n	8000d40 <HAL_GPIO_Init+0xcc>
 8000cea:	2b12      	cmp	r3, #18
 8000cec:	d859      	bhi.n	8000da2 <HAL_GPIO_Init+0x12e>
 8000cee:	a201      	add	r2, pc, #4	@ (adr r2, 8000cf4 <HAL_GPIO_Init+0x80>)
 8000cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf4:	08000d6f 	.word	0x08000d6f
 8000cf8:	08000d49 	.word	0x08000d49
 8000cfc:	08000d5b 	.word	0x08000d5b
 8000d00:	08000d9d 	.word	0x08000d9d
 8000d04:	08000da3 	.word	0x08000da3
 8000d08:	08000da3 	.word	0x08000da3
 8000d0c:	08000da3 	.word	0x08000da3
 8000d10:	08000da3 	.word	0x08000da3
 8000d14:	08000da3 	.word	0x08000da3
 8000d18:	08000da3 	.word	0x08000da3
 8000d1c:	08000da3 	.word	0x08000da3
 8000d20:	08000da3 	.word	0x08000da3
 8000d24:	08000da3 	.word	0x08000da3
 8000d28:	08000da3 	.word	0x08000da3
 8000d2c:	08000da3 	.word	0x08000da3
 8000d30:	08000da3 	.word	0x08000da3
 8000d34:	08000da3 	.word	0x08000da3
 8000d38:	08000d51 	.word	0x08000d51
 8000d3c:	08000d65 	.word	0x08000d65
 8000d40:	4a79      	ldr	r2, [pc, #484]	@ (8000f28 <HAL_GPIO_Init+0x2b4>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d013      	beq.n	8000d6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d46:	e02c      	b.n	8000da2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	623b      	str	r3, [r7, #32]
          break;
 8000d4e:	e029      	b.n	8000da4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	3304      	adds	r3, #4
 8000d56:	623b      	str	r3, [r7, #32]
          break;
 8000d58:	e024      	b.n	8000da4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	3308      	adds	r3, #8
 8000d60:	623b      	str	r3, [r7, #32]
          break;
 8000d62:	e01f      	b.n	8000da4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	330c      	adds	r3, #12
 8000d6a:	623b      	str	r3, [r7, #32]
          break;
 8000d6c:	e01a      	b.n	8000da4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d102      	bne.n	8000d7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d76:	2304      	movs	r3, #4
 8000d78:	623b      	str	r3, [r7, #32]
          break;
 8000d7a:	e013      	b.n	8000da4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d105      	bne.n	8000d90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d84:	2308      	movs	r3, #8
 8000d86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	69fa      	ldr	r2, [r7, #28]
 8000d8c:	611a      	str	r2, [r3, #16]
          break;
 8000d8e:	e009      	b.n	8000da4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d90:	2308      	movs	r3, #8
 8000d92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	69fa      	ldr	r2, [r7, #28]
 8000d98:	615a      	str	r2, [r3, #20]
          break;
 8000d9a:	e003      	b.n	8000da4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	623b      	str	r3, [r7, #32]
          break;
 8000da0:	e000      	b.n	8000da4 <HAL_GPIO_Init+0x130>
          break;
 8000da2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	2bff      	cmp	r3, #255	@ 0xff
 8000da8:	d801      	bhi.n	8000dae <HAL_GPIO_Init+0x13a>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	e001      	b.n	8000db2 <HAL_GPIO_Init+0x13e>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3304      	adds	r3, #4
 8000db2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	2bff      	cmp	r3, #255	@ 0xff
 8000db8:	d802      	bhi.n	8000dc0 <HAL_GPIO_Init+0x14c>
 8000dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	e002      	b.n	8000dc6 <HAL_GPIO_Init+0x152>
 8000dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dc2:	3b08      	subs	r3, #8
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	210f      	movs	r1, #15
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	6a39      	ldr	r1, [r7, #32]
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8000de0:	431a      	orrs	r2, r3
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f000 80b1 	beq.w	8000f56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000df4:	4b4d      	ldr	r3, [pc, #308]	@ (8000f2c <HAL_GPIO_Init+0x2b8>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4a4c      	ldr	r2, [pc, #304]	@ (8000f2c <HAL_GPIO_Init+0x2b8>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	6193      	str	r3, [r2, #24]
 8000e00:	4b4a      	ldr	r3, [pc, #296]	@ (8000f2c <HAL_GPIO_Init+0x2b8>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e0c:	4a48      	ldr	r2, [pc, #288]	@ (8000f30 <HAL_GPIO_Init+0x2bc>)
 8000e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e10:	089b      	lsrs	r3, r3, #2
 8000e12:	3302      	adds	r3, #2
 8000e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	220f      	movs	r2, #15
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a40      	ldr	r2, [pc, #256]	@ (8000f34 <HAL_GPIO_Init+0x2c0>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d013      	beq.n	8000e60 <HAL_GPIO_Init+0x1ec>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4a3f      	ldr	r2, [pc, #252]	@ (8000f38 <HAL_GPIO_Init+0x2c4>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d00d      	beq.n	8000e5c <HAL_GPIO_Init+0x1e8>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a3e      	ldr	r2, [pc, #248]	@ (8000f3c <HAL_GPIO_Init+0x2c8>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d007      	beq.n	8000e58 <HAL_GPIO_Init+0x1e4>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a3d      	ldr	r2, [pc, #244]	@ (8000f40 <HAL_GPIO_Init+0x2cc>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d101      	bne.n	8000e54 <HAL_GPIO_Init+0x1e0>
 8000e50:	2303      	movs	r3, #3
 8000e52:	e006      	b.n	8000e62 <HAL_GPIO_Init+0x1ee>
 8000e54:	2304      	movs	r3, #4
 8000e56:	e004      	b.n	8000e62 <HAL_GPIO_Init+0x1ee>
 8000e58:	2302      	movs	r3, #2
 8000e5a:	e002      	b.n	8000e62 <HAL_GPIO_Init+0x1ee>
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e000      	b.n	8000e62 <HAL_GPIO_Init+0x1ee>
 8000e60:	2300      	movs	r3, #0
 8000e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e64:	f002 0203 	and.w	r2, r2, #3
 8000e68:	0092      	lsls	r2, r2, #2
 8000e6a:	4093      	lsls	r3, r2
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e72:	492f      	ldr	r1, [pc, #188]	@ (8000f30 <HAL_GPIO_Init+0x2bc>)
 8000e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e76:	089b      	lsrs	r3, r3, #2
 8000e78:	3302      	adds	r3, #2
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d006      	beq.n	8000e9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e8c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f44 <HAL_GPIO_Init+0x2d0>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	492c      	ldr	r1, [pc, #176]	@ (8000f44 <HAL_GPIO_Init+0x2d0>)
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	600b      	str	r3, [r1, #0]
 8000e98:	e006      	b.n	8000ea8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f44 <HAL_GPIO_Init+0x2d0>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	4928      	ldr	r1, [pc, #160]	@ (8000f44 <HAL_GPIO_Init+0x2d0>)
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d006      	beq.n	8000ec2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000eb4:	4b23      	ldr	r3, [pc, #140]	@ (8000f44 <HAL_GPIO_Init+0x2d0>)
 8000eb6:	685a      	ldr	r2, [r3, #4]
 8000eb8:	4922      	ldr	r1, [pc, #136]	@ (8000f44 <HAL_GPIO_Init+0x2d0>)
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	604b      	str	r3, [r1, #4]
 8000ec0:	e006      	b.n	8000ed0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ec2:	4b20      	ldr	r3, [pc, #128]	@ (8000f44 <HAL_GPIO_Init+0x2d0>)
 8000ec4:	685a      	ldr	r2, [r3, #4]
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	491e      	ldr	r1, [pc, #120]	@ (8000f44 <HAL_GPIO_Init+0x2d0>)
 8000ecc:	4013      	ands	r3, r2
 8000ece:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d006      	beq.n	8000eea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000edc:	4b19      	ldr	r3, [pc, #100]	@ (8000f44 <HAL_GPIO_Init+0x2d0>)
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	4918      	ldr	r1, [pc, #96]	@ (8000f44 <HAL_GPIO_Init+0x2d0>)
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	608b      	str	r3, [r1, #8]
 8000ee8:	e006      	b.n	8000ef8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000eea:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <HAL_GPIO_Init+0x2d0>)
 8000eec:	689a      	ldr	r2, [r3, #8]
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	4914      	ldr	r1, [pc, #80]	@ (8000f44 <HAL_GPIO_Init+0x2d0>)
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d021      	beq.n	8000f48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f04:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <HAL_GPIO_Init+0x2d0>)
 8000f06:	68da      	ldr	r2, [r3, #12]
 8000f08:	490e      	ldr	r1, [pc, #56]	@ (8000f44 <HAL_GPIO_Init+0x2d0>)
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	60cb      	str	r3, [r1, #12]
 8000f10:	e021      	b.n	8000f56 <HAL_GPIO_Init+0x2e2>
 8000f12:	bf00      	nop
 8000f14:	10320000 	.word	0x10320000
 8000f18:	10310000 	.word	0x10310000
 8000f1c:	10220000 	.word	0x10220000
 8000f20:	10210000 	.word	0x10210000
 8000f24:	10120000 	.word	0x10120000
 8000f28:	10110000 	.word	0x10110000
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40010000 	.word	0x40010000
 8000f34:	40010800 	.word	0x40010800
 8000f38:	40010c00 	.word	0x40010c00
 8000f3c:	40011000 	.word	0x40011000
 8000f40:	40011400 	.word	0x40011400
 8000f44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f48:	4b0b      	ldr	r3, [pc, #44]	@ (8000f78 <HAL_GPIO_Init+0x304>)
 8000f4a:	68da      	ldr	r2, [r3, #12]
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	4909      	ldr	r1, [pc, #36]	@ (8000f78 <HAL_GPIO_Init+0x304>)
 8000f52:	4013      	ands	r3, r2
 8000f54:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f58:	3301      	adds	r3, #1
 8000f5a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f62:	fa22 f303 	lsr.w	r3, r2, r3
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f47f ae8e 	bne.w	8000c88 <HAL_GPIO_Init+0x14>
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	bf00      	nop
 8000f70:	372c      	adds	r7, #44	@ 0x2c
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr
 8000f78:	40010400 	.word	0x40010400

08000f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	807b      	strh	r3, [r7, #2]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f8c:	787b      	ldrb	r3, [r7, #1]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f92:	887a      	ldrh	r2, [r7, #2]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f98:	e003      	b.n	8000fa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f9a:	887b      	ldrh	r3, [r7, #2]
 8000f9c:	041a      	lsls	r2, r3, #16
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	611a      	str	r2, [r3, #16]
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr

08000fac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000fb6:	4b08      	ldr	r3, [pc, #32]	@ (8000fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fb8:	695a      	ldr	r2, [r3, #20]
 8000fba:	88fb      	ldrh	r3, [r7, #6]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d006      	beq.n	8000fd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fc2:	4a05      	ldr	r2, [pc, #20]	@ (8000fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fc4:	88fb      	ldrh	r3, [r7, #6]
 8000fc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fc8:	88fb      	ldrh	r3, [r7, #6]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 f806 	bl	8000fdc <HAL_GPIO_EXTI_Callback>
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40010400 	.word	0x40010400

08000fdc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr

08000ff0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d101      	bne.n	8001002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e272      	b.n	80014e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 8087 	beq.w	800111e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001010:	4b92      	ldr	r3, [pc, #584]	@ (800125c <HAL_RCC_OscConfig+0x26c>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 030c 	and.w	r3, r3, #12
 8001018:	2b04      	cmp	r3, #4
 800101a:	d00c      	beq.n	8001036 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800101c:	4b8f      	ldr	r3, [pc, #572]	@ (800125c <HAL_RCC_OscConfig+0x26c>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 030c 	and.w	r3, r3, #12
 8001024:	2b08      	cmp	r3, #8
 8001026:	d112      	bne.n	800104e <HAL_RCC_OscConfig+0x5e>
 8001028:	4b8c      	ldr	r3, [pc, #560]	@ (800125c <HAL_RCC_OscConfig+0x26c>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001030:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001034:	d10b      	bne.n	800104e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001036:	4b89      	ldr	r3, [pc, #548]	@ (800125c <HAL_RCC_OscConfig+0x26c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d06c      	beq.n	800111c <HAL_RCC_OscConfig+0x12c>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d168      	bne.n	800111c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e24c      	b.n	80014e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001056:	d106      	bne.n	8001066 <HAL_RCC_OscConfig+0x76>
 8001058:	4b80      	ldr	r3, [pc, #512]	@ (800125c <HAL_RCC_OscConfig+0x26c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a7f      	ldr	r2, [pc, #508]	@ (800125c <HAL_RCC_OscConfig+0x26c>)
 800105e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	e02e      	b.n	80010c4 <HAL_RCC_OscConfig+0xd4>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d10c      	bne.n	8001088 <HAL_RCC_OscConfig+0x98>
 800106e:	4b7b      	ldr	r3, [pc, #492]	@ (800125c <HAL_RCC_OscConfig+0x26c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a7a      	ldr	r2, [pc, #488]	@ (800125c <HAL_RCC_OscConfig+0x26c>)
 8001074:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	4b78      	ldr	r3, [pc, #480]	@ (800125c <HAL_RCC_OscConfig+0x26c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a77      	ldr	r2, [pc, #476]	@ (800125c <HAL_RCC_OscConfig+0x26c>)
 8001080:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	e01d      	b.n	80010c4 <HAL_RCC_OscConfig+0xd4>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001090:	d10c      	bne.n	80010ac <HAL_RCC_OscConfig+0xbc>
 8001092:	4b72      	ldr	r3, [pc, #456]	@ (800125c <HAL_RCC_OscConfig+0x26c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a71      	ldr	r2, [pc, #452]	@ (800125c <HAL_RCC_OscConfig+0x26c>)
 8001098:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	4b6f      	ldr	r3, [pc, #444]	@ (800125c <HAL_RCC_OscConfig+0x26c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a6e      	ldr	r2, [pc, #440]	@ (800125c <HAL_RCC_OscConfig+0x26c>)
 80010a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	e00b      	b.n	80010c4 <HAL_RCC_OscConfig+0xd4>
 80010ac:	4b6b      	ldr	r3, [pc, #428]	@ (800125c <HAL_RCC_OscConfig+0x26c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a6a      	ldr	r2, [pc, #424]	@ (800125c <HAL_RCC_OscConfig+0x26c>)
 80010b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b68      	ldr	r3, [pc, #416]	@ (800125c <HAL_RCC_OscConfig+0x26c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a67      	ldr	r2, [pc, #412]	@ (800125c <HAL_RCC_OscConfig+0x26c>)
 80010be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d013      	beq.n	80010f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010cc:	f7ff fcba 	bl	8000a44 <HAL_GetTick>
 80010d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010d4:	f7ff fcb6 	bl	8000a44 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b64      	cmp	r3, #100	@ 0x64
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e200      	b.n	80014e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e6:	4b5d      	ldr	r3, [pc, #372]	@ (800125c <HAL_RCC_OscConfig+0x26c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0f0      	beq.n	80010d4 <HAL_RCC_OscConfig+0xe4>
 80010f2:	e014      	b.n	800111e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f4:	f7ff fca6 	bl	8000a44 <HAL_GetTick>
 80010f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010fc:	f7ff fca2 	bl	8000a44 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b64      	cmp	r3, #100	@ 0x64
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e1ec      	b.n	80014e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800110e:	4b53      	ldr	r3, [pc, #332]	@ (800125c <HAL_RCC_OscConfig+0x26c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f0      	bne.n	80010fc <HAL_RCC_OscConfig+0x10c>
 800111a:	e000      	b.n	800111e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800111c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d063      	beq.n	80011f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800112a:	4b4c      	ldr	r3, [pc, #304]	@ (800125c <HAL_RCC_OscConfig+0x26c>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 030c 	and.w	r3, r3, #12
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00b      	beq.n	800114e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001136:	4b49      	ldr	r3, [pc, #292]	@ (800125c <HAL_RCC_OscConfig+0x26c>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f003 030c 	and.w	r3, r3, #12
 800113e:	2b08      	cmp	r3, #8
 8001140:	d11c      	bne.n	800117c <HAL_RCC_OscConfig+0x18c>
 8001142:	4b46      	ldr	r3, [pc, #280]	@ (800125c <HAL_RCC_OscConfig+0x26c>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d116      	bne.n	800117c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800114e:	4b43      	ldr	r3, [pc, #268]	@ (800125c <HAL_RCC_OscConfig+0x26c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d005      	beq.n	8001166 <HAL_RCC_OscConfig+0x176>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d001      	beq.n	8001166 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e1c0      	b.n	80014e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001166:	4b3d      	ldr	r3, [pc, #244]	@ (800125c <HAL_RCC_OscConfig+0x26c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	4939      	ldr	r1, [pc, #228]	@ (800125c <HAL_RCC_OscConfig+0x26c>)
 8001176:	4313      	orrs	r3, r2
 8001178:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800117a:	e03a      	b.n	80011f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d020      	beq.n	80011c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001184:	4b36      	ldr	r3, [pc, #216]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 8001186:	2201      	movs	r2, #1
 8001188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118a:	f7ff fc5b 	bl	8000a44 <HAL_GetTick>
 800118e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001190:	e008      	b.n	80011a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001192:	f7ff fc57 	bl	8000a44 <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e1a1      	b.n	80014e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a4:	4b2d      	ldr	r3, [pc, #180]	@ (800125c <HAL_RCC_OscConfig+0x26c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d0f0      	beq.n	8001192 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b0:	4b2a      	ldr	r3, [pc, #168]	@ (800125c <HAL_RCC_OscConfig+0x26c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	4927      	ldr	r1, [pc, #156]	@ (800125c <HAL_RCC_OscConfig+0x26c>)
 80011c0:	4313      	orrs	r3, r2
 80011c2:	600b      	str	r3, [r1, #0]
 80011c4:	e015      	b.n	80011f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011c6:	4b26      	ldr	r3, [pc, #152]	@ (8001260 <HAL_RCC_OscConfig+0x270>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011cc:	f7ff fc3a 	bl	8000a44 <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011d2:	e008      	b.n	80011e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011d4:	f7ff fc36 	bl	8000a44 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e180      	b.n	80014e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011e6:	4b1d      	ldr	r3, [pc, #116]	@ (800125c <HAL_RCC_OscConfig+0x26c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1f0      	bne.n	80011d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0308 	and.w	r3, r3, #8
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d03a      	beq.n	8001274 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d019      	beq.n	800123a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001206:	4b17      	ldr	r3, [pc, #92]	@ (8001264 <HAL_RCC_OscConfig+0x274>)
 8001208:	2201      	movs	r2, #1
 800120a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800120c:	f7ff fc1a 	bl	8000a44 <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001212:	e008      	b.n	8001226 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001214:	f7ff fc16 	bl	8000a44 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e160      	b.n	80014e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001226:	4b0d      	ldr	r3, [pc, #52]	@ (800125c <HAL_RCC_OscConfig+0x26c>)
 8001228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d0f0      	beq.n	8001214 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001232:	2001      	movs	r0, #1
 8001234:	f000 fad8 	bl	80017e8 <RCC_Delay>
 8001238:	e01c      	b.n	8001274 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800123a:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <HAL_RCC_OscConfig+0x274>)
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001240:	f7ff fc00 	bl	8000a44 <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001246:	e00f      	b.n	8001268 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001248:	f7ff fbfc 	bl	8000a44 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d908      	bls.n	8001268 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e146      	b.n	80014e8 <HAL_RCC_OscConfig+0x4f8>
 800125a:	bf00      	nop
 800125c:	40021000 	.word	0x40021000
 8001260:	42420000 	.word	0x42420000
 8001264:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001268:	4b92      	ldr	r3, [pc, #584]	@ (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 800126a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1e9      	bne.n	8001248 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	2b00      	cmp	r3, #0
 800127e:	f000 80a6 	beq.w	80013ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001282:	2300      	movs	r3, #0
 8001284:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001286:	4b8b      	ldr	r3, [pc, #556]	@ (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10d      	bne.n	80012ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	4b88      	ldr	r3, [pc, #544]	@ (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	4a87      	ldr	r2, [pc, #540]	@ (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 8001298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800129c:	61d3      	str	r3, [r2, #28]
 800129e:	4b85      	ldr	r3, [pc, #532]	@ (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012aa:	2301      	movs	r3, #1
 80012ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ae:	4b82      	ldr	r3, [pc, #520]	@ (80014b8 <HAL_RCC_OscConfig+0x4c8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d118      	bne.n	80012ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012ba:	4b7f      	ldr	r3, [pc, #508]	@ (80014b8 <HAL_RCC_OscConfig+0x4c8>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a7e      	ldr	r2, [pc, #504]	@ (80014b8 <HAL_RCC_OscConfig+0x4c8>)
 80012c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012c6:	f7ff fbbd 	bl	8000a44 <HAL_GetTick>
 80012ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ce:	f7ff fbb9 	bl	8000a44 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b64      	cmp	r3, #100	@ 0x64
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e103      	b.n	80014e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e0:	4b75      	ldr	r3, [pc, #468]	@ (80014b8 <HAL_RCC_OscConfig+0x4c8>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0f0      	beq.n	80012ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d106      	bne.n	8001302 <HAL_RCC_OscConfig+0x312>
 80012f4:	4b6f      	ldr	r3, [pc, #444]	@ (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	4a6e      	ldr	r2, [pc, #440]	@ (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	6213      	str	r3, [r2, #32]
 8001300:	e02d      	b.n	800135e <HAL_RCC_OscConfig+0x36e>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10c      	bne.n	8001324 <HAL_RCC_OscConfig+0x334>
 800130a:	4b6a      	ldr	r3, [pc, #424]	@ (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 800130c:	6a1b      	ldr	r3, [r3, #32]
 800130e:	4a69      	ldr	r2, [pc, #420]	@ (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 8001310:	f023 0301 	bic.w	r3, r3, #1
 8001314:	6213      	str	r3, [r2, #32]
 8001316:	4b67      	ldr	r3, [pc, #412]	@ (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 8001318:	6a1b      	ldr	r3, [r3, #32]
 800131a:	4a66      	ldr	r2, [pc, #408]	@ (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 800131c:	f023 0304 	bic.w	r3, r3, #4
 8001320:	6213      	str	r3, [r2, #32]
 8001322:	e01c      	b.n	800135e <HAL_RCC_OscConfig+0x36e>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	2b05      	cmp	r3, #5
 800132a:	d10c      	bne.n	8001346 <HAL_RCC_OscConfig+0x356>
 800132c:	4b61      	ldr	r3, [pc, #388]	@ (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	4a60      	ldr	r2, [pc, #384]	@ (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 8001332:	f043 0304 	orr.w	r3, r3, #4
 8001336:	6213      	str	r3, [r2, #32]
 8001338:	4b5e      	ldr	r3, [pc, #376]	@ (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 800133a:	6a1b      	ldr	r3, [r3, #32]
 800133c:	4a5d      	ldr	r2, [pc, #372]	@ (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	6213      	str	r3, [r2, #32]
 8001344:	e00b      	b.n	800135e <HAL_RCC_OscConfig+0x36e>
 8001346:	4b5b      	ldr	r3, [pc, #364]	@ (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	4a5a      	ldr	r2, [pc, #360]	@ (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 800134c:	f023 0301 	bic.w	r3, r3, #1
 8001350:	6213      	str	r3, [r2, #32]
 8001352:	4b58      	ldr	r3, [pc, #352]	@ (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 8001354:	6a1b      	ldr	r3, [r3, #32]
 8001356:	4a57      	ldr	r2, [pc, #348]	@ (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 8001358:	f023 0304 	bic.w	r3, r3, #4
 800135c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d015      	beq.n	8001392 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001366:	f7ff fb6d 	bl	8000a44 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800136c:	e00a      	b.n	8001384 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800136e:	f7ff fb69 	bl	8000a44 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800137c:	4293      	cmp	r3, r2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e0b1      	b.n	80014e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001384:	4b4b      	ldr	r3, [pc, #300]	@ (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0ee      	beq.n	800136e <HAL_RCC_OscConfig+0x37e>
 8001390:	e014      	b.n	80013bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001392:	f7ff fb57 	bl	8000a44 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001398:	e00a      	b.n	80013b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800139a:	f7ff fb53 	bl	8000a44 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e09b      	b.n	80014e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b0:	4b40      	ldr	r3, [pc, #256]	@ (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1ee      	bne.n	800139a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013bc:	7dfb      	ldrb	r3, [r7, #23]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d105      	bne.n	80013ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013c2:	4b3c      	ldr	r3, [pc, #240]	@ (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	4a3b      	ldr	r2, [pc, #236]	@ (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 80013c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f000 8087 	beq.w	80014e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013d8:	4b36      	ldr	r3, [pc, #216]	@ (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 030c 	and.w	r3, r3, #12
 80013e0:	2b08      	cmp	r3, #8
 80013e2:	d061      	beq.n	80014a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d146      	bne.n	800147a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ec:	4b33      	ldr	r3, [pc, #204]	@ (80014bc <HAL_RCC_OscConfig+0x4cc>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f2:	f7ff fb27 	bl	8000a44 <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013fa:	f7ff fb23 	bl	8000a44 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e06d      	b.n	80014e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800140c:	4b29      	ldr	r3, [pc, #164]	@ (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1f0      	bne.n	80013fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001420:	d108      	bne.n	8001434 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001422:	4b24      	ldr	r3, [pc, #144]	@ (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	4921      	ldr	r1, [pc, #132]	@ (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 8001430:	4313      	orrs	r3, r2
 8001432:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001434:	4b1f      	ldr	r3, [pc, #124]	@ (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a19      	ldr	r1, [r3, #32]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001444:	430b      	orrs	r3, r1
 8001446:	491b      	ldr	r1, [pc, #108]	@ (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 8001448:	4313      	orrs	r3, r2
 800144a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800144c:	4b1b      	ldr	r3, [pc, #108]	@ (80014bc <HAL_RCC_OscConfig+0x4cc>)
 800144e:	2201      	movs	r2, #1
 8001450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001452:	f7ff faf7 	bl	8000a44 <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800145a:	f7ff faf3 	bl	8000a44 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e03d      	b.n	80014e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800146c:	4b11      	ldr	r3, [pc, #68]	@ (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0f0      	beq.n	800145a <HAL_RCC_OscConfig+0x46a>
 8001478:	e035      	b.n	80014e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800147a:	4b10      	ldr	r3, [pc, #64]	@ (80014bc <HAL_RCC_OscConfig+0x4cc>)
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001480:	f7ff fae0 	bl	8000a44 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001488:	f7ff fadc 	bl	8000a44 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e026      	b.n	80014e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800149a:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <HAL_RCC_OscConfig+0x4c4>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f0      	bne.n	8001488 <HAL_RCC_OscConfig+0x498>
 80014a6:	e01e      	b.n	80014e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	69db      	ldr	r3, [r3, #28]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d107      	bne.n	80014c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e019      	b.n	80014e8 <HAL_RCC_OscConfig+0x4f8>
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40007000 	.word	0x40007000
 80014bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014c0:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <HAL_RCC_OscConfig+0x500>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d106      	bne.n	80014e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014de:	429a      	cmp	r2, r3
 80014e0:	d001      	beq.n	80014e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e000      	b.n	80014e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40021000 	.word	0x40021000

080014f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d101      	bne.n	8001508 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e0d0      	b.n	80016aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001508:	4b6a      	ldr	r3, [pc, #424]	@ (80016b4 <HAL_RCC_ClockConfig+0x1c0>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0307 	and.w	r3, r3, #7
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	429a      	cmp	r2, r3
 8001514:	d910      	bls.n	8001538 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001516:	4b67      	ldr	r3, [pc, #412]	@ (80016b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f023 0207 	bic.w	r2, r3, #7
 800151e:	4965      	ldr	r1, [pc, #404]	@ (80016b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	4313      	orrs	r3, r2
 8001524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001526:	4b63      	ldr	r3, [pc, #396]	@ (80016b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	429a      	cmp	r2, r3
 8001532:	d001      	beq.n	8001538 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e0b8      	b.n	80016aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d020      	beq.n	8001586 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	2b00      	cmp	r3, #0
 800154e:	d005      	beq.n	800155c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001550:	4b59      	ldr	r3, [pc, #356]	@ (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	4a58      	ldr	r2, [pc, #352]	@ (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001556:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800155a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0308 	and.w	r3, r3, #8
 8001564:	2b00      	cmp	r3, #0
 8001566:	d005      	beq.n	8001574 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001568:	4b53      	ldr	r3, [pc, #332]	@ (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	4a52      	ldr	r2, [pc, #328]	@ (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 800156e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001572:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001574:	4b50      	ldr	r3, [pc, #320]	@ (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	494d      	ldr	r1, [pc, #308]	@ (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001582:	4313      	orrs	r3, r2
 8001584:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b00      	cmp	r3, #0
 8001590:	d040      	beq.n	8001614 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d107      	bne.n	80015aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159a:	4b47      	ldr	r3, [pc, #284]	@ (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d115      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e07f      	b.n	80016aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d107      	bne.n	80015c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b2:	4b41      	ldr	r3, [pc, #260]	@ (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d109      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e073      	b.n	80016aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c2:	4b3d      	ldr	r3, [pc, #244]	@ (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e06b      	b.n	80016aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015d2:	4b39      	ldr	r3, [pc, #228]	@ (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f023 0203 	bic.w	r2, r3, #3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	4936      	ldr	r1, [pc, #216]	@ (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015e4:	f7ff fa2e 	bl	8000a44 <HAL_GetTick>
 80015e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ea:	e00a      	b.n	8001602 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ec:	f7ff fa2a 	bl	8000a44 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e053      	b.n	80016aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001602:	4b2d      	ldr	r3, [pc, #180]	@ (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 020c 	and.w	r2, r3, #12
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	429a      	cmp	r2, r3
 8001612:	d1eb      	bne.n	80015ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001614:	4b27      	ldr	r3, [pc, #156]	@ (80016b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	429a      	cmp	r2, r3
 8001620:	d210      	bcs.n	8001644 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001622:	4b24      	ldr	r3, [pc, #144]	@ (80016b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f023 0207 	bic.w	r2, r3, #7
 800162a:	4922      	ldr	r1, [pc, #136]	@ (80016b4 <HAL_RCC_ClockConfig+0x1c0>)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	4313      	orrs	r3, r2
 8001630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001632:	4b20      	ldr	r3, [pc, #128]	@ (80016b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	429a      	cmp	r2, r3
 800163e:	d001      	beq.n	8001644 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e032      	b.n	80016aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	2b00      	cmp	r3, #0
 800164e:	d008      	beq.n	8001662 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001650:	4b19      	ldr	r3, [pc, #100]	@ (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	4916      	ldr	r1, [pc, #88]	@ (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 800165e:	4313      	orrs	r3, r2
 8001660:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	2b00      	cmp	r3, #0
 800166c:	d009      	beq.n	8001682 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800166e:	4b12      	ldr	r3, [pc, #72]	@ (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	490e      	ldr	r1, [pc, #56]	@ (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 800167e:	4313      	orrs	r3, r2
 8001680:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001682:	f000 f821 	bl	80016c8 <HAL_RCC_GetSysClockFreq>
 8001686:	4602      	mov	r2, r0
 8001688:	4b0b      	ldr	r3, [pc, #44]	@ (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	091b      	lsrs	r3, r3, #4
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	490a      	ldr	r1, [pc, #40]	@ (80016bc <HAL_RCC_ClockConfig+0x1c8>)
 8001694:	5ccb      	ldrb	r3, [r1, r3]
 8001696:	fa22 f303 	lsr.w	r3, r2, r3
 800169a:	4a09      	ldr	r2, [pc, #36]	@ (80016c0 <HAL_RCC_ClockConfig+0x1cc>)
 800169c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800169e:	4b09      	ldr	r3, [pc, #36]	@ (80016c4 <HAL_RCC_ClockConfig+0x1d0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff f98c 	bl	80009c0 <HAL_InitTick>

  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40022000 	.word	0x40022000
 80016b8:	40021000 	.word	0x40021000
 80016bc:	08002dd4 	.word	0x08002dd4
 80016c0:	20000000 	.word	0x20000000
 80016c4:	20000004 	.word	0x20000004

080016c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016c8:	b490      	push	{r4, r7}
 80016ca:	b08a      	sub	sp, #40	@ 0x28
 80016cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016ce:	4b29      	ldr	r3, [pc, #164]	@ (8001774 <HAL_RCC_GetSysClockFreq+0xac>)
 80016d0:	1d3c      	adds	r4, r7, #4
 80016d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016d8:	f240 2301 	movw	r3, #513	@ 0x201
 80016dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
 80016e2:	2300      	movs	r3, #0
 80016e4:	61bb      	str	r3, [r7, #24]
 80016e6:	2300      	movs	r3, #0
 80016e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016f2:	4b21      	ldr	r3, [pc, #132]	@ (8001778 <HAL_RCC_GetSysClockFreq+0xb0>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f003 030c 	and.w	r3, r3, #12
 80016fe:	2b04      	cmp	r3, #4
 8001700:	d002      	beq.n	8001708 <HAL_RCC_GetSysClockFreq+0x40>
 8001702:	2b08      	cmp	r3, #8
 8001704:	d003      	beq.n	800170e <HAL_RCC_GetSysClockFreq+0x46>
 8001706:	e02b      	b.n	8001760 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001708:	4b1c      	ldr	r3, [pc, #112]	@ (800177c <HAL_RCC_GetSysClockFreq+0xb4>)
 800170a:	623b      	str	r3, [r7, #32]
      break;
 800170c:	e02b      	b.n	8001766 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	0c9b      	lsrs	r3, r3, #18
 8001712:	f003 030f 	and.w	r3, r3, #15
 8001716:	3328      	adds	r3, #40	@ 0x28
 8001718:	443b      	add	r3, r7
 800171a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800171e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d012      	beq.n	8001750 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800172a:	4b13      	ldr	r3, [pc, #76]	@ (8001778 <HAL_RCC_GetSysClockFreq+0xb0>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	0c5b      	lsrs	r3, r3, #17
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	3328      	adds	r3, #40	@ 0x28
 8001736:	443b      	add	r3, r7
 8001738:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800173c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	4a0e      	ldr	r2, [pc, #56]	@ (800177c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001742:	fb03 f202 	mul.w	r2, r3, r2
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	fbb2 f3f3 	udiv	r3, r2, r3
 800174c:	627b      	str	r3, [r7, #36]	@ 0x24
 800174e:	e004      	b.n	800175a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	4a0b      	ldr	r2, [pc, #44]	@ (8001780 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001754:	fb02 f303 	mul.w	r3, r2, r3
 8001758:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 800175a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175c:	623b      	str	r3, [r7, #32]
      break;
 800175e:	e002      	b.n	8001766 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001760:	4b06      	ldr	r3, [pc, #24]	@ (800177c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001762:	623b      	str	r3, [r7, #32]
      break;
 8001764:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001766:	6a3b      	ldr	r3, [r7, #32]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3728      	adds	r7, #40	@ 0x28
 800176c:	46bd      	mov	sp, r7
 800176e:	bc90      	pop	{r4, r7}
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	08002dc4 	.word	0x08002dc4
 8001778:	40021000 	.word	0x40021000
 800177c:	007a1200 	.word	0x007a1200
 8001780:	003d0900 	.word	0x003d0900

08001784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001788:	4b02      	ldr	r3, [pc, #8]	@ (8001794 <HAL_RCC_GetHCLKFreq+0x10>)
 800178a:	681b      	ldr	r3, [r3, #0]
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr
 8001794:	20000000 	.word	0x20000000

08001798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800179c:	f7ff fff2 	bl	8001784 <HAL_RCC_GetHCLKFreq>
 80017a0:	4602      	mov	r2, r0
 80017a2:	4b05      	ldr	r3, [pc, #20]	@ (80017b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	0a1b      	lsrs	r3, r3, #8
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	4903      	ldr	r1, [pc, #12]	@ (80017bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80017ae:	5ccb      	ldrb	r3, [r1, r3]
 80017b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40021000 	.word	0x40021000
 80017bc:	08002de4 	.word	0x08002de4

080017c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017c4:	f7ff ffde 	bl	8001784 <HAL_RCC_GetHCLKFreq>
 80017c8:	4602      	mov	r2, r0
 80017ca:	4b05      	ldr	r3, [pc, #20]	@ (80017e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	0adb      	lsrs	r3, r3, #11
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	4903      	ldr	r1, [pc, #12]	@ (80017e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017d6:	5ccb      	ldrb	r3, [r1, r3]
 80017d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017dc:	4618      	mov	r0, r3
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40021000 	.word	0x40021000
 80017e4:	08002de4 	.word	0x08002de4

080017e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017f0:	4b0a      	ldr	r3, [pc, #40]	@ (800181c <RCC_Delay+0x34>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001820 <RCC_Delay+0x38>)
 80017f6:	fba2 2303 	umull	r2, r3, r2, r3
 80017fa:	0a5b      	lsrs	r3, r3, #9
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	fb02 f303 	mul.w	r3, r2, r3
 8001802:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001804:	bf00      	nop
  }
  while (Delay --);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	1e5a      	subs	r2, r3, #1
 800180a:	60fa      	str	r2, [r7, #12]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1f9      	bne.n	8001804 <RCC_Delay+0x1c>
}
 8001810:	bf00      	nop
 8001812:	bf00      	nop
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr
 800181c:	20000000 	.word	0x20000000
 8001820:	10624dd3 	.word	0x10624dd3

08001824 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e03f      	b.n	80018b6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d106      	bne.n	8001850 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7fe ff64 	bl	8000718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2224      	movs	r2, #36	@ 0x24
 8001854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68da      	ldr	r2, [r3, #12]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001866:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 f9a7 	bl	8001bbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	691a      	ldr	r2, [r3, #16]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800187c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	695a      	ldr	r2, [r3, #20]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800188c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800189c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2220      	movs	r2, #32
 80018a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2220      	movs	r2, #32
 80018b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b08a      	sub	sp, #40	@ 0x28
 80018c2:	af02      	add	r7, sp, #8
 80018c4:	60f8      	str	r0, [r7, #12]
 80018c6:	60b9      	str	r1, [r7, #8]
 80018c8:	603b      	str	r3, [r7, #0]
 80018ca:	4613      	mov	r3, r2
 80018cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b20      	cmp	r3, #32
 80018dc:	d17c      	bne.n	80019d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d002      	beq.n	80018ea <HAL_UART_Transmit+0x2c>
 80018e4:	88fb      	ldrh	r3, [r7, #6]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e075      	b.n	80019da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d101      	bne.n	80018fc <HAL_UART_Transmit+0x3e>
 80018f8:	2302      	movs	r3, #2
 80018fa:	e06e      	b.n	80019da <HAL_UART_Transmit+0x11c>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2200      	movs	r2, #0
 8001908:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2221      	movs	r2, #33	@ 0x21
 800190e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001912:	f7ff f897 	bl	8000a44 <HAL_GetTick>
 8001916:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	88fa      	ldrh	r2, [r7, #6]
 800191c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	88fa      	ldrh	r2, [r7, #6]
 8001922:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800192c:	d108      	bne.n	8001940 <HAL_UART_Transmit+0x82>
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d104      	bne.n	8001940 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	61bb      	str	r3, [r7, #24]
 800193e:	e003      	b.n	8001948 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001944:	2300      	movs	r3, #0
 8001946:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8001950:	e02a      	b.n	80019a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	2200      	movs	r2, #0
 800195a:	2180      	movs	r1, #128	@ 0x80
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f000 f8e2 	bl	8001b26 <UART_WaitOnFlagUntilTimeout>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e036      	b.n	80019da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10b      	bne.n	800198a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	461a      	mov	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001980:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	3302      	adds	r3, #2
 8001986:	61bb      	str	r3, [r7, #24]
 8001988:	e007      	b.n	800199a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	781a      	ldrb	r2, [r3, #0]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	3301      	adds	r3, #1
 8001998:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800199e:	b29b      	uxth	r3, r3
 80019a0:	3b01      	subs	r3, #1
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1cf      	bne.n	8001952 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	2200      	movs	r2, #0
 80019ba:	2140      	movs	r1, #64	@ 0x40
 80019bc:	68f8      	ldr	r0, [r7, #12]
 80019be:	f000 f8b2 	bl	8001b26 <UART_WaitOnFlagUntilTimeout>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e006      	b.n	80019da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2220      	movs	r2, #32
 80019d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	e000      	b.n	80019da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80019d8:	2302      	movs	r3, #2
  }
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3720      	adds	r7, #32
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b08a      	sub	sp, #40	@ 0x28
 80019e6:	af02      	add	r7, sp, #8
 80019e8:	60f8      	str	r0, [r7, #12]
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	603b      	str	r3, [r7, #0]
 80019ee:	4613      	mov	r3, r2
 80019f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b20      	cmp	r3, #32
 8001a00:	f040 808c 	bne.w	8001b1c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d002      	beq.n	8001a10 <HAL_UART_Receive+0x2e>
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e084      	b.n	8001b1e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d101      	bne.n	8001a22 <HAL_UART_Receive+0x40>
 8001a1e:	2302      	movs	r3, #2
 8001a20:	e07d      	b.n	8001b1e <HAL_UART_Receive+0x13c>
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2222      	movs	r2, #34	@ 0x22
 8001a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a3e:	f7ff f801 	bl	8000a44 <HAL_GetTick>
 8001a42:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	88fa      	ldrh	r2, [r7, #6]
 8001a48:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	88fa      	ldrh	r2, [r7, #6]
 8001a4e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a58:	d108      	bne.n	8001a6c <HAL_UART_Receive+0x8a>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d104      	bne.n	8001a6c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	61bb      	str	r3, [r7, #24]
 8001a6a:	e003      	b.n	8001a74 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001a7c:	e043      	b.n	8001b06 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	2200      	movs	r2, #0
 8001a86:	2120      	movs	r1, #32
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f000 f84c 	bl	8001b26 <UART_WaitOnFlagUntilTimeout>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e042      	b.n	8001b1e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	3302      	adds	r3, #2
 8001ab4:	61bb      	str	r3, [r7, #24]
 8001ab6:	e01f      	b.n	8001af8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ac0:	d007      	beq.n	8001ad2 <HAL_UART_Receive+0xf0>
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10a      	bne.n	8001ae0 <HAL_UART_Receive+0xfe>
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d106      	bne.n	8001ae0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	701a      	strb	r2, [r3, #0]
 8001ade:	e008      	b.n	8001af2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3301      	adds	r3, #1
 8001af6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	3b01      	subs	r3, #1
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1b6      	bne.n	8001a7e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2220      	movs	r2, #32
 8001b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    return HAL_OK;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	e000      	b.n	8001b1e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001b1c:	2302      	movs	r3, #2
  }
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3720      	adds	r7, #32
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b084      	sub	sp, #16
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	60f8      	str	r0, [r7, #12]
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	603b      	str	r3, [r7, #0]
 8001b32:	4613      	mov	r3, r2
 8001b34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b36:	e02c      	b.n	8001b92 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b3e:	d028      	beq.n	8001b92 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d007      	beq.n	8001b56 <UART_WaitOnFlagUntilTimeout+0x30>
 8001b46:	f7fe ff7d 	bl	8000a44 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d21d      	bcs.n	8001b92 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68da      	ldr	r2, [r3, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8001b64:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	695a      	ldr	r2, [r3, #20]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 0201 	bic.w	r2, r2, #1
 8001b74:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2220      	movs	r2, #32
 8001b7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2220      	movs	r2, #32
 8001b82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e00f      	b.n	8001bb2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	bf0c      	ite	eq
 8001ba2:	2301      	moveq	r3, #1
 8001ba4:	2300      	movne	r3, #0
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	461a      	mov	r2, r3
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d0c3      	beq.n	8001b38 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68da      	ldr	r2, [r3, #12]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	431a      	orrs	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001bf6:	f023 030c 	bic.w	r3, r3, #12
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6812      	ldr	r2, [r2, #0]
 8001bfe:	68b9      	ldr	r1, [r7, #8]
 8001c00:	430b      	orrs	r3, r1
 8001c02:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	699a      	ldr	r2, [r3, #24]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a2c      	ldr	r2, [pc, #176]	@ (8001cd0 <UART_SetConfig+0x114>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d103      	bne.n	8001c2c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001c24:	f7ff fdcc 	bl	80017c0 <HAL_RCC_GetPCLK2Freq>
 8001c28:	60f8      	str	r0, [r7, #12]
 8001c2a:	e002      	b.n	8001c32 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001c2c:	f7ff fdb4 	bl	8001798 <HAL_RCC_GetPCLK1Freq>
 8001c30:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	009a      	lsls	r2, r3, #2
 8001c3c:	441a      	add	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c48:	4a22      	ldr	r2, [pc, #136]	@ (8001cd4 <UART_SetConfig+0x118>)
 8001c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4e:	095b      	lsrs	r3, r3, #5
 8001c50:	0119      	lsls	r1, r3, #4
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	009a      	lsls	r2, r3, #2
 8001c5c:	441a      	add	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c68:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd4 <UART_SetConfig+0x118>)
 8001c6a:	fba3 0302 	umull	r0, r3, r3, r2
 8001c6e:	095b      	lsrs	r3, r3, #5
 8001c70:	2064      	movs	r0, #100	@ 0x64
 8001c72:	fb00 f303 	mul.w	r3, r0, r3
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	3332      	adds	r3, #50	@ 0x32
 8001c7c:	4a15      	ldr	r2, [pc, #84]	@ (8001cd4 <UART_SetConfig+0x118>)
 8001c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c82:	095b      	lsrs	r3, r3, #5
 8001c84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c88:	4419      	add	r1, r3
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	009a      	lsls	r2, r3, #2
 8001c94:	441a      	add	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd4 <UART_SetConfig+0x118>)
 8001ca2:	fba3 0302 	umull	r0, r3, r3, r2
 8001ca6:	095b      	lsrs	r3, r3, #5
 8001ca8:	2064      	movs	r0, #100	@ 0x64
 8001caa:	fb00 f303 	mul.w	r3, r0, r3
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	011b      	lsls	r3, r3, #4
 8001cb2:	3332      	adds	r3, #50	@ 0x32
 8001cb4:	4a07      	ldr	r2, [pc, #28]	@ (8001cd4 <UART_SetConfig+0x118>)
 8001cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cba:	095b      	lsrs	r3, r3, #5
 8001cbc:	f003 020f 	and.w	r2, r3, #15
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	440a      	add	r2, r1
 8001cc6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001cc8:	bf00      	nop
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40013800 	.word	0x40013800
 8001cd4:	51eb851f 	.word	0x51eb851f

08001cd8 <std>:
 8001cd8:	2300      	movs	r3, #0
 8001cda:	b510      	push	{r4, lr}
 8001cdc:	4604      	mov	r4, r0
 8001cde:	e9c0 3300 	strd	r3, r3, [r0]
 8001ce2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001ce6:	6083      	str	r3, [r0, #8]
 8001ce8:	8181      	strh	r1, [r0, #12]
 8001cea:	6643      	str	r3, [r0, #100]	@ 0x64
 8001cec:	81c2      	strh	r2, [r0, #14]
 8001cee:	6183      	str	r3, [r0, #24]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	2208      	movs	r2, #8
 8001cf4:	305c      	adds	r0, #92	@ 0x5c
 8001cf6:	f000 f921 	bl	8001f3c <memset>
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8001d30 <std+0x58>)
 8001cfc:	6224      	str	r4, [r4, #32]
 8001cfe:	6263      	str	r3, [r4, #36]	@ 0x24
 8001d00:	4b0c      	ldr	r3, [pc, #48]	@ (8001d34 <std+0x5c>)
 8001d02:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001d04:	4b0c      	ldr	r3, [pc, #48]	@ (8001d38 <std+0x60>)
 8001d06:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001d08:	4b0c      	ldr	r3, [pc, #48]	@ (8001d3c <std+0x64>)
 8001d0a:	6323      	str	r3, [r4, #48]	@ 0x30
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d40 <std+0x68>)
 8001d0e:	429c      	cmp	r4, r3
 8001d10:	d006      	beq.n	8001d20 <std+0x48>
 8001d12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001d16:	4294      	cmp	r4, r2
 8001d18:	d002      	beq.n	8001d20 <std+0x48>
 8001d1a:	33d0      	adds	r3, #208	@ 0xd0
 8001d1c:	429c      	cmp	r4, r3
 8001d1e:	d105      	bne.n	8001d2c <std+0x54>
 8001d20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d28:	f000 b93a 	b.w	8001fa0 <__retarget_lock_init_recursive>
 8001d2c:	bd10      	pop	{r4, pc}
 8001d2e:	bf00      	nop
 8001d30:	0800280d 	.word	0x0800280d
 8001d34:	0800282f 	.word	0x0800282f
 8001d38:	08002867 	.word	0x08002867
 8001d3c:	0800288b 	.word	0x0800288b
 8001d40:	200000d0 	.word	0x200000d0

08001d44 <stdio_exit_handler>:
 8001d44:	4a02      	ldr	r2, [pc, #8]	@ (8001d50 <stdio_exit_handler+0xc>)
 8001d46:	4903      	ldr	r1, [pc, #12]	@ (8001d54 <stdio_exit_handler+0x10>)
 8001d48:	4803      	ldr	r0, [pc, #12]	@ (8001d58 <stdio_exit_handler+0x14>)
 8001d4a:	f000 b869 	b.w	8001e20 <_fwalk_sglue>
 8001d4e:	bf00      	nop
 8001d50:	2000000c 	.word	0x2000000c
 8001d54:	080027a5 	.word	0x080027a5
 8001d58:	2000001c 	.word	0x2000001c

08001d5c <cleanup_stdio>:
 8001d5c:	6841      	ldr	r1, [r0, #4]
 8001d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d90 <cleanup_stdio+0x34>)
 8001d60:	b510      	push	{r4, lr}
 8001d62:	4299      	cmp	r1, r3
 8001d64:	4604      	mov	r4, r0
 8001d66:	d001      	beq.n	8001d6c <cleanup_stdio+0x10>
 8001d68:	f000 fd1c 	bl	80027a4 <_fflush_r>
 8001d6c:	68a1      	ldr	r1, [r4, #8]
 8001d6e:	4b09      	ldr	r3, [pc, #36]	@ (8001d94 <cleanup_stdio+0x38>)
 8001d70:	4299      	cmp	r1, r3
 8001d72:	d002      	beq.n	8001d7a <cleanup_stdio+0x1e>
 8001d74:	4620      	mov	r0, r4
 8001d76:	f000 fd15 	bl	80027a4 <_fflush_r>
 8001d7a:	68e1      	ldr	r1, [r4, #12]
 8001d7c:	4b06      	ldr	r3, [pc, #24]	@ (8001d98 <cleanup_stdio+0x3c>)
 8001d7e:	4299      	cmp	r1, r3
 8001d80:	d004      	beq.n	8001d8c <cleanup_stdio+0x30>
 8001d82:	4620      	mov	r0, r4
 8001d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d88:	f000 bd0c 	b.w	80027a4 <_fflush_r>
 8001d8c:	bd10      	pop	{r4, pc}
 8001d8e:	bf00      	nop
 8001d90:	200000d0 	.word	0x200000d0
 8001d94:	20000138 	.word	0x20000138
 8001d98:	200001a0 	.word	0x200001a0

08001d9c <global_stdio_init.part.0>:
 8001d9c:	b510      	push	{r4, lr}
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001dcc <global_stdio_init.part.0+0x30>)
 8001da0:	4c0b      	ldr	r4, [pc, #44]	@ (8001dd0 <global_stdio_init.part.0+0x34>)
 8001da2:	4a0c      	ldr	r2, [pc, #48]	@ (8001dd4 <global_stdio_init.part.0+0x38>)
 8001da4:	4620      	mov	r0, r4
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	2104      	movs	r1, #4
 8001daa:	2200      	movs	r2, #0
 8001dac:	f7ff ff94 	bl	8001cd8 <std>
 8001db0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001db4:	2201      	movs	r2, #1
 8001db6:	2109      	movs	r1, #9
 8001db8:	f7ff ff8e 	bl	8001cd8 <std>
 8001dbc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001dc6:	2112      	movs	r1, #18
 8001dc8:	f7ff bf86 	b.w	8001cd8 <std>
 8001dcc:	20000208 	.word	0x20000208
 8001dd0:	200000d0 	.word	0x200000d0
 8001dd4:	08001d45 	.word	0x08001d45

08001dd8 <__sfp_lock_acquire>:
 8001dd8:	4801      	ldr	r0, [pc, #4]	@ (8001de0 <__sfp_lock_acquire+0x8>)
 8001dda:	f000 b8e2 	b.w	8001fa2 <__retarget_lock_acquire_recursive>
 8001dde:	bf00      	nop
 8001de0:	2000020d 	.word	0x2000020d

08001de4 <__sfp_lock_release>:
 8001de4:	4801      	ldr	r0, [pc, #4]	@ (8001dec <__sfp_lock_release+0x8>)
 8001de6:	f000 b8dd 	b.w	8001fa4 <__retarget_lock_release_recursive>
 8001dea:	bf00      	nop
 8001dec:	2000020d 	.word	0x2000020d

08001df0 <__sinit>:
 8001df0:	b510      	push	{r4, lr}
 8001df2:	4604      	mov	r4, r0
 8001df4:	f7ff fff0 	bl	8001dd8 <__sfp_lock_acquire>
 8001df8:	6a23      	ldr	r3, [r4, #32]
 8001dfa:	b11b      	cbz	r3, 8001e04 <__sinit+0x14>
 8001dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e00:	f7ff bff0 	b.w	8001de4 <__sfp_lock_release>
 8001e04:	4b04      	ldr	r3, [pc, #16]	@ (8001e18 <__sinit+0x28>)
 8001e06:	6223      	str	r3, [r4, #32]
 8001e08:	4b04      	ldr	r3, [pc, #16]	@ (8001e1c <__sinit+0x2c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f5      	bne.n	8001dfc <__sinit+0xc>
 8001e10:	f7ff ffc4 	bl	8001d9c <global_stdio_init.part.0>
 8001e14:	e7f2      	b.n	8001dfc <__sinit+0xc>
 8001e16:	bf00      	nop
 8001e18:	08001d5d 	.word	0x08001d5d
 8001e1c:	20000208 	.word	0x20000208

08001e20 <_fwalk_sglue>:
 8001e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e24:	4607      	mov	r7, r0
 8001e26:	4688      	mov	r8, r1
 8001e28:	4614      	mov	r4, r2
 8001e2a:	2600      	movs	r6, #0
 8001e2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001e30:	f1b9 0901 	subs.w	r9, r9, #1
 8001e34:	d505      	bpl.n	8001e42 <_fwalk_sglue+0x22>
 8001e36:	6824      	ldr	r4, [r4, #0]
 8001e38:	2c00      	cmp	r4, #0
 8001e3a:	d1f7      	bne.n	8001e2c <_fwalk_sglue+0xc>
 8001e3c:	4630      	mov	r0, r6
 8001e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e42:	89ab      	ldrh	r3, [r5, #12]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d907      	bls.n	8001e58 <_fwalk_sglue+0x38>
 8001e48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	d003      	beq.n	8001e58 <_fwalk_sglue+0x38>
 8001e50:	4629      	mov	r1, r5
 8001e52:	4638      	mov	r0, r7
 8001e54:	47c0      	blx	r8
 8001e56:	4306      	orrs	r6, r0
 8001e58:	3568      	adds	r5, #104	@ 0x68
 8001e5a:	e7e9      	b.n	8001e30 <_fwalk_sglue+0x10>

08001e5c <iprintf>:
 8001e5c:	b40f      	push	{r0, r1, r2, r3}
 8001e5e:	b507      	push	{r0, r1, r2, lr}
 8001e60:	4906      	ldr	r1, [pc, #24]	@ (8001e7c <iprintf+0x20>)
 8001e62:	ab04      	add	r3, sp, #16
 8001e64:	6808      	ldr	r0, [r1, #0]
 8001e66:	f853 2b04 	ldr.w	r2, [r3], #4
 8001e6a:	6881      	ldr	r1, [r0, #8]
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	f000 f8cf 	bl	8002010 <_vfiprintf_r>
 8001e72:	b003      	add	sp, #12
 8001e74:	f85d eb04 	ldr.w	lr, [sp], #4
 8001e78:	b004      	add	sp, #16
 8001e7a:	4770      	bx	lr
 8001e7c:	20000018 	.word	0x20000018

08001e80 <_puts_r>:
 8001e80:	6a03      	ldr	r3, [r0, #32]
 8001e82:	b570      	push	{r4, r5, r6, lr}
 8001e84:	4605      	mov	r5, r0
 8001e86:	460e      	mov	r6, r1
 8001e88:	6884      	ldr	r4, [r0, #8]
 8001e8a:	b90b      	cbnz	r3, 8001e90 <_puts_r+0x10>
 8001e8c:	f7ff ffb0 	bl	8001df0 <__sinit>
 8001e90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001e92:	07db      	lsls	r3, r3, #31
 8001e94:	d405      	bmi.n	8001ea2 <_puts_r+0x22>
 8001e96:	89a3      	ldrh	r3, [r4, #12]
 8001e98:	0598      	lsls	r0, r3, #22
 8001e9a:	d402      	bmi.n	8001ea2 <_puts_r+0x22>
 8001e9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001e9e:	f000 f880 	bl	8001fa2 <__retarget_lock_acquire_recursive>
 8001ea2:	89a3      	ldrh	r3, [r4, #12]
 8001ea4:	0719      	lsls	r1, r3, #28
 8001ea6:	d502      	bpl.n	8001eae <_puts_r+0x2e>
 8001ea8:	6923      	ldr	r3, [r4, #16]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d135      	bne.n	8001f1a <_puts_r+0x9a>
 8001eae:	4621      	mov	r1, r4
 8001eb0:	4628      	mov	r0, r5
 8001eb2:	f000 fd2d 	bl	8002910 <__swsetup_r>
 8001eb6:	b380      	cbz	r0, 8001f1a <_puts_r+0x9a>
 8001eb8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8001ebc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001ebe:	07da      	lsls	r2, r3, #31
 8001ec0:	d405      	bmi.n	8001ece <_puts_r+0x4e>
 8001ec2:	89a3      	ldrh	r3, [r4, #12]
 8001ec4:	059b      	lsls	r3, r3, #22
 8001ec6:	d402      	bmi.n	8001ece <_puts_r+0x4e>
 8001ec8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001eca:	f000 f86b 	bl	8001fa4 <__retarget_lock_release_recursive>
 8001ece:	4628      	mov	r0, r5
 8001ed0:	bd70      	pop	{r4, r5, r6, pc}
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	da04      	bge.n	8001ee0 <_puts_r+0x60>
 8001ed6:	69a2      	ldr	r2, [r4, #24]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	dc17      	bgt.n	8001f0c <_puts_r+0x8c>
 8001edc:	290a      	cmp	r1, #10
 8001ede:	d015      	beq.n	8001f0c <_puts_r+0x8c>
 8001ee0:	6823      	ldr	r3, [r4, #0]
 8001ee2:	1c5a      	adds	r2, r3, #1
 8001ee4:	6022      	str	r2, [r4, #0]
 8001ee6:	7019      	strb	r1, [r3, #0]
 8001ee8:	68a3      	ldr	r3, [r4, #8]
 8001eea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	60a3      	str	r3, [r4, #8]
 8001ef2:	2900      	cmp	r1, #0
 8001ef4:	d1ed      	bne.n	8001ed2 <_puts_r+0x52>
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	da11      	bge.n	8001f1e <_puts_r+0x9e>
 8001efa:	4622      	mov	r2, r4
 8001efc:	210a      	movs	r1, #10
 8001efe:	4628      	mov	r0, r5
 8001f00:	f000 fcc7 	bl	8002892 <__swbuf_r>
 8001f04:	3001      	adds	r0, #1
 8001f06:	d0d7      	beq.n	8001eb8 <_puts_r+0x38>
 8001f08:	250a      	movs	r5, #10
 8001f0a:	e7d7      	b.n	8001ebc <_puts_r+0x3c>
 8001f0c:	4622      	mov	r2, r4
 8001f0e:	4628      	mov	r0, r5
 8001f10:	f000 fcbf 	bl	8002892 <__swbuf_r>
 8001f14:	3001      	adds	r0, #1
 8001f16:	d1e7      	bne.n	8001ee8 <_puts_r+0x68>
 8001f18:	e7ce      	b.n	8001eb8 <_puts_r+0x38>
 8001f1a:	3e01      	subs	r6, #1
 8001f1c:	e7e4      	b.n	8001ee8 <_puts_r+0x68>
 8001f1e:	6823      	ldr	r3, [r4, #0]
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	6022      	str	r2, [r4, #0]
 8001f24:	220a      	movs	r2, #10
 8001f26:	701a      	strb	r2, [r3, #0]
 8001f28:	e7ee      	b.n	8001f08 <_puts_r+0x88>
	...

08001f2c <puts>:
 8001f2c:	4b02      	ldr	r3, [pc, #8]	@ (8001f38 <puts+0xc>)
 8001f2e:	4601      	mov	r1, r0
 8001f30:	6818      	ldr	r0, [r3, #0]
 8001f32:	f7ff bfa5 	b.w	8001e80 <_puts_r>
 8001f36:	bf00      	nop
 8001f38:	20000018 	.word	0x20000018

08001f3c <memset>:
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	4402      	add	r2, r0
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d100      	bne.n	8001f46 <memset+0xa>
 8001f44:	4770      	bx	lr
 8001f46:	f803 1b01 	strb.w	r1, [r3], #1
 8001f4a:	e7f9      	b.n	8001f40 <memset+0x4>

08001f4c <__errno>:
 8001f4c:	4b01      	ldr	r3, [pc, #4]	@ (8001f54 <__errno+0x8>)
 8001f4e:	6818      	ldr	r0, [r3, #0]
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	20000018 	.word	0x20000018

08001f58 <__libc_init_array>:
 8001f58:	b570      	push	{r4, r5, r6, lr}
 8001f5a:	2600      	movs	r6, #0
 8001f5c:	4d0c      	ldr	r5, [pc, #48]	@ (8001f90 <__libc_init_array+0x38>)
 8001f5e:	4c0d      	ldr	r4, [pc, #52]	@ (8001f94 <__libc_init_array+0x3c>)
 8001f60:	1b64      	subs	r4, r4, r5
 8001f62:	10a4      	asrs	r4, r4, #2
 8001f64:	42a6      	cmp	r6, r4
 8001f66:	d109      	bne.n	8001f7c <__libc_init_array+0x24>
 8001f68:	f000 fe58 	bl	8002c1c <_init>
 8001f6c:	2600      	movs	r6, #0
 8001f6e:	4d0a      	ldr	r5, [pc, #40]	@ (8001f98 <__libc_init_array+0x40>)
 8001f70:	4c0a      	ldr	r4, [pc, #40]	@ (8001f9c <__libc_init_array+0x44>)
 8001f72:	1b64      	subs	r4, r4, r5
 8001f74:	10a4      	asrs	r4, r4, #2
 8001f76:	42a6      	cmp	r6, r4
 8001f78:	d105      	bne.n	8001f86 <__libc_init_array+0x2e>
 8001f7a:	bd70      	pop	{r4, r5, r6, pc}
 8001f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f80:	4798      	blx	r3
 8001f82:	3601      	adds	r6, #1
 8001f84:	e7ee      	b.n	8001f64 <__libc_init_array+0xc>
 8001f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f8a:	4798      	blx	r3
 8001f8c:	3601      	adds	r6, #1
 8001f8e:	e7f2      	b.n	8001f76 <__libc_init_array+0x1e>
 8001f90:	08002e20 	.word	0x08002e20
 8001f94:	08002e20 	.word	0x08002e20
 8001f98:	08002e20 	.word	0x08002e20
 8001f9c:	08002e24 	.word	0x08002e24

08001fa0 <__retarget_lock_init_recursive>:
 8001fa0:	4770      	bx	lr

08001fa2 <__retarget_lock_acquire_recursive>:
 8001fa2:	4770      	bx	lr

08001fa4 <__retarget_lock_release_recursive>:
 8001fa4:	4770      	bx	lr

08001fa6 <memcpy>:
 8001fa6:	440a      	add	r2, r1
 8001fa8:	4291      	cmp	r1, r2
 8001faa:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8001fae:	d100      	bne.n	8001fb2 <memcpy+0xc>
 8001fb0:	4770      	bx	lr
 8001fb2:	b510      	push	{r4, lr}
 8001fb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001fb8:	4291      	cmp	r1, r2
 8001fba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001fbe:	d1f9      	bne.n	8001fb4 <memcpy+0xe>
 8001fc0:	bd10      	pop	{r4, pc}

08001fc2 <__sfputc_r>:
 8001fc2:	6893      	ldr	r3, [r2, #8]
 8001fc4:	b410      	push	{r4}
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	6093      	str	r3, [r2, #8]
 8001fcc:	da07      	bge.n	8001fde <__sfputc_r+0x1c>
 8001fce:	6994      	ldr	r4, [r2, #24]
 8001fd0:	42a3      	cmp	r3, r4
 8001fd2:	db01      	blt.n	8001fd8 <__sfputc_r+0x16>
 8001fd4:	290a      	cmp	r1, #10
 8001fd6:	d102      	bne.n	8001fde <__sfputc_r+0x1c>
 8001fd8:	bc10      	pop	{r4}
 8001fda:	f000 bc5a 	b.w	8002892 <__swbuf_r>
 8001fde:	6813      	ldr	r3, [r2, #0]
 8001fe0:	1c58      	adds	r0, r3, #1
 8001fe2:	6010      	str	r0, [r2, #0]
 8001fe4:	7019      	strb	r1, [r3, #0]
 8001fe6:	4608      	mov	r0, r1
 8001fe8:	bc10      	pop	{r4}
 8001fea:	4770      	bx	lr

08001fec <__sfputs_r>:
 8001fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fee:	4606      	mov	r6, r0
 8001ff0:	460f      	mov	r7, r1
 8001ff2:	4614      	mov	r4, r2
 8001ff4:	18d5      	adds	r5, r2, r3
 8001ff6:	42ac      	cmp	r4, r5
 8001ff8:	d101      	bne.n	8001ffe <__sfputs_r+0x12>
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	e007      	b.n	800200e <__sfputs_r+0x22>
 8001ffe:	463a      	mov	r2, r7
 8002000:	4630      	mov	r0, r6
 8002002:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002006:	f7ff ffdc 	bl	8001fc2 <__sfputc_r>
 800200a:	1c43      	adds	r3, r0, #1
 800200c:	d1f3      	bne.n	8001ff6 <__sfputs_r+0xa>
 800200e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002010 <_vfiprintf_r>:
 8002010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002014:	460d      	mov	r5, r1
 8002016:	4614      	mov	r4, r2
 8002018:	4698      	mov	r8, r3
 800201a:	4606      	mov	r6, r0
 800201c:	b09d      	sub	sp, #116	@ 0x74
 800201e:	b118      	cbz	r0, 8002028 <_vfiprintf_r+0x18>
 8002020:	6a03      	ldr	r3, [r0, #32]
 8002022:	b90b      	cbnz	r3, 8002028 <_vfiprintf_r+0x18>
 8002024:	f7ff fee4 	bl	8001df0 <__sinit>
 8002028:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800202a:	07d9      	lsls	r1, r3, #31
 800202c:	d405      	bmi.n	800203a <_vfiprintf_r+0x2a>
 800202e:	89ab      	ldrh	r3, [r5, #12]
 8002030:	059a      	lsls	r2, r3, #22
 8002032:	d402      	bmi.n	800203a <_vfiprintf_r+0x2a>
 8002034:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002036:	f7ff ffb4 	bl	8001fa2 <__retarget_lock_acquire_recursive>
 800203a:	89ab      	ldrh	r3, [r5, #12]
 800203c:	071b      	lsls	r3, r3, #28
 800203e:	d501      	bpl.n	8002044 <_vfiprintf_r+0x34>
 8002040:	692b      	ldr	r3, [r5, #16]
 8002042:	b99b      	cbnz	r3, 800206c <_vfiprintf_r+0x5c>
 8002044:	4629      	mov	r1, r5
 8002046:	4630      	mov	r0, r6
 8002048:	f000 fc62 	bl	8002910 <__swsetup_r>
 800204c:	b170      	cbz	r0, 800206c <_vfiprintf_r+0x5c>
 800204e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002050:	07dc      	lsls	r4, r3, #31
 8002052:	d504      	bpl.n	800205e <_vfiprintf_r+0x4e>
 8002054:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002058:	b01d      	add	sp, #116	@ 0x74
 800205a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800205e:	89ab      	ldrh	r3, [r5, #12]
 8002060:	0598      	lsls	r0, r3, #22
 8002062:	d4f7      	bmi.n	8002054 <_vfiprintf_r+0x44>
 8002064:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002066:	f7ff ff9d 	bl	8001fa4 <__retarget_lock_release_recursive>
 800206a:	e7f3      	b.n	8002054 <_vfiprintf_r+0x44>
 800206c:	2300      	movs	r3, #0
 800206e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002070:	2320      	movs	r3, #32
 8002072:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002076:	2330      	movs	r3, #48	@ 0x30
 8002078:	f04f 0901 	mov.w	r9, #1
 800207c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002080:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800222c <_vfiprintf_r+0x21c>
 8002084:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002088:	4623      	mov	r3, r4
 800208a:	469a      	mov	sl, r3
 800208c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002090:	b10a      	cbz	r2, 8002096 <_vfiprintf_r+0x86>
 8002092:	2a25      	cmp	r2, #37	@ 0x25
 8002094:	d1f9      	bne.n	800208a <_vfiprintf_r+0x7a>
 8002096:	ebba 0b04 	subs.w	fp, sl, r4
 800209a:	d00b      	beq.n	80020b4 <_vfiprintf_r+0xa4>
 800209c:	465b      	mov	r3, fp
 800209e:	4622      	mov	r2, r4
 80020a0:	4629      	mov	r1, r5
 80020a2:	4630      	mov	r0, r6
 80020a4:	f7ff ffa2 	bl	8001fec <__sfputs_r>
 80020a8:	3001      	adds	r0, #1
 80020aa:	f000 80a7 	beq.w	80021fc <_vfiprintf_r+0x1ec>
 80020ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80020b0:	445a      	add	r2, fp
 80020b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80020b4:	f89a 3000 	ldrb.w	r3, [sl]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 809f 	beq.w	80021fc <_vfiprintf_r+0x1ec>
 80020be:	2300      	movs	r3, #0
 80020c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80020c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80020c8:	f10a 0a01 	add.w	sl, sl, #1
 80020cc:	9304      	str	r3, [sp, #16]
 80020ce:	9307      	str	r3, [sp, #28]
 80020d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80020d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80020d6:	4654      	mov	r4, sl
 80020d8:	2205      	movs	r2, #5
 80020da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80020de:	4853      	ldr	r0, [pc, #332]	@ (800222c <_vfiprintf_r+0x21c>)
 80020e0:	f000 fd46 	bl	8002b70 <memchr>
 80020e4:	9a04      	ldr	r2, [sp, #16]
 80020e6:	b9d8      	cbnz	r0, 8002120 <_vfiprintf_r+0x110>
 80020e8:	06d1      	lsls	r1, r2, #27
 80020ea:	bf44      	itt	mi
 80020ec:	2320      	movmi	r3, #32
 80020ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80020f2:	0713      	lsls	r3, r2, #28
 80020f4:	bf44      	itt	mi
 80020f6:	232b      	movmi	r3, #43	@ 0x2b
 80020f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80020fc:	f89a 3000 	ldrb.w	r3, [sl]
 8002100:	2b2a      	cmp	r3, #42	@ 0x2a
 8002102:	d015      	beq.n	8002130 <_vfiprintf_r+0x120>
 8002104:	4654      	mov	r4, sl
 8002106:	2000      	movs	r0, #0
 8002108:	f04f 0c0a 	mov.w	ip, #10
 800210c:	9a07      	ldr	r2, [sp, #28]
 800210e:	4621      	mov	r1, r4
 8002110:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002114:	3b30      	subs	r3, #48	@ 0x30
 8002116:	2b09      	cmp	r3, #9
 8002118:	d94b      	bls.n	80021b2 <_vfiprintf_r+0x1a2>
 800211a:	b1b0      	cbz	r0, 800214a <_vfiprintf_r+0x13a>
 800211c:	9207      	str	r2, [sp, #28]
 800211e:	e014      	b.n	800214a <_vfiprintf_r+0x13a>
 8002120:	eba0 0308 	sub.w	r3, r0, r8
 8002124:	fa09 f303 	lsl.w	r3, r9, r3
 8002128:	4313      	orrs	r3, r2
 800212a:	46a2      	mov	sl, r4
 800212c:	9304      	str	r3, [sp, #16]
 800212e:	e7d2      	b.n	80020d6 <_vfiprintf_r+0xc6>
 8002130:	9b03      	ldr	r3, [sp, #12]
 8002132:	1d19      	adds	r1, r3, #4
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	9103      	str	r1, [sp, #12]
 8002138:	2b00      	cmp	r3, #0
 800213a:	bfbb      	ittet	lt
 800213c:	425b      	neglt	r3, r3
 800213e:	f042 0202 	orrlt.w	r2, r2, #2
 8002142:	9307      	strge	r3, [sp, #28]
 8002144:	9307      	strlt	r3, [sp, #28]
 8002146:	bfb8      	it	lt
 8002148:	9204      	strlt	r2, [sp, #16]
 800214a:	7823      	ldrb	r3, [r4, #0]
 800214c:	2b2e      	cmp	r3, #46	@ 0x2e
 800214e:	d10a      	bne.n	8002166 <_vfiprintf_r+0x156>
 8002150:	7863      	ldrb	r3, [r4, #1]
 8002152:	2b2a      	cmp	r3, #42	@ 0x2a
 8002154:	d132      	bne.n	80021bc <_vfiprintf_r+0x1ac>
 8002156:	9b03      	ldr	r3, [sp, #12]
 8002158:	3402      	adds	r4, #2
 800215a:	1d1a      	adds	r2, r3, #4
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	9203      	str	r2, [sp, #12]
 8002160:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002164:	9305      	str	r3, [sp, #20]
 8002166:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002230 <_vfiprintf_r+0x220>
 800216a:	2203      	movs	r2, #3
 800216c:	4650      	mov	r0, sl
 800216e:	7821      	ldrb	r1, [r4, #0]
 8002170:	f000 fcfe 	bl	8002b70 <memchr>
 8002174:	b138      	cbz	r0, 8002186 <_vfiprintf_r+0x176>
 8002176:	2240      	movs	r2, #64	@ 0x40
 8002178:	9b04      	ldr	r3, [sp, #16]
 800217a:	eba0 000a 	sub.w	r0, r0, sl
 800217e:	4082      	lsls	r2, r0
 8002180:	4313      	orrs	r3, r2
 8002182:	3401      	adds	r4, #1
 8002184:	9304      	str	r3, [sp, #16]
 8002186:	f814 1b01 	ldrb.w	r1, [r4], #1
 800218a:	2206      	movs	r2, #6
 800218c:	4829      	ldr	r0, [pc, #164]	@ (8002234 <_vfiprintf_r+0x224>)
 800218e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002192:	f000 fced 	bl	8002b70 <memchr>
 8002196:	2800      	cmp	r0, #0
 8002198:	d03f      	beq.n	800221a <_vfiprintf_r+0x20a>
 800219a:	4b27      	ldr	r3, [pc, #156]	@ (8002238 <_vfiprintf_r+0x228>)
 800219c:	bb1b      	cbnz	r3, 80021e6 <_vfiprintf_r+0x1d6>
 800219e:	9b03      	ldr	r3, [sp, #12]
 80021a0:	3307      	adds	r3, #7
 80021a2:	f023 0307 	bic.w	r3, r3, #7
 80021a6:	3308      	adds	r3, #8
 80021a8:	9303      	str	r3, [sp, #12]
 80021aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80021ac:	443b      	add	r3, r7
 80021ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80021b0:	e76a      	b.n	8002088 <_vfiprintf_r+0x78>
 80021b2:	460c      	mov	r4, r1
 80021b4:	2001      	movs	r0, #1
 80021b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80021ba:	e7a8      	b.n	800210e <_vfiprintf_r+0xfe>
 80021bc:	2300      	movs	r3, #0
 80021be:	f04f 0c0a 	mov.w	ip, #10
 80021c2:	4619      	mov	r1, r3
 80021c4:	3401      	adds	r4, #1
 80021c6:	9305      	str	r3, [sp, #20]
 80021c8:	4620      	mov	r0, r4
 80021ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80021ce:	3a30      	subs	r2, #48	@ 0x30
 80021d0:	2a09      	cmp	r2, #9
 80021d2:	d903      	bls.n	80021dc <_vfiprintf_r+0x1cc>
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0c6      	beq.n	8002166 <_vfiprintf_r+0x156>
 80021d8:	9105      	str	r1, [sp, #20]
 80021da:	e7c4      	b.n	8002166 <_vfiprintf_r+0x156>
 80021dc:	4604      	mov	r4, r0
 80021de:	2301      	movs	r3, #1
 80021e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80021e4:	e7f0      	b.n	80021c8 <_vfiprintf_r+0x1b8>
 80021e6:	ab03      	add	r3, sp, #12
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	462a      	mov	r2, r5
 80021ec:	4630      	mov	r0, r6
 80021ee:	4b13      	ldr	r3, [pc, #76]	@ (800223c <_vfiprintf_r+0x22c>)
 80021f0:	a904      	add	r1, sp, #16
 80021f2:	f3af 8000 	nop.w
 80021f6:	4607      	mov	r7, r0
 80021f8:	1c78      	adds	r0, r7, #1
 80021fa:	d1d6      	bne.n	80021aa <_vfiprintf_r+0x19a>
 80021fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80021fe:	07d9      	lsls	r1, r3, #31
 8002200:	d405      	bmi.n	800220e <_vfiprintf_r+0x1fe>
 8002202:	89ab      	ldrh	r3, [r5, #12]
 8002204:	059a      	lsls	r2, r3, #22
 8002206:	d402      	bmi.n	800220e <_vfiprintf_r+0x1fe>
 8002208:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800220a:	f7ff fecb 	bl	8001fa4 <__retarget_lock_release_recursive>
 800220e:	89ab      	ldrh	r3, [r5, #12]
 8002210:	065b      	lsls	r3, r3, #25
 8002212:	f53f af1f 	bmi.w	8002054 <_vfiprintf_r+0x44>
 8002216:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002218:	e71e      	b.n	8002058 <_vfiprintf_r+0x48>
 800221a:	ab03      	add	r3, sp, #12
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	462a      	mov	r2, r5
 8002220:	4630      	mov	r0, r6
 8002222:	4b06      	ldr	r3, [pc, #24]	@ (800223c <_vfiprintf_r+0x22c>)
 8002224:	a904      	add	r1, sp, #16
 8002226:	f000 f91f 	bl	8002468 <_printf_i>
 800222a:	e7e4      	b.n	80021f6 <_vfiprintf_r+0x1e6>
 800222c:	08002dec 	.word	0x08002dec
 8002230:	08002df2 	.word	0x08002df2
 8002234:	08002df6 	.word	0x08002df6
 8002238:	00000000 	.word	0x00000000
 800223c:	08001fed 	.word	0x08001fed

08002240 <sbrk_aligned>:
 8002240:	b570      	push	{r4, r5, r6, lr}
 8002242:	4e0f      	ldr	r6, [pc, #60]	@ (8002280 <sbrk_aligned+0x40>)
 8002244:	460c      	mov	r4, r1
 8002246:	6831      	ldr	r1, [r6, #0]
 8002248:	4605      	mov	r5, r0
 800224a:	b911      	cbnz	r1, 8002252 <sbrk_aligned+0x12>
 800224c:	f000 fc4c 	bl	8002ae8 <_sbrk_r>
 8002250:	6030      	str	r0, [r6, #0]
 8002252:	4621      	mov	r1, r4
 8002254:	4628      	mov	r0, r5
 8002256:	f000 fc47 	bl	8002ae8 <_sbrk_r>
 800225a:	1c43      	adds	r3, r0, #1
 800225c:	d103      	bne.n	8002266 <sbrk_aligned+0x26>
 800225e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002262:	4620      	mov	r0, r4
 8002264:	bd70      	pop	{r4, r5, r6, pc}
 8002266:	1cc4      	adds	r4, r0, #3
 8002268:	f024 0403 	bic.w	r4, r4, #3
 800226c:	42a0      	cmp	r0, r4
 800226e:	d0f8      	beq.n	8002262 <sbrk_aligned+0x22>
 8002270:	1a21      	subs	r1, r4, r0
 8002272:	4628      	mov	r0, r5
 8002274:	f000 fc38 	bl	8002ae8 <_sbrk_r>
 8002278:	3001      	adds	r0, #1
 800227a:	d1f2      	bne.n	8002262 <sbrk_aligned+0x22>
 800227c:	e7ef      	b.n	800225e <sbrk_aligned+0x1e>
 800227e:	bf00      	nop
 8002280:	20000210 	.word	0x20000210

08002284 <_malloc_r>:
 8002284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002288:	1ccd      	adds	r5, r1, #3
 800228a:	f025 0503 	bic.w	r5, r5, #3
 800228e:	3508      	adds	r5, #8
 8002290:	2d0c      	cmp	r5, #12
 8002292:	bf38      	it	cc
 8002294:	250c      	movcc	r5, #12
 8002296:	2d00      	cmp	r5, #0
 8002298:	4606      	mov	r6, r0
 800229a:	db01      	blt.n	80022a0 <_malloc_r+0x1c>
 800229c:	42a9      	cmp	r1, r5
 800229e:	d904      	bls.n	80022aa <_malloc_r+0x26>
 80022a0:	230c      	movs	r3, #12
 80022a2:	6033      	str	r3, [r6, #0]
 80022a4:	2000      	movs	r0, #0
 80022a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002380 <_malloc_r+0xfc>
 80022ae:	f000 faa1 	bl	80027f4 <__malloc_lock>
 80022b2:	f8d8 3000 	ldr.w	r3, [r8]
 80022b6:	461c      	mov	r4, r3
 80022b8:	bb44      	cbnz	r4, 800230c <_malloc_r+0x88>
 80022ba:	4629      	mov	r1, r5
 80022bc:	4630      	mov	r0, r6
 80022be:	f7ff ffbf 	bl	8002240 <sbrk_aligned>
 80022c2:	1c43      	adds	r3, r0, #1
 80022c4:	4604      	mov	r4, r0
 80022c6:	d158      	bne.n	800237a <_malloc_r+0xf6>
 80022c8:	f8d8 4000 	ldr.w	r4, [r8]
 80022cc:	4627      	mov	r7, r4
 80022ce:	2f00      	cmp	r7, #0
 80022d0:	d143      	bne.n	800235a <_malloc_r+0xd6>
 80022d2:	2c00      	cmp	r4, #0
 80022d4:	d04b      	beq.n	800236e <_malloc_r+0xea>
 80022d6:	6823      	ldr	r3, [r4, #0]
 80022d8:	4639      	mov	r1, r7
 80022da:	4630      	mov	r0, r6
 80022dc:	eb04 0903 	add.w	r9, r4, r3
 80022e0:	f000 fc02 	bl	8002ae8 <_sbrk_r>
 80022e4:	4581      	cmp	r9, r0
 80022e6:	d142      	bne.n	800236e <_malloc_r+0xea>
 80022e8:	6821      	ldr	r1, [r4, #0]
 80022ea:	4630      	mov	r0, r6
 80022ec:	1a6d      	subs	r5, r5, r1
 80022ee:	4629      	mov	r1, r5
 80022f0:	f7ff ffa6 	bl	8002240 <sbrk_aligned>
 80022f4:	3001      	adds	r0, #1
 80022f6:	d03a      	beq.n	800236e <_malloc_r+0xea>
 80022f8:	6823      	ldr	r3, [r4, #0]
 80022fa:	442b      	add	r3, r5
 80022fc:	6023      	str	r3, [r4, #0]
 80022fe:	f8d8 3000 	ldr.w	r3, [r8]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	bb62      	cbnz	r2, 8002360 <_malloc_r+0xdc>
 8002306:	f8c8 7000 	str.w	r7, [r8]
 800230a:	e00f      	b.n	800232c <_malloc_r+0xa8>
 800230c:	6822      	ldr	r2, [r4, #0]
 800230e:	1b52      	subs	r2, r2, r5
 8002310:	d420      	bmi.n	8002354 <_malloc_r+0xd0>
 8002312:	2a0b      	cmp	r2, #11
 8002314:	d917      	bls.n	8002346 <_malloc_r+0xc2>
 8002316:	1961      	adds	r1, r4, r5
 8002318:	42a3      	cmp	r3, r4
 800231a:	6025      	str	r5, [r4, #0]
 800231c:	bf18      	it	ne
 800231e:	6059      	strne	r1, [r3, #4]
 8002320:	6863      	ldr	r3, [r4, #4]
 8002322:	bf08      	it	eq
 8002324:	f8c8 1000 	streq.w	r1, [r8]
 8002328:	5162      	str	r2, [r4, r5]
 800232a:	604b      	str	r3, [r1, #4]
 800232c:	4630      	mov	r0, r6
 800232e:	f000 fa67 	bl	8002800 <__malloc_unlock>
 8002332:	f104 000b 	add.w	r0, r4, #11
 8002336:	1d23      	adds	r3, r4, #4
 8002338:	f020 0007 	bic.w	r0, r0, #7
 800233c:	1ac2      	subs	r2, r0, r3
 800233e:	bf1c      	itt	ne
 8002340:	1a1b      	subne	r3, r3, r0
 8002342:	50a3      	strne	r3, [r4, r2]
 8002344:	e7af      	b.n	80022a6 <_malloc_r+0x22>
 8002346:	6862      	ldr	r2, [r4, #4]
 8002348:	42a3      	cmp	r3, r4
 800234a:	bf0c      	ite	eq
 800234c:	f8c8 2000 	streq.w	r2, [r8]
 8002350:	605a      	strne	r2, [r3, #4]
 8002352:	e7eb      	b.n	800232c <_malloc_r+0xa8>
 8002354:	4623      	mov	r3, r4
 8002356:	6864      	ldr	r4, [r4, #4]
 8002358:	e7ae      	b.n	80022b8 <_malloc_r+0x34>
 800235a:	463c      	mov	r4, r7
 800235c:	687f      	ldr	r7, [r7, #4]
 800235e:	e7b6      	b.n	80022ce <_malloc_r+0x4a>
 8002360:	461a      	mov	r2, r3
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	42a3      	cmp	r3, r4
 8002366:	d1fb      	bne.n	8002360 <_malloc_r+0xdc>
 8002368:	2300      	movs	r3, #0
 800236a:	6053      	str	r3, [r2, #4]
 800236c:	e7de      	b.n	800232c <_malloc_r+0xa8>
 800236e:	230c      	movs	r3, #12
 8002370:	4630      	mov	r0, r6
 8002372:	6033      	str	r3, [r6, #0]
 8002374:	f000 fa44 	bl	8002800 <__malloc_unlock>
 8002378:	e794      	b.n	80022a4 <_malloc_r+0x20>
 800237a:	6005      	str	r5, [r0, #0]
 800237c:	e7d6      	b.n	800232c <_malloc_r+0xa8>
 800237e:	bf00      	nop
 8002380:	20000214 	.word	0x20000214

08002384 <_printf_common>:
 8002384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002388:	4616      	mov	r6, r2
 800238a:	4698      	mov	r8, r3
 800238c:	688a      	ldr	r2, [r1, #8]
 800238e:	690b      	ldr	r3, [r1, #16]
 8002390:	4607      	mov	r7, r0
 8002392:	4293      	cmp	r3, r2
 8002394:	bfb8      	it	lt
 8002396:	4613      	movlt	r3, r2
 8002398:	6033      	str	r3, [r6, #0]
 800239a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800239e:	460c      	mov	r4, r1
 80023a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80023a4:	b10a      	cbz	r2, 80023aa <_printf_common+0x26>
 80023a6:	3301      	adds	r3, #1
 80023a8:	6033      	str	r3, [r6, #0]
 80023aa:	6823      	ldr	r3, [r4, #0]
 80023ac:	0699      	lsls	r1, r3, #26
 80023ae:	bf42      	ittt	mi
 80023b0:	6833      	ldrmi	r3, [r6, #0]
 80023b2:	3302      	addmi	r3, #2
 80023b4:	6033      	strmi	r3, [r6, #0]
 80023b6:	6825      	ldr	r5, [r4, #0]
 80023b8:	f015 0506 	ands.w	r5, r5, #6
 80023bc:	d106      	bne.n	80023cc <_printf_common+0x48>
 80023be:	f104 0a19 	add.w	sl, r4, #25
 80023c2:	68e3      	ldr	r3, [r4, #12]
 80023c4:	6832      	ldr	r2, [r6, #0]
 80023c6:	1a9b      	subs	r3, r3, r2
 80023c8:	42ab      	cmp	r3, r5
 80023ca:	dc2b      	bgt.n	8002424 <_printf_common+0xa0>
 80023cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80023d0:	6822      	ldr	r2, [r4, #0]
 80023d2:	3b00      	subs	r3, #0
 80023d4:	bf18      	it	ne
 80023d6:	2301      	movne	r3, #1
 80023d8:	0692      	lsls	r2, r2, #26
 80023da:	d430      	bmi.n	800243e <_printf_common+0xba>
 80023dc:	4641      	mov	r1, r8
 80023de:	4638      	mov	r0, r7
 80023e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80023e4:	47c8      	blx	r9
 80023e6:	3001      	adds	r0, #1
 80023e8:	d023      	beq.n	8002432 <_printf_common+0xae>
 80023ea:	6823      	ldr	r3, [r4, #0]
 80023ec:	6922      	ldr	r2, [r4, #16]
 80023ee:	f003 0306 	and.w	r3, r3, #6
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	bf14      	ite	ne
 80023f6:	2500      	movne	r5, #0
 80023f8:	6833      	ldreq	r3, [r6, #0]
 80023fa:	f04f 0600 	mov.w	r6, #0
 80023fe:	bf08      	it	eq
 8002400:	68e5      	ldreq	r5, [r4, #12]
 8002402:	f104 041a 	add.w	r4, r4, #26
 8002406:	bf08      	it	eq
 8002408:	1aed      	subeq	r5, r5, r3
 800240a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800240e:	bf08      	it	eq
 8002410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002414:	4293      	cmp	r3, r2
 8002416:	bfc4      	itt	gt
 8002418:	1a9b      	subgt	r3, r3, r2
 800241a:	18ed      	addgt	r5, r5, r3
 800241c:	42b5      	cmp	r5, r6
 800241e:	d11a      	bne.n	8002456 <_printf_common+0xd2>
 8002420:	2000      	movs	r0, #0
 8002422:	e008      	b.n	8002436 <_printf_common+0xb2>
 8002424:	2301      	movs	r3, #1
 8002426:	4652      	mov	r2, sl
 8002428:	4641      	mov	r1, r8
 800242a:	4638      	mov	r0, r7
 800242c:	47c8      	blx	r9
 800242e:	3001      	adds	r0, #1
 8002430:	d103      	bne.n	800243a <_printf_common+0xb6>
 8002432:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800243a:	3501      	adds	r5, #1
 800243c:	e7c1      	b.n	80023c2 <_printf_common+0x3e>
 800243e:	2030      	movs	r0, #48	@ 0x30
 8002440:	18e1      	adds	r1, r4, r3
 8002442:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800244c:	4422      	add	r2, r4
 800244e:	3302      	adds	r3, #2
 8002450:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002454:	e7c2      	b.n	80023dc <_printf_common+0x58>
 8002456:	2301      	movs	r3, #1
 8002458:	4622      	mov	r2, r4
 800245a:	4641      	mov	r1, r8
 800245c:	4638      	mov	r0, r7
 800245e:	47c8      	blx	r9
 8002460:	3001      	adds	r0, #1
 8002462:	d0e6      	beq.n	8002432 <_printf_common+0xae>
 8002464:	3601      	adds	r6, #1
 8002466:	e7d9      	b.n	800241c <_printf_common+0x98>

08002468 <_printf_i>:
 8002468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800246c:	7e0f      	ldrb	r7, [r1, #24]
 800246e:	4691      	mov	r9, r2
 8002470:	2f78      	cmp	r7, #120	@ 0x78
 8002472:	4680      	mov	r8, r0
 8002474:	460c      	mov	r4, r1
 8002476:	469a      	mov	sl, r3
 8002478:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800247a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800247e:	d807      	bhi.n	8002490 <_printf_i+0x28>
 8002480:	2f62      	cmp	r7, #98	@ 0x62
 8002482:	d80a      	bhi.n	800249a <_printf_i+0x32>
 8002484:	2f00      	cmp	r7, #0
 8002486:	f000 80d1 	beq.w	800262c <_printf_i+0x1c4>
 800248a:	2f58      	cmp	r7, #88	@ 0x58
 800248c:	f000 80b8 	beq.w	8002600 <_printf_i+0x198>
 8002490:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002494:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002498:	e03a      	b.n	8002510 <_printf_i+0xa8>
 800249a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800249e:	2b15      	cmp	r3, #21
 80024a0:	d8f6      	bhi.n	8002490 <_printf_i+0x28>
 80024a2:	a101      	add	r1, pc, #4	@ (adr r1, 80024a8 <_printf_i+0x40>)
 80024a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80024a8:	08002501 	.word	0x08002501
 80024ac:	08002515 	.word	0x08002515
 80024b0:	08002491 	.word	0x08002491
 80024b4:	08002491 	.word	0x08002491
 80024b8:	08002491 	.word	0x08002491
 80024bc:	08002491 	.word	0x08002491
 80024c0:	08002515 	.word	0x08002515
 80024c4:	08002491 	.word	0x08002491
 80024c8:	08002491 	.word	0x08002491
 80024cc:	08002491 	.word	0x08002491
 80024d0:	08002491 	.word	0x08002491
 80024d4:	08002613 	.word	0x08002613
 80024d8:	0800253f 	.word	0x0800253f
 80024dc:	080025cd 	.word	0x080025cd
 80024e0:	08002491 	.word	0x08002491
 80024e4:	08002491 	.word	0x08002491
 80024e8:	08002635 	.word	0x08002635
 80024ec:	08002491 	.word	0x08002491
 80024f0:	0800253f 	.word	0x0800253f
 80024f4:	08002491 	.word	0x08002491
 80024f8:	08002491 	.word	0x08002491
 80024fc:	080025d5 	.word	0x080025d5
 8002500:	6833      	ldr	r3, [r6, #0]
 8002502:	1d1a      	adds	r2, r3, #4
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6032      	str	r2, [r6, #0]
 8002508:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800250c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002510:	2301      	movs	r3, #1
 8002512:	e09c      	b.n	800264e <_printf_i+0x1e6>
 8002514:	6833      	ldr	r3, [r6, #0]
 8002516:	6820      	ldr	r0, [r4, #0]
 8002518:	1d19      	adds	r1, r3, #4
 800251a:	6031      	str	r1, [r6, #0]
 800251c:	0606      	lsls	r6, r0, #24
 800251e:	d501      	bpl.n	8002524 <_printf_i+0xbc>
 8002520:	681d      	ldr	r5, [r3, #0]
 8002522:	e003      	b.n	800252c <_printf_i+0xc4>
 8002524:	0645      	lsls	r5, r0, #25
 8002526:	d5fb      	bpl.n	8002520 <_printf_i+0xb8>
 8002528:	f9b3 5000 	ldrsh.w	r5, [r3]
 800252c:	2d00      	cmp	r5, #0
 800252e:	da03      	bge.n	8002538 <_printf_i+0xd0>
 8002530:	232d      	movs	r3, #45	@ 0x2d
 8002532:	426d      	negs	r5, r5
 8002534:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002538:	230a      	movs	r3, #10
 800253a:	4858      	ldr	r0, [pc, #352]	@ (800269c <_printf_i+0x234>)
 800253c:	e011      	b.n	8002562 <_printf_i+0xfa>
 800253e:	6821      	ldr	r1, [r4, #0]
 8002540:	6833      	ldr	r3, [r6, #0]
 8002542:	0608      	lsls	r0, r1, #24
 8002544:	f853 5b04 	ldr.w	r5, [r3], #4
 8002548:	d402      	bmi.n	8002550 <_printf_i+0xe8>
 800254a:	0649      	lsls	r1, r1, #25
 800254c:	bf48      	it	mi
 800254e:	b2ad      	uxthmi	r5, r5
 8002550:	2f6f      	cmp	r7, #111	@ 0x6f
 8002552:	6033      	str	r3, [r6, #0]
 8002554:	bf14      	ite	ne
 8002556:	230a      	movne	r3, #10
 8002558:	2308      	moveq	r3, #8
 800255a:	4850      	ldr	r0, [pc, #320]	@ (800269c <_printf_i+0x234>)
 800255c:	2100      	movs	r1, #0
 800255e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002562:	6866      	ldr	r6, [r4, #4]
 8002564:	2e00      	cmp	r6, #0
 8002566:	60a6      	str	r6, [r4, #8]
 8002568:	db05      	blt.n	8002576 <_printf_i+0x10e>
 800256a:	6821      	ldr	r1, [r4, #0]
 800256c:	432e      	orrs	r6, r5
 800256e:	f021 0104 	bic.w	r1, r1, #4
 8002572:	6021      	str	r1, [r4, #0]
 8002574:	d04b      	beq.n	800260e <_printf_i+0x1a6>
 8002576:	4616      	mov	r6, r2
 8002578:	fbb5 f1f3 	udiv	r1, r5, r3
 800257c:	fb03 5711 	mls	r7, r3, r1, r5
 8002580:	5dc7      	ldrb	r7, [r0, r7]
 8002582:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002586:	462f      	mov	r7, r5
 8002588:	42bb      	cmp	r3, r7
 800258a:	460d      	mov	r5, r1
 800258c:	d9f4      	bls.n	8002578 <_printf_i+0x110>
 800258e:	2b08      	cmp	r3, #8
 8002590:	d10b      	bne.n	80025aa <_printf_i+0x142>
 8002592:	6823      	ldr	r3, [r4, #0]
 8002594:	07df      	lsls	r7, r3, #31
 8002596:	d508      	bpl.n	80025aa <_printf_i+0x142>
 8002598:	6923      	ldr	r3, [r4, #16]
 800259a:	6861      	ldr	r1, [r4, #4]
 800259c:	4299      	cmp	r1, r3
 800259e:	bfde      	ittt	le
 80025a0:	2330      	movle	r3, #48	@ 0x30
 80025a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80025a6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80025aa:	1b92      	subs	r2, r2, r6
 80025ac:	6122      	str	r2, [r4, #16]
 80025ae:	464b      	mov	r3, r9
 80025b0:	4621      	mov	r1, r4
 80025b2:	4640      	mov	r0, r8
 80025b4:	f8cd a000 	str.w	sl, [sp]
 80025b8:	aa03      	add	r2, sp, #12
 80025ba:	f7ff fee3 	bl	8002384 <_printf_common>
 80025be:	3001      	adds	r0, #1
 80025c0:	d14a      	bne.n	8002658 <_printf_i+0x1f0>
 80025c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80025c6:	b004      	add	sp, #16
 80025c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025cc:	6823      	ldr	r3, [r4, #0]
 80025ce:	f043 0320 	orr.w	r3, r3, #32
 80025d2:	6023      	str	r3, [r4, #0]
 80025d4:	2778      	movs	r7, #120	@ 0x78
 80025d6:	4832      	ldr	r0, [pc, #200]	@ (80026a0 <_printf_i+0x238>)
 80025d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80025dc:	6823      	ldr	r3, [r4, #0]
 80025de:	6831      	ldr	r1, [r6, #0]
 80025e0:	061f      	lsls	r7, r3, #24
 80025e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80025e6:	d402      	bmi.n	80025ee <_printf_i+0x186>
 80025e8:	065f      	lsls	r7, r3, #25
 80025ea:	bf48      	it	mi
 80025ec:	b2ad      	uxthmi	r5, r5
 80025ee:	6031      	str	r1, [r6, #0]
 80025f0:	07d9      	lsls	r1, r3, #31
 80025f2:	bf44      	itt	mi
 80025f4:	f043 0320 	orrmi.w	r3, r3, #32
 80025f8:	6023      	strmi	r3, [r4, #0]
 80025fa:	b11d      	cbz	r5, 8002604 <_printf_i+0x19c>
 80025fc:	2310      	movs	r3, #16
 80025fe:	e7ad      	b.n	800255c <_printf_i+0xf4>
 8002600:	4826      	ldr	r0, [pc, #152]	@ (800269c <_printf_i+0x234>)
 8002602:	e7e9      	b.n	80025d8 <_printf_i+0x170>
 8002604:	6823      	ldr	r3, [r4, #0]
 8002606:	f023 0320 	bic.w	r3, r3, #32
 800260a:	6023      	str	r3, [r4, #0]
 800260c:	e7f6      	b.n	80025fc <_printf_i+0x194>
 800260e:	4616      	mov	r6, r2
 8002610:	e7bd      	b.n	800258e <_printf_i+0x126>
 8002612:	6833      	ldr	r3, [r6, #0]
 8002614:	6825      	ldr	r5, [r4, #0]
 8002616:	1d18      	adds	r0, r3, #4
 8002618:	6961      	ldr	r1, [r4, #20]
 800261a:	6030      	str	r0, [r6, #0]
 800261c:	062e      	lsls	r6, r5, #24
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	d501      	bpl.n	8002626 <_printf_i+0x1be>
 8002622:	6019      	str	r1, [r3, #0]
 8002624:	e002      	b.n	800262c <_printf_i+0x1c4>
 8002626:	0668      	lsls	r0, r5, #25
 8002628:	d5fb      	bpl.n	8002622 <_printf_i+0x1ba>
 800262a:	8019      	strh	r1, [r3, #0]
 800262c:	2300      	movs	r3, #0
 800262e:	4616      	mov	r6, r2
 8002630:	6123      	str	r3, [r4, #16]
 8002632:	e7bc      	b.n	80025ae <_printf_i+0x146>
 8002634:	6833      	ldr	r3, [r6, #0]
 8002636:	2100      	movs	r1, #0
 8002638:	1d1a      	adds	r2, r3, #4
 800263a:	6032      	str	r2, [r6, #0]
 800263c:	681e      	ldr	r6, [r3, #0]
 800263e:	6862      	ldr	r2, [r4, #4]
 8002640:	4630      	mov	r0, r6
 8002642:	f000 fa95 	bl	8002b70 <memchr>
 8002646:	b108      	cbz	r0, 800264c <_printf_i+0x1e4>
 8002648:	1b80      	subs	r0, r0, r6
 800264a:	6060      	str	r0, [r4, #4]
 800264c:	6863      	ldr	r3, [r4, #4]
 800264e:	6123      	str	r3, [r4, #16]
 8002650:	2300      	movs	r3, #0
 8002652:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002656:	e7aa      	b.n	80025ae <_printf_i+0x146>
 8002658:	4632      	mov	r2, r6
 800265a:	4649      	mov	r1, r9
 800265c:	4640      	mov	r0, r8
 800265e:	6923      	ldr	r3, [r4, #16]
 8002660:	47d0      	blx	sl
 8002662:	3001      	adds	r0, #1
 8002664:	d0ad      	beq.n	80025c2 <_printf_i+0x15a>
 8002666:	6823      	ldr	r3, [r4, #0]
 8002668:	079b      	lsls	r3, r3, #30
 800266a:	d413      	bmi.n	8002694 <_printf_i+0x22c>
 800266c:	68e0      	ldr	r0, [r4, #12]
 800266e:	9b03      	ldr	r3, [sp, #12]
 8002670:	4298      	cmp	r0, r3
 8002672:	bfb8      	it	lt
 8002674:	4618      	movlt	r0, r3
 8002676:	e7a6      	b.n	80025c6 <_printf_i+0x15e>
 8002678:	2301      	movs	r3, #1
 800267a:	4632      	mov	r2, r6
 800267c:	4649      	mov	r1, r9
 800267e:	4640      	mov	r0, r8
 8002680:	47d0      	blx	sl
 8002682:	3001      	adds	r0, #1
 8002684:	d09d      	beq.n	80025c2 <_printf_i+0x15a>
 8002686:	3501      	adds	r5, #1
 8002688:	68e3      	ldr	r3, [r4, #12]
 800268a:	9903      	ldr	r1, [sp, #12]
 800268c:	1a5b      	subs	r3, r3, r1
 800268e:	42ab      	cmp	r3, r5
 8002690:	dcf2      	bgt.n	8002678 <_printf_i+0x210>
 8002692:	e7eb      	b.n	800266c <_printf_i+0x204>
 8002694:	2500      	movs	r5, #0
 8002696:	f104 0619 	add.w	r6, r4, #25
 800269a:	e7f5      	b.n	8002688 <_printf_i+0x220>
 800269c:	08002dfd 	.word	0x08002dfd
 80026a0:	08002e0e 	.word	0x08002e0e

080026a4 <__sflush_r>:
 80026a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80026a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026aa:	0716      	lsls	r6, r2, #28
 80026ac:	4605      	mov	r5, r0
 80026ae:	460c      	mov	r4, r1
 80026b0:	d454      	bmi.n	800275c <__sflush_r+0xb8>
 80026b2:	684b      	ldr	r3, [r1, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	dc02      	bgt.n	80026be <__sflush_r+0x1a>
 80026b8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	dd48      	ble.n	8002750 <__sflush_r+0xac>
 80026be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80026c0:	2e00      	cmp	r6, #0
 80026c2:	d045      	beq.n	8002750 <__sflush_r+0xac>
 80026c4:	2300      	movs	r3, #0
 80026c6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80026ca:	682f      	ldr	r7, [r5, #0]
 80026cc:	6a21      	ldr	r1, [r4, #32]
 80026ce:	602b      	str	r3, [r5, #0]
 80026d0:	d030      	beq.n	8002734 <__sflush_r+0x90>
 80026d2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80026d4:	89a3      	ldrh	r3, [r4, #12]
 80026d6:	0759      	lsls	r1, r3, #29
 80026d8:	d505      	bpl.n	80026e6 <__sflush_r+0x42>
 80026da:	6863      	ldr	r3, [r4, #4]
 80026dc:	1ad2      	subs	r2, r2, r3
 80026de:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80026e0:	b10b      	cbz	r3, 80026e6 <__sflush_r+0x42>
 80026e2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80026e4:	1ad2      	subs	r2, r2, r3
 80026e6:	2300      	movs	r3, #0
 80026e8:	4628      	mov	r0, r5
 80026ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80026ec:	6a21      	ldr	r1, [r4, #32]
 80026ee:	47b0      	blx	r6
 80026f0:	1c43      	adds	r3, r0, #1
 80026f2:	89a3      	ldrh	r3, [r4, #12]
 80026f4:	d106      	bne.n	8002704 <__sflush_r+0x60>
 80026f6:	6829      	ldr	r1, [r5, #0]
 80026f8:	291d      	cmp	r1, #29
 80026fa:	d82b      	bhi.n	8002754 <__sflush_r+0xb0>
 80026fc:	4a28      	ldr	r2, [pc, #160]	@ (80027a0 <__sflush_r+0xfc>)
 80026fe:	40ca      	lsrs	r2, r1
 8002700:	07d6      	lsls	r6, r2, #31
 8002702:	d527      	bpl.n	8002754 <__sflush_r+0xb0>
 8002704:	2200      	movs	r2, #0
 8002706:	6062      	str	r2, [r4, #4]
 8002708:	6922      	ldr	r2, [r4, #16]
 800270a:	04d9      	lsls	r1, r3, #19
 800270c:	6022      	str	r2, [r4, #0]
 800270e:	d504      	bpl.n	800271a <__sflush_r+0x76>
 8002710:	1c42      	adds	r2, r0, #1
 8002712:	d101      	bne.n	8002718 <__sflush_r+0x74>
 8002714:	682b      	ldr	r3, [r5, #0]
 8002716:	b903      	cbnz	r3, 800271a <__sflush_r+0x76>
 8002718:	6560      	str	r0, [r4, #84]	@ 0x54
 800271a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800271c:	602f      	str	r7, [r5, #0]
 800271e:	b1b9      	cbz	r1, 8002750 <__sflush_r+0xac>
 8002720:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002724:	4299      	cmp	r1, r3
 8002726:	d002      	beq.n	800272e <__sflush_r+0x8a>
 8002728:	4628      	mov	r0, r5
 800272a:	f000 fa2f 	bl	8002b8c <_free_r>
 800272e:	2300      	movs	r3, #0
 8002730:	6363      	str	r3, [r4, #52]	@ 0x34
 8002732:	e00d      	b.n	8002750 <__sflush_r+0xac>
 8002734:	2301      	movs	r3, #1
 8002736:	4628      	mov	r0, r5
 8002738:	47b0      	blx	r6
 800273a:	4602      	mov	r2, r0
 800273c:	1c50      	adds	r0, r2, #1
 800273e:	d1c9      	bne.n	80026d4 <__sflush_r+0x30>
 8002740:	682b      	ldr	r3, [r5, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0c6      	beq.n	80026d4 <__sflush_r+0x30>
 8002746:	2b1d      	cmp	r3, #29
 8002748:	d001      	beq.n	800274e <__sflush_r+0xaa>
 800274a:	2b16      	cmp	r3, #22
 800274c:	d11d      	bne.n	800278a <__sflush_r+0xe6>
 800274e:	602f      	str	r7, [r5, #0]
 8002750:	2000      	movs	r0, #0
 8002752:	e021      	b.n	8002798 <__sflush_r+0xf4>
 8002754:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002758:	b21b      	sxth	r3, r3
 800275a:	e01a      	b.n	8002792 <__sflush_r+0xee>
 800275c:	690f      	ldr	r7, [r1, #16]
 800275e:	2f00      	cmp	r7, #0
 8002760:	d0f6      	beq.n	8002750 <__sflush_r+0xac>
 8002762:	0793      	lsls	r3, r2, #30
 8002764:	bf18      	it	ne
 8002766:	2300      	movne	r3, #0
 8002768:	680e      	ldr	r6, [r1, #0]
 800276a:	bf08      	it	eq
 800276c:	694b      	ldreq	r3, [r1, #20]
 800276e:	1bf6      	subs	r6, r6, r7
 8002770:	600f      	str	r7, [r1, #0]
 8002772:	608b      	str	r3, [r1, #8]
 8002774:	2e00      	cmp	r6, #0
 8002776:	ddeb      	ble.n	8002750 <__sflush_r+0xac>
 8002778:	4633      	mov	r3, r6
 800277a:	463a      	mov	r2, r7
 800277c:	4628      	mov	r0, r5
 800277e:	6a21      	ldr	r1, [r4, #32]
 8002780:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002784:	47e0      	blx	ip
 8002786:	2800      	cmp	r0, #0
 8002788:	dc07      	bgt.n	800279a <__sflush_r+0xf6>
 800278a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800278e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002792:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002796:	81a3      	strh	r3, [r4, #12]
 8002798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800279a:	4407      	add	r7, r0
 800279c:	1a36      	subs	r6, r6, r0
 800279e:	e7e9      	b.n	8002774 <__sflush_r+0xd0>
 80027a0:	20400001 	.word	0x20400001

080027a4 <_fflush_r>:
 80027a4:	b538      	push	{r3, r4, r5, lr}
 80027a6:	690b      	ldr	r3, [r1, #16]
 80027a8:	4605      	mov	r5, r0
 80027aa:	460c      	mov	r4, r1
 80027ac:	b913      	cbnz	r3, 80027b4 <_fflush_r+0x10>
 80027ae:	2500      	movs	r5, #0
 80027b0:	4628      	mov	r0, r5
 80027b2:	bd38      	pop	{r3, r4, r5, pc}
 80027b4:	b118      	cbz	r0, 80027be <_fflush_r+0x1a>
 80027b6:	6a03      	ldr	r3, [r0, #32]
 80027b8:	b90b      	cbnz	r3, 80027be <_fflush_r+0x1a>
 80027ba:	f7ff fb19 	bl	8001df0 <__sinit>
 80027be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f3      	beq.n	80027ae <_fflush_r+0xa>
 80027c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80027c8:	07d0      	lsls	r0, r2, #31
 80027ca:	d404      	bmi.n	80027d6 <_fflush_r+0x32>
 80027cc:	0599      	lsls	r1, r3, #22
 80027ce:	d402      	bmi.n	80027d6 <_fflush_r+0x32>
 80027d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80027d2:	f7ff fbe6 	bl	8001fa2 <__retarget_lock_acquire_recursive>
 80027d6:	4628      	mov	r0, r5
 80027d8:	4621      	mov	r1, r4
 80027da:	f7ff ff63 	bl	80026a4 <__sflush_r>
 80027de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80027e0:	4605      	mov	r5, r0
 80027e2:	07da      	lsls	r2, r3, #31
 80027e4:	d4e4      	bmi.n	80027b0 <_fflush_r+0xc>
 80027e6:	89a3      	ldrh	r3, [r4, #12]
 80027e8:	059b      	lsls	r3, r3, #22
 80027ea:	d4e1      	bmi.n	80027b0 <_fflush_r+0xc>
 80027ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80027ee:	f7ff fbd9 	bl	8001fa4 <__retarget_lock_release_recursive>
 80027f2:	e7dd      	b.n	80027b0 <_fflush_r+0xc>

080027f4 <__malloc_lock>:
 80027f4:	4801      	ldr	r0, [pc, #4]	@ (80027fc <__malloc_lock+0x8>)
 80027f6:	f7ff bbd4 	b.w	8001fa2 <__retarget_lock_acquire_recursive>
 80027fa:	bf00      	nop
 80027fc:	2000020c 	.word	0x2000020c

08002800 <__malloc_unlock>:
 8002800:	4801      	ldr	r0, [pc, #4]	@ (8002808 <__malloc_unlock+0x8>)
 8002802:	f7ff bbcf 	b.w	8001fa4 <__retarget_lock_release_recursive>
 8002806:	bf00      	nop
 8002808:	2000020c 	.word	0x2000020c

0800280c <__sread>:
 800280c:	b510      	push	{r4, lr}
 800280e:	460c      	mov	r4, r1
 8002810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002814:	f000 f956 	bl	8002ac4 <_read_r>
 8002818:	2800      	cmp	r0, #0
 800281a:	bfab      	itete	ge
 800281c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800281e:	89a3      	ldrhlt	r3, [r4, #12]
 8002820:	181b      	addge	r3, r3, r0
 8002822:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002826:	bfac      	ite	ge
 8002828:	6563      	strge	r3, [r4, #84]	@ 0x54
 800282a:	81a3      	strhlt	r3, [r4, #12]
 800282c:	bd10      	pop	{r4, pc}

0800282e <__swrite>:
 800282e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002832:	461f      	mov	r7, r3
 8002834:	898b      	ldrh	r3, [r1, #12]
 8002836:	4605      	mov	r5, r0
 8002838:	05db      	lsls	r3, r3, #23
 800283a:	460c      	mov	r4, r1
 800283c:	4616      	mov	r6, r2
 800283e:	d505      	bpl.n	800284c <__swrite+0x1e>
 8002840:	2302      	movs	r3, #2
 8002842:	2200      	movs	r2, #0
 8002844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002848:	f000 f92a 	bl	8002aa0 <_lseek_r>
 800284c:	89a3      	ldrh	r3, [r4, #12]
 800284e:	4632      	mov	r2, r6
 8002850:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002854:	81a3      	strh	r3, [r4, #12]
 8002856:	4628      	mov	r0, r5
 8002858:	463b      	mov	r3, r7
 800285a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800285e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002862:	f000 b951 	b.w	8002b08 <_write_r>

08002866 <__sseek>:
 8002866:	b510      	push	{r4, lr}
 8002868:	460c      	mov	r4, r1
 800286a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800286e:	f000 f917 	bl	8002aa0 <_lseek_r>
 8002872:	1c43      	adds	r3, r0, #1
 8002874:	89a3      	ldrh	r3, [r4, #12]
 8002876:	bf15      	itete	ne
 8002878:	6560      	strne	r0, [r4, #84]	@ 0x54
 800287a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800287e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002882:	81a3      	strheq	r3, [r4, #12]
 8002884:	bf18      	it	ne
 8002886:	81a3      	strhne	r3, [r4, #12]
 8002888:	bd10      	pop	{r4, pc}

0800288a <__sclose>:
 800288a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800288e:	f000 b94d 	b.w	8002b2c <_close_r>

08002892 <__swbuf_r>:
 8002892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002894:	460e      	mov	r6, r1
 8002896:	4614      	mov	r4, r2
 8002898:	4605      	mov	r5, r0
 800289a:	b118      	cbz	r0, 80028a4 <__swbuf_r+0x12>
 800289c:	6a03      	ldr	r3, [r0, #32]
 800289e:	b90b      	cbnz	r3, 80028a4 <__swbuf_r+0x12>
 80028a0:	f7ff faa6 	bl	8001df0 <__sinit>
 80028a4:	69a3      	ldr	r3, [r4, #24]
 80028a6:	60a3      	str	r3, [r4, #8]
 80028a8:	89a3      	ldrh	r3, [r4, #12]
 80028aa:	071a      	lsls	r2, r3, #28
 80028ac:	d501      	bpl.n	80028b2 <__swbuf_r+0x20>
 80028ae:	6923      	ldr	r3, [r4, #16]
 80028b0:	b943      	cbnz	r3, 80028c4 <__swbuf_r+0x32>
 80028b2:	4621      	mov	r1, r4
 80028b4:	4628      	mov	r0, r5
 80028b6:	f000 f82b 	bl	8002910 <__swsetup_r>
 80028ba:	b118      	cbz	r0, 80028c4 <__swbuf_r+0x32>
 80028bc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80028c0:	4638      	mov	r0, r7
 80028c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028c4:	6823      	ldr	r3, [r4, #0]
 80028c6:	6922      	ldr	r2, [r4, #16]
 80028c8:	b2f6      	uxtb	r6, r6
 80028ca:	1a98      	subs	r0, r3, r2
 80028cc:	6963      	ldr	r3, [r4, #20]
 80028ce:	4637      	mov	r7, r6
 80028d0:	4283      	cmp	r3, r0
 80028d2:	dc05      	bgt.n	80028e0 <__swbuf_r+0x4e>
 80028d4:	4621      	mov	r1, r4
 80028d6:	4628      	mov	r0, r5
 80028d8:	f7ff ff64 	bl	80027a4 <_fflush_r>
 80028dc:	2800      	cmp	r0, #0
 80028de:	d1ed      	bne.n	80028bc <__swbuf_r+0x2a>
 80028e0:	68a3      	ldr	r3, [r4, #8]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	60a3      	str	r3, [r4, #8]
 80028e6:	6823      	ldr	r3, [r4, #0]
 80028e8:	1c5a      	adds	r2, r3, #1
 80028ea:	6022      	str	r2, [r4, #0]
 80028ec:	701e      	strb	r6, [r3, #0]
 80028ee:	6962      	ldr	r2, [r4, #20]
 80028f0:	1c43      	adds	r3, r0, #1
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d004      	beq.n	8002900 <__swbuf_r+0x6e>
 80028f6:	89a3      	ldrh	r3, [r4, #12]
 80028f8:	07db      	lsls	r3, r3, #31
 80028fa:	d5e1      	bpl.n	80028c0 <__swbuf_r+0x2e>
 80028fc:	2e0a      	cmp	r6, #10
 80028fe:	d1df      	bne.n	80028c0 <__swbuf_r+0x2e>
 8002900:	4621      	mov	r1, r4
 8002902:	4628      	mov	r0, r5
 8002904:	f7ff ff4e 	bl	80027a4 <_fflush_r>
 8002908:	2800      	cmp	r0, #0
 800290a:	d0d9      	beq.n	80028c0 <__swbuf_r+0x2e>
 800290c:	e7d6      	b.n	80028bc <__swbuf_r+0x2a>
	...

08002910 <__swsetup_r>:
 8002910:	b538      	push	{r3, r4, r5, lr}
 8002912:	4b29      	ldr	r3, [pc, #164]	@ (80029b8 <__swsetup_r+0xa8>)
 8002914:	4605      	mov	r5, r0
 8002916:	6818      	ldr	r0, [r3, #0]
 8002918:	460c      	mov	r4, r1
 800291a:	b118      	cbz	r0, 8002924 <__swsetup_r+0x14>
 800291c:	6a03      	ldr	r3, [r0, #32]
 800291e:	b90b      	cbnz	r3, 8002924 <__swsetup_r+0x14>
 8002920:	f7ff fa66 	bl	8001df0 <__sinit>
 8002924:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002928:	0719      	lsls	r1, r3, #28
 800292a:	d422      	bmi.n	8002972 <__swsetup_r+0x62>
 800292c:	06da      	lsls	r2, r3, #27
 800292e:	d407      	bmi.n	8002940 <__swsetup_r+0x30>
 8002930:	2209      	movs	r2, #9
 8002932:	602a      	str	r2, [r5, #0]
 8002934:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002938:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800293c:	81a3      	strh	r3, [r4, #12]
 800293e:	e033      	b.n	80029a8 <__swsetup_r+0x98>
 8002940:	0758      	lsls	r0, r3, #29
 8002942:	d512      	bpl.n	800296a <__swsetup_r+0x5a>
 8002944:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002946:	b141      	cbz	r1, 800295a <__swsetup_r+0x4a>
 8002948:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800294c:	4299      	cmp	r1, r3
 800294e:	d002      	beq.n	8002956 <__swsetup_r+0x46>
 8002950:	4628      	mov	r0, r5
 8002952:	f000 f91b 	bl	8002b8c <_free_r>
 8002956:	2300      	movs	r3, #0
 8002958:	6363      	str	r3, [r4, #52]	@ 0x34
 800295a:	89a3      	ldrh	r3, [r4, #12]
 800295c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002960:	81a3      	strh	r3, [r4, #12]
 8002962:	2300      	movs	r3, #0
 8002964:	6063      	str	r3, [r4, #4]
 8002966:	6923      	ldr	r3, [r4, #16]
 8002968:	6023      	str	r3, [r4, #0]
 800296a:	89a3      	ldrh	r3, [r4, #12]
 800296c:	f043 0308 	orr.w	r3, r3, #8
 8002970:	81a3      	strh	r3, [r4, #12]
 8002972:	6923      	ldr	r3, [r4, #16]
 8002974:	b94b      	cbnz	r3, 800298a <__swsetup_r+0x7a>
 8002976:	89a3      	ldrh	r3, [r4, #12]
 8002978:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800297c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002980:	d003      	beq.n	800298a <__swsetup_r+0x7a>
 8002982:	4621      	mov	r1, r4
 8002984:	4628      	mov	r0, r5
 8002986:	f000 f83e 	bl	8002a06 <__smakebuf_r>
 800298a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800298e:	f013 0201 	ands.w	r2, r3, #1
 8002992:	d00a      	beq.n	80029aa <__swsetup_r+0x9a>
 8002994:	2200      	movs	r2, #0
 8002996:	60a2      	str	r2, [r4, #8]
 8002998:	6962      	ldr	r2, [r4, #20]
 800299a:	4252      	negs	r2, r2
 800299c:	61a2      	str	r2, [r4, #24]
 800299e:	6922      	ldr	r2, [r4, #16]
 80029a0:	b942      	cbnz	r2, 80029b4 <__swsetup_r+0xa4>
 80029a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80029a6:	d1c5      	bne.n	8002934 <__swsetup_r+0x24>
 80029a8:	bd38      	pop	{r3, r4, r5, pc}
 80029aa:	0799      	lsls	r1, r3, #30
 80029ac:	bf58      	it	pl
 80029ae:	6962      	ldrpl	r2, [r4, #20]
 80029b0:	60a2      	str	r2, [r4, #8]
 80029b2:	e7f4      	b.n	800299e <__swsetup_r+0x8e>
 80029b4:	2000      	movs	r0, #0
 80029b6:	e7f7      	b.n	80029a8 <__swsetup_r+0x98>
 80029b8:	20000018 	.word	0x20000018

080029bc <__swhatbuf_r>:
 80029bc:	b570      	push	{r4, r5, r6, lr}
 80029be:	460c      	mov	r4, r1
 80029c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029c4:	4615      	mov	r5, r2
 80029c6:	2900      	cmp	r1, #0
 80029c8:	461e      	mov	r6, r3
 80029ca:	b096      	sub	sp, #88	@ 0x58
 80029cc:	da0c      	bge.n	80029e8 <__swhatbuf_r+0x2c>
 80029ce:	89a3      	ldrh	r3, [r4, #12]
 80029d0:	2100      	movs	r1, #0
 80029d2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80029d6:	bf14      	ite	ne
 80029d8:	2340      	movne	r3, #64	@ 0x40
 80029da:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80029de:	2000      	movs	r0, #0
 80029e0:	6031      	str	r1, [r6, #0]
 80029e2:	602b      	str	r3, [r5, #0]
 80029e4:	b016      	add	sp, #88	@ 0x58
 80029e6:	bd70      	pop	{r4, r5, r6, pc}
 80029e8:	466a      	mov	r2, sp
 80029ea:	f000 f8af 	bl	8002b4c <_fstat_r>
 80029ee:	2800      	cmp	r0, #0
 80029f0:	dbed      	blt.n	80029ce <__swhatbuf_r+0x12>
 80029f2:	9901      	ldr	r1, [sp, #4]
 80029f4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80029f8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80029fc:	4259      	negs	r1, r3
 80029fe:	4159      	adcs	r1, r3
 8002a00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a04:	e7eb      	b.n	80029de <__swhatbuf_r+0x22>

08002a06 <__smakebuf_r>:
 8002a06:	898b      	ldrh	r3, [r1, #12]
 8002a08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a0a:	079d      	lsls	r5, r3, #30
 8002a0c:	4606      	mov	r6, r0
 8002a0e:	460c      	mov	r4, r1
 8002a10:	d507      	bpl.n	8002a22 <__smakebuf_r+0x1c>
 8002a12:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002a16:	6023      	str	r3, [r4, #0]
 8002a18:	6123      	str	r3, [r4, #16]
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	6163      	str	r3, [r4, #20]
 8002a1e:	b003      	add	sp, #12
 8002a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a22:	466a      	mov	r2, sp
 8002a24:	ab01      	add	r3, sp, #4
 8002a26:	f7ff ffc9 	bl	80029bc <__swhatbuf_r>
 8002a2a:	9f00      	ldr	r7, [sp, #0]
 8002a2c:	4605      	mov	r5, r0
 8002a2e:	4639      	mov	r1, r7
 8002a30:	4630      	mov	r0, r6
 8002a32:	f7ff fc27 	bl	8002284 <_malloc_r>
 8002a36:	b948      	cbnz	r0, 8002a4c <__smakebuf_r+0x46>
 8002a38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a3c:	059a      	lsls	r2, r3, #22
 8002a3e:	d4ee      	bmi.n	8002a1e <__smakebuf_r+0x18>
 8002a40:	f023 0303 	bic.w	r3, r3, #3
 8002a44:	f043 0302 	orr.w	r3, r3, #2
 8002a48:	81a3      	strh	r3, [r4, #12]
 8002a4a:	e7e2      	b.n	8002a12 <__smakebuf_r+0xc>
 8002a4c:	89a3      	ldrh	r3, [r4, #12]
 8002a4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002a52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a56:	81a3      	strh	r3, [r4, #12]
 8002a58:	9b01      	ldr	r3, [sp, #4]
 8002a5a:	6020      	str	r0, [r4, #0]
 8002a5c:	b15b      	cbz	r3, 8002a76 <__smakebuf_r+0x70>
 8002a5e:	4630      	mov	r0, r6
 8002a60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a64:	f000 f80c 	bl	8002a80 <_isatty_r>
 8002a68:	b128      	cbz	r0, 8002a76 <__smakebuf_r+0x70>
 8002a6a:	89a3      	ldrh	r3, [r4, #12]
 8002a6c:	f023 0303 	bic.w	r3, r3, #3
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	81a3      	strh	r3, [r4, #12]
 8002a76:	89a3      	ldrh	r3, [r4, #12]
 8002a78:	431d      	orrs	r5, r3
 8002a7a:	81a5      	strh	r5, [r4, #12]
 8002a7c:	e7cf      	b.n	8002a1e <__smakebuf_r+0x18>
	...

08002a80 <_isatty_r>:
 8002a80:	b538      	push	{r3, r4, r5, lr}
 8002a82:	2300      	movs	r3, #0
 8002a84:	4d05      	ldr	r5, [pc, #20]	@ (8002a9c <_isatty_r+0x1c>)
 8002a86:	4604      	mov	r4, r0
 8002a88:	4608      	mov	r0, r1
 8002a8a:	602b      	str	r3, [r5, #0]
 8002a8c:	f7fd ff09 	bl	80008a2 <_isatty>
 8002a90:	1c43      	adds	r3, r0, #1
 8002a92:	d102      	bne.n	8002a9a <_isatty_r+0x1a>
 8002a94:	682b      	ldr	r3, [r5, #0]
 8002a96:	b103      	cbz	r3, 8002a9a <_isatty_r+0x1a>
 8002a98:	6023      	str	r3, [r4, #0]
 8002a9a:	bd38      	pop	{r3, r4, r5, pc}
 8002a9c:	20000218 	.word	0x20000218

08002aa0 <_lseek_r>:
 8002aa0:	b538      	push	{r3, r4, r5, lr}
 8002aa2:	4604      	mov	r4, r0
 8002aa4:	4608      	mov	r0, r1
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	4d05      	ldr	r5, [pc, #20]	@ (8002ac0 <_lseek_r+0x20>)
 8002aac:	602a      	str	r2, [r5, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	f7fd ff01 	bl	80008b6 <_lseek>
 8002ab4:	1c43      	adds	r3, r0, #1
 8002ab6:	d102      	bne.n	8002abe <_lseek_r+0x1e>
 8002ab8:	682b      	ldr	r3, [r5, #0]
 8002aba:	b103      	cbz	r3, 8002abe <_lseek_r+0x1e>
 8002abc:	6023      	str	r3, [r4, #0]
 8002abe:	bd38      	pop	{r3, r4, r5, pc}
 8002ac0:	20000218 	.word	0x20000218

08002ac4 <_read_r>:
 8002ac4:	b538      	push	{r3, r4, r5, lr}
 8002ac6:	4604      	mov	r4, r0
 8002ac8:	4608      	mov	r0, r1
 8002aca:	4611      	mov	r1, r2
 8002acc:	2200      	movs	r2, #0
 8002ace:	4d05      	ldr	r5, [pc, #20]	@ (8002ae4 <_read_r+0x20>)
 8002ad0:	602a      	str	r2, [r5, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	f7fd fe92 	bl	80007fc <_read>
 8002ad8:	1c43      	adds	r3, r0, #1
 8002ada:	d102      	bne.n	8002ae2 <_read_r+0x1e>
 8002adc:	682b      	ldr	r3, [r5, #0]
 8002ade:	b103      	cbz	r3, 8002ae2 <_read_r+0x1e>
 8002ae0:	6023      	str	r3, [r4, #0]
 8002ae2:	bd38      	pop	{r3, r4, r5, pc}
 8002ae4:	20000218 	.word	0x20000218

08002ae8 <_sbrk_r>:
 8002ae8:	b538      	push	{r3, r4, r5, lr}
 8002aea:	2300      	movs	r3, #0
 8002aec:	4d05      	ldr	r5, [pc, #20]	@ (8002b04 <_sbrk_r+0x1c>)
 8002aee:	4604      	mov	r4, r0
 8002af0:	4608      	mov	r0, r1
 8002af2:	602b      	str	r3, [r5, #0]
 8002af4:	f7fd feec 	bl	80008d0 <_sbrk>
 8002af8:	1c43      	adds	r3, r0, #1
 8002afa:	d102      	bne.n	8002b02 <_sbrk_r+0x1a>
 8002afc:	682b      	ldr	r3, [r5, #0]
 8002afe:	b103      	cbz	r3, 8002b02 <_sbrk_r+0x1a>
 8002b00:	6023      	str	r3, [r4, #0]
 8002b02:	bd38      	pop	{r3, r4, r5, pc}
 8002b04:	20000218 	.word	0x20000218

08002b08 <_write_r>:
 8002b08:	b538      	push	{r3, r4, r5, lr}
 8002b0a:	4604      	mov	r4, r0
 8002b0c:	4608      	mov	r0, r1
 8002b0e:	4611      	mov	r1, r2
 8002b10:	2200      	movs	r2, #0
 8002b12:	4d05      	ldr	r5, [pc, #20]	@ (8002b28 <_write_r+0x20>)
 8002b14:	602a      	str	r2, [r5, #0]
 8002b16:	461a      	mov	r2, r3
 8002b18:	f7fd fe8d 	bl	8000836 <_write>
 8002b1c:	1c43      	adds	r3, r0, #1
 8002b1e:	d102      	bne.n	8002b26 <_write_r+0x1e>
 8002b20:	682b      	ldr	r3, [r5, #0]
 8002b22:	b103      	cbz	r3, 8002b26 <_write_r+0x1e>
 8002b24:	6023      	str	r3, [r4, #0]
 8002b26:	bd38      	pop	{r3, r4, r5, pc}
 8002b28:	20000218 	.word	0x20000218

08002b2c <_close_r>:
 8002b2c:	b538      	push	{r3, r4, r5, lr}
 8002b2e:	2300      	movs	r3, #0
 8002b30:	4d05      	ldr	r5, [pc, #20]	@ (8002b48 <_close_r+0x1c>)
 8002b32:	4604      	mov	r4, r0
 8002b34:	4608      	mov	r0, r1
 8002b36:	602b      	str	r3, [r5, #0]
 8002b38:	f7fd fe99 	bl	800086e <_close>
 8002b3c:	1c43      	adds	r3, r0, #1
 8002b3e:	d102      	bne.n	8002b46 <_close_r+0x1a>
 8002b40:	682b      	ldr	r3, [r5, #0]
 8002b42:	b103      	cbz	r3, 8002b46 <_close_r+0x1a>
 8002b44:	6023      	str	r3, [r4, #0]
 8002b46:	bd38      	pop	{r3, r4, r5, pc}
 8002b48:	20000218 	.word	0x20000218

08002b4c <_fstat_r>:
 8002b4c:	b538      	push	{r3, r4, r5, lr}
 8002b4e:	2300      	movs	r3, #0
 8002b50:	4d06      	ldr	r5, [pc, #24]	@ (8002b6c <_fstat_r+0x20>)
 8002b52:	4604      	mov	r4, r0
 8002b54:	4608      	mov	r0, r1
 8002b56:	4611      	mov	r1, r2
 8002b58:	602b      	str	r3, [r5, #0]
 8002b5a:	f7fd fe93 	bl	8000884 <_fstat>
 8002b5e:	1c43      	adds	r3, r0, #1
 8002b60:	d102      	bne.n	8002b68 <_fstat_r+0x1c>
 8002b62:	682b      	ldr	r3, [r5, #0]
 8002b64:	b103      	cbz	r3, 8002b68 <_fstat_r+0x1c>
 8002b66:	6023      	str	r3, [r4, #0]
 8002b68:	bd38      	pop	{r3, r4, r5, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20000218 	.word	0x20000218

08002b70 <memchr>:
 8002b70:	4603      	mov	r3, r0
 8002b72:	b510      	push	{r4, lr}
 8002b74:	b2c9      	uxtb	r1, r1
 8002b76:	4402      	add	r2, r0
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	d101      	bne.n	8002b82 <memchr+0x12>
 8002b7e:	2000      	movs	r0, #0
 8002b80:	e003      	b.n	8002b8a <memchr+0x1a>
 8002b82:	7804      	ldrb	r4, [r0, #0]
 8002b84:	3301      	adds	r3, #1
 8002b86:	428c      	cmp	r4, r1
 8002b88:	d1f6      	bne.n	8002b78 <memchr+0x8>
 8002b8a:	bd10      	pop	{r4, pc}

08002b8c <_free_r>:
 8002b8c:	b538      	push	{r3, r4, r5, lr}
 8002b8e:	4605      	mov	r5, r0
 8002b90:	2900      	cmp	r1, #0
 8002b92:	d040      	beq.n	8002c16 <_free_r+0x8a>
 8002b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b98:	1f0c      	subs	r4, r1, #4
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	bfb8      	it	lt
 8002b9e:	18e4      	addlt	r4, r4, r3
 8002ba0:	f7ff fe28 	bl	80027f4 <__malloc_lock>
 8002ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8002c18 <_free_r+0x8c>)
 8002ba6:	6813      	ldr	r3, [r2, #0]
 8002ba8:	b933      	cbnz	r3, 8002bb8 <_free_r+0x2c>
 8002baa:	6063      	str	r3, [r4, #4]
 8002bac:	6014      	str	r4, [r2, #0]
 8002bae:	4628      	mov	r0, r5
 8002bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002bb4:	f7ff be24 	b.w	8002800 <__malloc_unlock>
 8002bb8:	42a3      	cmp	r3, r4
 8002bba:	d908      	bls.n	8002bce <_free_r+0x42>
 8002bbc:	6820      	ldr	r0, [r4, #0]
 8002bbe:	1821      	adds	r1, r4, r0
 8002bc0:	428b      	cmp	r3, r1
 8002bc2:	bf01      	itttt	eq
 8002bc4:	6819      	ldreq	r1, [r3, #0]
 8002bc6:	685b      	ldreq	r3, [r3, #4]
 8002bc8:	1809      	addeq	r1, r1, r0
 8002bca:	6021      	streq	r1, [r4, #0]
 8002bcc:	e7ed      	b.n	8002baa <_free_r+0x1e>
 8002bce:	461a      	mov	r2, r3
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	b10b      	cbz	r3, 8002bd8 <_free_r+0x4c>
 8002bd4:	42a3      	cmp	r3, r4
 8002bd6:	d9fa      	bls.n	8002bce <_free_r+0x42>
 8002bd8:	6811      	ldr	r1, [r2, #0]
 8002bda:	1850      	adds	r0, r2, r1
 8002bdc:	42a0      	cmp	r0, r4
 8002bde:	d10b      	bne.n	8002bf8 <_free_r+0x6c>
 8002be0:	6820      	ldr	r0, [r4, #0]
 8002be2:	4401      	add	r1, r0
 8002be4:	1850      	adds	r0, r2, r1
 8002be6:	4283      	cmp	r3, r0
 8002be8:	6011      	str	r1, [r2, #0]
 8002bea:	d1e0      	bne.n	8002bae <_free_r+0x22>
 8002bec:	6818      	ldr	r0, [r3, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	4408      	add	r0, r1
 8002bf2:	6010      	str	r0, [r2, #0]
 8002bf4:	6053      	str	r3, [r2, #4]
 8002bf6:	e7da      	b.n	8002bae <_free_r+0x22>
 8002bf8:	d902      	bls.n	8002c00 <_free_r+0x74>
 8002bfa:	230c      	movs	r3, #12
 8002bfc:	602b      	str	r3, [r5, #0]
 8002bfe:	e7d6      	b.n	8002bae <_free_r+0x22>
 8002c00:	6820      	ldr	r0, [r4, #0]
 8002c02:	1821      	adds	r1, r4, r0
 8002c04:	428b      	cmp	r3, r1
 8002c06:	bf01      	itttt	eq
 8002c08:	6819      	ldreq	r1, [r3, #0]
 8002c0a:	685b      	ldreq	r3, [r3, #4]
 8002c0c:	1809      	addeq	r1, r1, r0
 8002c0e:	6021      	streq	r1, [r4, #0]
 8002c10:	6063      	str	r3, [r4, #4]
 8002c12:	6054      	str	r4, [r2, #4]
 8002c14:	e7cb      	b.n	8002bae <_free_r+0x22>
 8002c16:	bd38      	pop	{r3, r4, r5, pc}
 8002c18:	20000214 	.word	0x20000214

08002c1c <_init>:
 8002c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c1e:	bf00      	nop
 8002c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c22:	bc08      	pop	{r3}
 8002c24:	469e      	mov	lr, r3
 8002c26:	4770      	bx	lr

08002c28 <_fini>:
 8002c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c2a:	bf00      	nop
 8002c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c2e:	bc08      	pop	{r3}
 8002c30:	469e      	mov	lr, r3
 8002c32:	4770      	bx	lr
